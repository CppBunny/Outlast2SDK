#pragma once

// Outlast2 (1.0) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

namespace SDK
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class OLGame.ActorFactoryOLAmbientSound
// 0x0000 (0x00AC - 0x00AC)
class UActorFactoryOLAmbientSound : public UActorFactoryAkAmbientSound
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.ActorFactoryOLAmbientSound");
		return ptr;
	}

};


// Class OLGame.ActorFactoryOLAmbientSoundMovable
// 0x0000 (0x00AC - 0x00AC)
class UActorFactoryOLAmbientSoundMovable : public UActorFactoryOLAmbientSound
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.ActorFactoryOLAmbientSoundMovable");
		return ptr;
	}

};


// Class OLGame.ActorFactoryOLSoundEmittingMeshActor
// 0x0010 (0x00CC - 0x00BC)
class UActorFactoryOLSoundEmittingMeshActor : public UActorFactoryStaticMesh
{
public:
	class UAkEvent*                                    StartEvent;                                               // 0x00BC(0x0008) (Edit)
	class UAkEvent*                                    StopEvent;                                                // 0x00C4(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.ActorFactoryOLSoundEmittingMeshActor");
		return ptr;
	}

};


// Class OLGame.Interface_CornerOwner
// 0x0000 (0x0068 - 0x0068)
class UInterface_CornerOwner : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.Interface_CornerOwner");
		return ptr;
	}

};


// Class OLGame.OLActorFactoryInteractiveSkeletalFoliage
// 0x0000 (0x00BC - 0x00BC)
class UOLActorFactoryInteractiveSkeletalFoliage : public UActorFactoryInteractiveSkeletalFoliage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLActorFactoryInteractiveSkeletalFoliage");
		return ptr;
	}

};


// Class OLGame.OLActorFactoryTripActor
// 0x0000 (0x00BC - 0x00BC)
class UOLActorFactoryTripActor : public UActorFactoryStaticMesh
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLActorFactoryTripActor");
		return ptr;
	}

};


// Class OLGame.OLAITrigger
// 0x0008 (0x0250 - 0x0248)
class AOLAITrigger : public AActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                                        // 0x0248(0x0008) (Edit, Const, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAITrigger");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void NativeOnTouch(class AActor* Other);
	void PostBeginPlay();
};


// Class OLGame.OLAmbientSound
// 0x001C (0x0278 - 0x025C)
class AOLAmbientSound : public AAkAmbientSound
{
public:
	unsigned long                                      bAllowVirtualization : 1;                                 // 0x025C(0x0004) (Edit)
	unsigned long                                      bHighFidelityDynamicUpdate : 1;                           // 0x025C(0x0004) (Edit)
	TArray<class AOLAmbientSoundClone*>                Clones;                                                   // 0x0260(0x0010) (Edit, NeedCtorLink)
	float                                              MaxPathingDistance;                                       // 0x0270(0x0004) (Edit)
	float                                              MaximumAudibleRange;                                      // 0x0274(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAmbientSound");
		return ptr;
	}

};


// Class OLGame.OLAmbientSoundMovable
// 0x000C (0x0284 - 0x0278)
class AOLAmbientSoundMovable : public AOLAmbientSound
{
public:
	class AOLSplineGameplayMarker*                     LinkedSpline;                                             // 0x0278(0x0008) (Edit)
	float                                              SplineOffset;                                             // 0x0280(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAmbientSoundMovable");
		return ptr;
	}

};


// Class OLGame.OLAmbientSoundClone
// 0x001C (0x0264 - 0x0248)
class AOLAmbientSoundClone : public AActor
{
public:
	class USpriteComponent*                            SpriteComp;                                               // 0x0248(0x0008) (ExportObject, Component, EditInline)
	class AOLAmbientSound*                             Master;                                                   // 0x0250(0x0008) (Edit, EditConst)
	unsigned long                                      bAllowVirtualization : 1;                                 // 0x0258(0x0004) (Edit)
	float                                              MaxPathingDistance;                                       // 0x025C(0x0004) (Edit)
	float                                              MaximumAudibleRange;                                      // 0x0260(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAmbientSoundClone");
		return ptr;
	}

};


// Class OLGame.OLArrow
// 0x025C (0x04A4 - 0x0248)
class AOLArrow : public AActor
{
public:
	unsigned long                                      bPreviewComponents : 1;                                   // 0x0248(0x0004) (Edit)
	unsigned long                                      bHasHitHero : 1;                                          // 0x0248(0x0004)
	unsigned long                                      bHasPlayedFlyBy : 1;                                      // 0x0248(0x0004)
	unsigned long                                      bFireActive : 1;                                          // 0x0248(0x0004) (Transient)
	unsigned long                                      bHasValidHeldByBotState : 1;                              // 0x0248(0x0004) (Transient)
	unsigned long                                      bAttachedToAnimatedSocket : 1;                            // 0x0248(0x0004) (Transient)
	unsigned long                                      bTransitionningAttachPoint : 1;                           // 0x0248(0x0004) (Transient)
	class UStaticMeshComponent*                        ArrowMesh;                                                // 0x024C(0x0008) (Edit, ExportObject, Component, EditInline)
	class UPointLightComponent*                        FirePointLight;                                           // 0x0254(0x0008) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    FireEmitter1;                                             // 0x025C(0x0008) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    FireEmitter2;                                             // 0x0264(0x0008) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    BreakingPS;                                               // 0x026C(0x0008) (Edit, ExportObject, Component, EditInline)
	class UVolumetricFogLightComponent*                FogLight;                                                 // 0x0274(0x0008) (Edit, ExportObject, Component, EditInline)
	TEnumAsByte<EArrowState>                           ArrowState;                                               // 0x027C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x027D(0x0003) MISSED OFFSET
	float                                              LaunchTime;                                               // 0x0280(0x0004)
	float                                              StoppedTime;                                              // 0x0284(0x0004)
	float                                              DelayedDeleteTime;                                        // 0x0288(0x0004) (Transient)
	struct FArrowSettings                              Settings;                                                 // 0x028C(0x0064)
	struct FArrowPreciseTravelData                     PreciseTravel;                                            // 0x02F0(0x0034)
	struct FArrowShakeData                             Shake;                                                    // 0x0324(0x0014)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0338(0x0008) MISSED OFFSET
	struct FArrowLandingData                           Landing;                                                  // 0x0340(0x0040)
	struct FArrowWobbleData                            Wobble;                                                   // 0x0380(0x0014)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0394(0x000C) MISSED OFFSET
	struct FArrowStuckDoorData                         StuckDoor;                                                // 0x03A0(0x0060)
	class AOLBot*                                      OwnerBot;                                                 // 0x0400(0x0008) (Transient)
	float                                              FireDeactivationTime;                                     // 0x0408(0x0004) (Transient)
	float                                              TransitionStartTime;                                      // 0x040C(0x0004) (Transient)
	struct FVector                                     TransitionStartLoc;                                       // 0x0410(0x000C) (Transient)
	struct FVector                                     TransitionStartDir;                                       // 0x041C(0x000C) (Transient)
	class AOLPawn*                                     StruckPawn;                                               // 0x0428(0x0008) (Transient)
	struct FVector                                     LastWaterCheckPosition;                                   // 0x0430(0x000C) (Transient)
	class ALandscapeProxy*                             ActiveWaterLandscape;                                     // 0x043C(0x0008) (Transient)
	class ULandscapeHeightfieldCollisionComponent*     LastWaterLandscapeCollidingComponent;                     // 0x0444(0x0008) (ExportObject, Transient, Component, EditInline)
	class UAkEvent*                                    FlyByEvent;                                               // 0x044C(0x0008) (Const)
	class UAkEvent*                                    ImpactEvent;                                              // 0x0454(0x0008) (Const)
	struct FString                                     ArrowSwitchGroup;                                         // 0x045C(0x0010) (Const, NeedCtorLink)
	struct FString                                     SwitchPlayerHit;                                          // 0x046C(0x0010) (Const, NeedCtorLink)
	struct FString                                     SwitchWindowHit;                                          // 0x047C(0x0010) (Const, NeedCtorLink)
	struct FString                                     SwitchOtherHit;                                           // 0x048C(0x0010) (Const, NeedCtorLink)
	struct FName                                       HeroThroatSocketName;                                     // 0x049C(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLArrow");
		return ptr;
	}

};


// Class OLGame.OLBasementWindow
// 0x0044 (0x028C - 0x0248)
class AOLBasementWindow : public AActor
{
public:
	unsigned long                                      bDisabled : 1;                                            // 0x0248(0x0004) (Edit)
	unsigned long                                      bHalfBasement : 1;                                        // 0x0248(0x0004) (Edit)
	unsigned long                                      bInitiallyDisabled : 1;                                   // 0x0248(0x0004) (Transient)
	unsigned long                                      bHeroInteracting : 1;                                     // 0x0248(0x0004) (Transient)
	float                                              ExplicitOcclusionFactor;                                  // 0x024C(0x0004) (Edit)
	float                                              DefaultOcclusionFactor;                                   // 0x0250(0x0004) (Edit, EditConst)
	TArray<class UMaterialInstance*>                   MaterialOverrides;                                        // 0x0254(0x0010) (Edit, NeedCtorLink)
	float                                              WindowHeight;                                             // 0x0264(0x0004) (Edit, EditConst)
	float                                              WindowWidth;                                              // 0x0268(0x0004) (Edit, EditConst)
	class UStaticMeshComponent*                        FrameMesh;                                                // 0x026C(0x0008) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        WindowMesh;                                               // 0x0274(0x0008) (Edit, ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           WindowLightEnvironment;                                   // 0x027C(0x0008) (Edit, ExportObject, Component, EditInline)
	class UOLSoundConnectorComponent*                  SoundConnectorComp;                                       // 0x0284(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBasementWindow");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class OLGame.OLHeroCamera
// 0x0378 (0x03E0 - 0x0068)
class UOLHeroCamera : public UObject
{
public:
	class AOLHero*                                     Hero;                                                     // 0x0068(0x0008)
	struct FCamView                                    ViewWS;                                                   // 0x0070(0x0018)
	struct FCamView                                    ViewCS;                                                   // 0x0088(0x0018)
	struct FViewLimits                                 Limits;                                                   // 0x00A0(0x0010)
	struct FViewLimits                                 SoftLimits;                                               // 0x00B0(0x0010)
	float                                              SoftZonePitch;                                            // 0x00C0(0x0004)
	float                                              SoftZoneYaw;                                              // 0x00C4(0x0004)
	struct FRotator                                    BaseRotation;                                             // 0x00C8(0x000C)
	struct FVector                                     BaseLocation;                                             // 0x00D4(0x000C)
	struct FSmoothingData                              BaseViewSmoothing;                                        // 0x00E0(0x0024)
	float                                              InputYaw;                                                 // 0x0104(0x0004)
	float                                              InputPitch;                                               // 0x0108(0x0004)
	float                                              NeckOffsetFwd;                                            // 0x010C(0x0004)
	float                                              NeckOffsetSide;                                           // 0x0110(0x0004)
	float                                              NeckOffsetBaseYaw;                                        // 0x0114(0x0004)
	float                                              PositionOffset;                                           // 0x0118(0x0004)
	struct FVector                                     PositionOffsetDir;                                        // 0x011C(0x000C)
	float                                              LookBackRatio;                                            // 0x0128(0x0004)
	float                                              LeanPushingRatio;                                         // 0x012C(0x0004)
	unsigned long                                      bActiveLookAt : 1;                                        // 0x0130(0x0004)
	unsigned long                                      bHardLookAt : 1;                                          // 0x0130(0x0004)
	unsigned long                                      bUserControlsPawnRotation : 1;                            // 0x0130(0x0004)
	unsigned long                                      bLocalSpacePlayerControl : 1;                             // 0x0130(0x0004)
	unsigned long                                      bFullCameraPassthrough : 1;                               // 0x0130(0x0004)
	unsigned long                                      bBugFixCheck : 1;                                         // 0x0130(0x0004) (Transient)
	unsigned long                                      bHasLockedWSYaw : 1;                                      // 0x0130(0x0004) (Transient)
	float                                              LookAtAlpha;                                              // 0x0134(0x0004)
	struct FViewLimits                                 LookAtStartViewLimits;                                    // 0x0138(0x0010)
	float                                              PendingYawCorrection;                                     // 0x0148(0x0004)
	float                                              SpringLastValidInput;                                     // 0x014C(0x0004)
	float                                              RotationRoll;                                             // 0x0150(0x0004)
	float                                              ProceduralRollEnabledness;                                // 0x0154(0x0004)
	float                                              LastForceFeedbackIntensity;                               // 0x0158(0x0004)
	float                                              StabilizationRatio;                                       // 0x015C(0x0004)
	float                                              PitchStabilizationRatio;                                  // 0x0160(0x0004)
	struct FTargettedSmoothingData                     TargettedYawSmoothing;                                    // 0x0164(0x0014)
	struct FTargettedSmoothingData                     TargettedPitchSmoothing;                                  // 0x0178(0x0014)
	struct FCameraShakeData                            DefaultShakeData;                                         // 0x018C(0x0098)
	struct FCameraShakeList                            ShakeDataList[0x4];                                       // 0x0224(0x0010) (Transient, NeedCtorLink)
	struct FCameraShakeData                            SmallLandingShakeData;                                    // 0x0264(0x0098) (Const)
	struct FCameraShakeData                            MinorStepShakeData;                                       // 0x02FC(0x0098) (Const)
	class UForceFeedbackWaveform*                      CamShakeFFWaveform;                                       // 0x0394(0x0008)
	float                                              ProceduralAdditivePitch;                                  // 0x039C(0x0004)
	float                                              CameraSpringStiffness;                                    // 0x03A0(0x0004) (Config)
	struct FName                                       CameraBoneName;                                           // 0x03A4(0x0008) (Config)
	float                                              ViewLimitsSoftZone;                                       // 0x03AC(0x0004) (Config)
	float                                              DefaultCameraSpringStiffness;                             // 0x03B0(0x0004) (Config)
	float                                              GamepadLookDeadZone;                                      // 0x03B4(0x0004) (Config)
	float                                              GamepadSpringDelay;                                       // 0x03B8(0x0004) (Config)
	float                                              MaxStabilizationRatio;                                    // 0x03BC(0x0004) (Config)
	float                                              YawInputTimeStamp;                                        // 0x03C0(0x0004) (Transient)
	float                                              PitchInputTimeStamp;                                      // 0x03C4(0x0004) (Transient)
	float                                              MinWSAdditivePitch;                                       // 0x03C8(0x0004) (Transient)
	float                                              MaxWSAdditivePitch;                                       // 0x03CC(0x0004) (Transient)
	float                                              LockedWSYaw;                                              // 0x03D0(0x0004) (Transient)
	float                                              SmoothAnimatedLookbackForwardOffset;                      // 0x03D4(0x0004) (Transient)
	float                                              SmoothAnimatedLookbackSideOffset;                         // 0x03D8(0x0004) (Transient)
	float                                              SmoothAnimatedLookbackUpwardOffset;                       // 0x03DC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLHeroCamera");
		return ptr;
	}

};


// Class OLGame.OLBashableObject
// 0x00FC (0x0344 - 0x0248)
class AOLBashableObject : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;                   // 0x0248(0x0008) (Const, Native, NoExport)
	unsigned long                                      bEnabled : 1;                                             // 0x0250(0x0004) (Edit)
	unsigned long                                      bCanBreakForward : 1;                                     // 0x0250(0x0004) (Edit)
	unsigned long                                      bCanBreakBackward : 1;                                    // 0x0250(0x0004) (Edit)
	unsigned long                                      bCameraShakeOnBreak : 1;                                  // 0x0250(0x0004) (Edit)
	unsigned long                                      bBreaking : 1;                                            // 0x0250(0x0004) (Transient)
	unsigned long                                      bBroken : 1;                                              // 0x0250(0x0004) (Transient)
	unsigned long                                      bBrokenFwd : 1;                                           // 0x0250(0x0004) (Transient)
	unsigned long                                      bObstacleRegistered : 1;                                  // 0x0250(0x0004) (Transient)
	unsigned long                                      bInitiallyEnabled : 1;                                    // 0x0250(0x0004) (Transient)
	TArray<struct FBashableTriggerData>                TriggersForward;                                          // 0x0254(0x0010) (Edit, NeedCtorLink)
	TArray<struct FBashableTriggerData>                TriggersBackward;                                         // 0x0264(0x0010) (Edit, NeedCtorLink)
	float                                              PlayerTriggerDistFwd;                                     // 0x0274(0x0004) (Edit)
	float                                              PlayerTriggerDistSide;                                    // 0x0278(0x0004) (Edit)
	float                                              BreakDurationFwd;                                         // 0x027C(0x0004) (Edit)
	float                                              BreakDurationBwd;                                         // 0x0280(0x0004) (Edit)
	float                                              SpawnPointOffset;                                         // 0x0284(0x0004) (Edit)
	class UAkEvent*                                    BreakingSoundEvent;                                       // 0x0288(0x0008) (Edit)
	struct FCameraShakeData                            CamShakeParams;                                           // 0x0290(0x0098) (Edit)
	class UStaticMeshComponent*                        Mesh;                                                     // 0x0328(0x0008) (Edit, ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x0330(0x0008) (Edit, ExportObject, Component, EditInline)
	float                                              NavmeshObstacleWidth;                                     // 0x0338(0x0004) (Edit)
	float                                              NavmeshObstacleDepth;                                     // 0x033C(0x0004) (Edit)
	float                                              BreakStartedTime;                                         // 0x0340(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBashableObject");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class OLGame.OLBlockingObject
// 0x0014 (0x025C - 0x0248)
class AOLBlockingObject : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;                   // 0x0248(0x0008) (Const, Native, NoExport)
	unsigned long                                      bEnabled : 1;                                             // 0x0250(0x0004) (Edit)
	unsigned long                                      bInitiallyEnabled : 1;                                    // 0x0250(0x0004) (Transient)
	class UStaticMeshComponent*                        Mesh;                                                     // 0x0254(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBlockingObject");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void OnDisable();
	void OnEnable();
};


// Class OLGame.OLBotCondition
// 0x0004 (0x006C - 0x0068)
class UOLBotCondition : public UObject
{
public:
	unsigned long                                      bInversed : 1;                                            // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_AllOfSubConditions
// 0x0010 (0x007C - 0x006C)
class UOLBotCondition_AllOfSubConditions : public UOLBotCondition
{
public:
	TArray<class UOLBotCondition*>                     SubConditions;                                            // 0x006C(0x0010) (Edit, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_AllOfSubConditions");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_AnyOfSubConditions
// 0x0010 (0x007C - 0x006C)
class UOLBotCondition_AnyOfSubConditions : public UOLBotCondition
{
public:
	TArray<class UOLBotCondition*>                     SubConditions;                                            // 0x006C(0x0010) (Edit, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_AnyOfSubConditions");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_CloseToAnotherBot
// 0x0008 (0x0074 - 0x006C)
class UOLBotCondition_CloseToAnotherBot : public UOLBotCondition
{
public:
	float                                              MaxHorzDistance;                                          // 0x006C(0x0004) (Edit)
	float                                              MaxVertDistance;                                          // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_CloseToAnotherBot");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_CloseToPlayer
// 0x0008 (0x0074 - 0x006C)
class UOLBotCondition_CloseToPlayer : public UOLBotCondition
{
public:
	float                                              MaxHorzDistance;                                          // 0x006C(0x0004) (Edit)
	float                                              MaxVertDistance;                                          // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_CloseToPlayer");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_CloseToPoint
// 0x0010 (0x007C - 0x006C)
class UOLBotCondition_CloseToPoint : public UOLBotCondition
{
public:
	class AActor*                                      TestActor;                                                // 0x006C(0x0008) (Edit)
	float                                              MaxHorzDistance;                                          // 0x0074(0x0004) (Edit)
	float                                              MaxVertDistance;                                          // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_CloseToPoint");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_Difficulty
// 0x0002 (0x006E - 0x006C)
class UOLBotCondition_Difficulty : public UOLBotCondition
{
public:
	TEnumAsByte<EBotDifficultyCondition>               ConditionType;                                            // 0x006C(0x0001) (Edit)
	TEnumAsByte<EDifficultyMode>                       Difficulty;                                               // 0x006D(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_Difficulty");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_FacingPlayer
// 0x0004 (0x0070 - 0x006C)
class UOLBotCondition_FacingPlayer : public UOLBotCondition
{
public:
	float                                              MaxAngle;                                                 // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_FacingPlayer");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_FacingPoint
// 0x000C (0x0078 - 0x006C)
class UOLBotCondition_FacingPoint : public UOLBotCondition
{
public:
	class AActor*                                      TestActor;                                                // 0x006C(0x0008) (Edit)
	float                                              MaxAngle;                                                 // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_FacingPoint");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_FasterThan
// 0x0004 (0x0070 - 0x006C)
class UOLBotCondition_FasterThan : public UOLBotCondition
{
public:
	float                                              Speed;                                                    // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_FasterThan");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_GameFlow
// 0x0014 (0x0080 - 0x006C)
class UOLBotCondition_GameFlow : public UOLBotCondition
{
public:
	TEnumAsByte<EGameFlowCondition>                    Condition;                                                // 0x006C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	struct FName                                       ControlName;                                              // 0x0070(0x0008) (Edit)
	struct FName                                       RangeEndCheckpoint;                                       // 0x0078(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_GameFlow");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_HasAttackedPlayer
// 0x0004 (0x0070 - 0x006C)
class UOLBotCondition_HasAttackedPlayer : public UOLBotCondition
{
public:
	float                                              TimeWindow;                                               // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_HasAttackedPlayer");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_HasBeenDisturbed
// 0x0004 (0x0070 - 0x006C)
class UOLBotCondition_HasBeenDisturbed : public UOLBotCondition
{
public:
	float                                              TimeWindow;                                               // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_HasBeenDisturbed");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_HasLostSightAfterChase
// 0x0000 (0x006C - 0x006C)
class UOLBotCondition_HasLostSightAfterChase : public UOLBotCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_HasLostSightAfterChase");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_HasSeenPlayer
// 0x0004 (0x0070 - 0x006C)
class UOLBotCondition_HasSeenPlayer : public UOLBotCondition
{
public:
	float                                              TimeWindow;                                               // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_HasSeenPlayer");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_HasStoppedChasing
// 0x0000 (0x006C - 0x006C)
class UOLBotCondition_HasStoppedChasing : public UOLBotCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_HasStoppedChasing");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_InvestigationCount
// 0x0004 (0x0070 - 0x006C)
class UOLBotCondition_InvestigationCount : public UOLBotCondition
{
public:
	int                                                Count;                                                    // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_InvestigationCount");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_InVolume
// 0x0008 (0x0074 - 0x006C)
class UOLBotCondition_InVolume : public UOLBotCondition
{
public:
	class AVolume*                                     TestVolume;                                               // 0x006C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_InVolume");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_IsAtSpawnLocation
// 0x0004 (0x0070 - 0x006C)
class UOLBotCondition_IsAtSpawnLocation : public UOLBotCondition
{
public:
	float                                              MaxDistance;                                              // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_IsAtSpawnLocation");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_IsChasing
// 0x0000 (0x006C - 0x006C)
class UOLBotCondition_IsChasing : public UOLBotCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_IsChasing");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_IsInvestigating
// 0x0000 (0x006C - 0x006C)
class UOLBotCondition_IsInvestigating : public UOLBotCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_IsInvestigating");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_IsPatrolling
// 0x0000 (0x006C - 0x006C)
class UOLBotCondition_IsPatrolling : public UOLBotCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_IsPatrolling");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_IsVisibleByPlayer
// 0x0000 (0x006C - 0x006C)
class UOLBotCondition_IsVisibleByPlayer : public UOLBotCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_IsVisibleByPlayer");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_PlayerCloseToPoint
// 0x0010 (0x007C - 0x006C)
class UOLBotCondition_PlayerCloseToPoint : public UOLBotCondition
{
public:
	class AActor*                                      TestActor;                                                // 0x006C(0x0008) (Edit)
	float                                              MaxHorzDistance;                                          // 0x0074(0x0004) (Edit)
	float                                              MaxVertDistance;                                          // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_PlayerCloseToPoint");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_PlayerFasterThan
// 0x0004 (0x0070 - 0x006C)
class UOLBotCondition_PlayerFasterThan : public UOLBotCondition
{
public:
	float                                              Speed;                                                    // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_PlayerFasterThan");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_PlayerInNightVision
// 0x0000 (0x006C - 0x006C)
class UOLBotCondition_PlayerInNightVision : public UOLBotCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_PlayerInNightVision");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_PlayerInSight
// 0x0000 (0x006C - 0x006C)
class UOLBotCondition_PlayerInSight : public UOLBotCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_PlayerInSight");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_PlayerInVolume
// 0x0008 (0x0074 - 0x006C)
class UOLBotCondition_PlayerInVolume : public UOLBotCondition
{
public:
	class AVolume*                                     TestVolume;                                               // 0x006C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_PlayerInVolume");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_PlayerIsCrawling
// 0x0000 (0x006C - 0x006C)
class UOLBotCondition_PlayerIsCrawling : public UOLBotCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_PlayerIsCrawling");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_PlayerIsCrouched
// 0x0000 (0x006C - 0x006C)
class UOLBotCondition_PlayerIsCrouched : public UOLBotCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_PlayerIsCrouched");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_PlayerIsFacing
// 0x0004 (0x0070 - 0x006C)
class UOLBotCondition_PlayerIsFacing : public UOLBotCondition
{
public:
	float                                              MaxAngle;                                                 // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_PlayerIsFacing");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_PlayerIsHiding
// 0x000C (0x0078 - 0x006C)
class UOLBotCondition_PlayerIsHiding : public UOLBotCondition
{
public:
	class AActor*                                      HidingLocation;                                           // 0x006C(0x0008) (Edit)
	float                                              MinimumDuration;                                          // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_PlayerIsHiding");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_PlayerIsHurt
// 0x0004 (0x0070 - 0x006C)
class UOLBotCondition_PlayerIsHurt : public UOLBotCondition
{
public:
	float                                              MaxHealth;                                                // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_PlayerIsHurt");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_PlayerIsPushing
// 0x0000 (0x006C - 0x006C)
class UOLBotCondition_PlayerIsPushing : public UOLBotCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_PlayerIsPushing");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_PlayerIsStanding
// 0x0000 (0x006C - 0x006C)
class UOLBotCondition_PlayerIsStanding : public UOLBotCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_PlayerIsStanding");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_PlayerLitByFlashlight
// 0x0000 (0x006C - 0x006C)
class UOLBotCondition_PlayerLitByFlashlight : public UOLBotCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_PlayerLitByFlashlight");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_PlayerUsingCamcorder
// 0x0000 (0x006C - 0x006C)
class UOLBotCondition_PlayerUsingCamcorder : public UOLBotCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_PlayerUsingCamcorder");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_PlayerWasChased
// 0x0004 (0x0070 - 0x006C)
class UOLBotCondition_PlayerWasChased : public UOLBotCondition
{
public:
	float                                              MaxTimeAgo;                                               // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_PlayerWasChased");
		return ptr;
	}

};


// Class OLGame.OLBotCondition_WasSeenByPlayer
// 0x0004 (0x0070 - 0x006C)
class UOLBotCondition_WasSeenByPlayer : public UOLBotCondition
{
public:
	float                                              TimeWindow;                                               // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBotCondition_WasSeenByPlayer");
		return ptr;
	}

};


// Class OLGame.OLBugTracker
// 0x0030 (0x0098 - 0x0068)
class UOLBugTracker : public UObject
{
public:
	struct FString                                     BugTrackerProject;                                        // 0x0068(0x0010) (Config, NeedCtorLink)
	TArray<struct FOLBugTrackerBinding>                BugTrackerBindings;                                       // 0x0078(0x0010) (Config, NeedCtorLink)
	struct FString                                     DefaultBugTrackerName;                                    // 0x0088(0x0010) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBugTracker");
		return ptr;
	}

};


// Class OLGame.OLCamcorderFilesHud
// 0x0144 (0x0330 - 0x01EC)
class UOLCamcorderFilesHud : public UGFxMoviePlayer
{
public:
	class AOLHUD*                                      HUD;                                                      // 0x01EC(0x0008)
	unsigned long                                      bVisible : 1;                                             // 0x01F4(0x0004)
	unsigned long                                      bDynamicalyLoadedVOBankLoaded : 1;                        // 0x01F4(0x0004) (Transient)
	unsigned long                                      bWaitingForDynamicallyLoadedVOBank : 1;                   // 0x01F4(0x0004) (Transient)
	unsigned long                                      bShowFoundOnly : 1;                                       // 0x01F4(0x0004) (Config)
	unsigned long                                      HiRezCamcorderPhotoTexturesIndexChanged : 1;              // 0x01F4(0x0004) (Transient)
	unsigned long                                      bVideoEnded : 1;                                          // 0x01F4(0x0004) (Transient)
	unsigned long                                      bIgnoreLoadingTexture : 1;                                // 0x01F4(0x0004)
	class UGFxObject*                                  FolderList;                                               // 0x01F8(0x0008) (Transient)
	TArray<class UGFxObject*>                          FolderSubList;                                            // 0x0200(0x0010) (Transient, NeedCtorLink)
	TArray<struct FString>                             TypeNameList;                                             // 0x0210(0x0010) (Const, NeedCtorLink)
	TArray<struct FString>                             DisplayGroundNameList;                                    // 0x0220(0x0010) (Const, NeedCtorLink)
	TEnumAsByte<ESortingCategoryType>                  SortingType;                                              // 0x0230(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0231(0x0003) MISSED OFFSET
	class UAkEvent*                                    PauseVOSndEvent;                                          // 0x0234(0x0008)
	class UAkEvent*                                    ResumeVOSndEvent;                                         // 0x023C(0x0008)
	class UAkEvent*                                    MoveCursorSndEvent;                                       // 0x0244(0x0008)
	class UAkEvent*                                    SelectSndEvent;                                           // 0x024C(0x0008)
	class UAkEvent*                                    BackSndEvent;                                             // 0x0254(0x0008)
	class UAkEvent*                                    DynamicalyLoadedVO;                                       // 0x025C(0x0008) (Transient)
	class UAkEvent*                                    CustomVideoEventStart;                                    // 0x0264(0x0008) (Transient)
	class UAkEvent*                                    CustomVideoEventStop;                                     // 0x026C(0x0008) (Transient)
	TArray<struct FCamcorderRecord>                    CamcorderRecords;                                         // 0x0274(0x0010) (Config, NeedCtorLink)
	int                                                SplitCamcorderRecordIndex;                                // 0x0284(0x0004) (Config)
	TArray<struct FCachedNamedTexture>                 HiRezCamcorderPhotoTextures;                              // 0x0288(0x0010) (Transient, NeedCtorLink)
	struct FName                                       HiRezCamcorderPhotoName;                                  // 0x0298(0x0008) (Transient)
	int                                                HiRezCamcorderPhotoTexturesIndex;                         // 0x02A0(0x0004) (Transient)
	float                                              HiRezCamcorderPhotoTextureScale;                          // 0x02A4(0x0004) (Transient)
	struct FVector2D                                   HiRezCamcorderPhotoTextureTranslation;                    // 0x02A8(0x0008) (Transient)
	struct FVector2D                                   HiRezCamcorderPhotoTextureTranslationSmoothInput;         // 0x02B0(0x0008) (Transient)
	TArray<struct FCachedNamedTexture>                 ThumbnailCamcorderPhotoTextures;                          // 0x02B8(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<struct FCachedThumbnailData>                LatestThumbnailCamcorderPhotoTextures;                    // 0x02C8(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	struct FCachedThumbnailData                        LatestFullSizedPhotoTexture;                              // 0x02D8(0x0020) (Transient, NeedCtorLink)
	TArray<class UTexture2D*>                          FolderThumbnailCamcorderPhotoTextures;                    // 0x02F8(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<class UTexture2D*>                          TypeThumbnailCamcorderPhotoTextures;                      // 0x0308(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	int                                                ThumbnailCamcorderPhotoTexturesListIndex;                 // 0x0318(0x0004) (Transient)
	int                                                ThumbnailCamcorderPhotoTexturesStartIndex;                // 0x031C(0x0004) (Transient)
	int                                                RecordingVOPlayingId;                                     // 0x0320(0x0004) (Transient)
	float                                              MaxZoomFactor;                                            // 0x0324(0x0004) (Const)
	float                                              DelayBeforeVO;                                            // 0x0328(0x0004) (Transient)
	float                                              LastHUDSoundTimestamp;                                    // 0x032C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLCamcorderFilesHud");
		return ptr;
	}


	void SetPCInputLabel(const struct FString& navigationLabelUp, const struct FString& navigationLabelLeft, const struct FString& navigationLabelDown, const struct FString& navigationLabelRight, const struct FString& nextLabel, const struct FString& previousLabel, const struct FString& backLabel, const struct FString& displayLabel, const struct FString& playLabel, const struct FString& selectLabelText);
	void SetPCInputLabelFunction(const struct FString& navigationLabelUp, const struct FString& navigationLabelLeft, const struct FString& navigationLabelDown, const struct FString& navigationLabelRight, const struct FString& nextLabel, const struct FString& previousLabel, const struct FString& backLabel, const struct FString& displayLabel, const struct FString& playLabel, const struct FString& selectLabelText);
	void selectConsole(const struct FString& Console);
	void UsingPC();
	void UsingXboxOne();
	void UsingPS4();
	void SetSouthPaw(bool bSouthPaw);
	void SetLocalizedText(const struct FString& zoomLabel, const struct FString& navigationLabel, const struct FString& cleanTextLabel, const struct FString& selectLabel, const struct FString& backLabel, const struct FString& previousLabel, const struct FString& nextLabel, const struct FString& playLabel, const struct FString& pauseLabel, const struct FString& moveImage);
	void PopulateFolderList(bool bRefreshOnly);
	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	void HideImageNavigateLabel();
	void ShowImageNavigateLabel();
	void Pause();
	void TogglePlayPause();
	void InputTypeChanged();
	void NativeInputTypeChanged();
	void NativePlaySound(class UAkEvent* SndEvent);
	void OnStop();
	void NativeOnStop();
	void NativeFullStop();
	void OnPlay();
	void NativeOnPlay();
	void OnDisplayChange();
	void NativeOnDisplayChange();
	void OnMove();
	void OnSelect();
	void OnBack();
	void OnBackOnRootMenu();
	void NativeOnBackOnRootMenu();
	void OnScrollToIndexChange(int ListIndex, int StartIndex, int endIndex);
	void NativeOnScrollToIndexChange(int ListIndex, int StartIndex, int endIndex, bool bForce);
	void OnFullScaleImageChanged(bool bInView, const struct FString& photoName);
	void NativeOnFullScaleImageChanged(bool bInView, const struct FString& photoName);
	void NativeQuickOpen();
	void SetLargePhotoURL(int folderIndex, int imageIndex, const struct FString& largePhotoURL);
	void SelectRecording(int folderIndex, int imageIndex);
	bool SetAllowSingleFolder(bool bAllowSingleFolder);
	bool SetDisplayLabel(const struct FString& Label);
	void SetVisible(bool bShow);
	void FlagRecordingAsRead(int folderIndex, int recordingIndex);
	void DisplayChange();
	void RefreshData();
	bool SetListFocusIndex(int indexA, int indexB, int indexC, int indexD, int indexE, int indexF);
	bool SetLargeImageSize(float SizeX, float SizeY, float PosX, float PosY);
	void DisallowInputChangeFocus();
	void AllowInputChangeFocus();
	bool PauseVideo();
	bool ConfigUI();
	bool back();
	bool BackToMainMenu();
	bool Next();
	bool Previous();
	bool RefreshLargeImage();
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
};


// Class OLGame.OLCamcorderHud
// 0x00AC (0x0298 - 0x01EC)
class UOLCamcorderHud : public UGFxMoviePlayer
{
public:
	class AOLHUD*                                      HUD;                                                      // 0x01EC(0x0008)
	unsigned long                                      bVisible : 1;                                             // 0x01F4(0x0004)
	unsigned long                                      bPaused : 1;                                              // 0x01F4(0x0004)
	struct FCamcorderHudObjects                        Objects;                                                  // 0x01F8(0x0070) (Transient)
	struct FCamcorderHudState                          HudState;                                                 // 0x0268(0x0030) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLCamcorderHud");
		return ptr;
	}


	void UpdateRecordingTime(float DeltaTime);
	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	void HandleUnpaused();
	void HandlePaused();
	void SetVisible(bool bShow);
};


// Class OLGame.OLCameraActor
// 0x0000 (0x04AC - 0x04AC)
class AOLCameraActor : public ACameraActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLCameraActor");
		return ptr;
	}


	void GetCameraView(float DeltaTime, struct FTPOV* OutPOV);
	void NativeGetCameraView(struct FTPOV* OutPOV);
};


// Class OLGame.OLCharacterProxy
// 0x0043 (0x00D0 - 0x008D)
class UOLCharacterProxy : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	struct FPointer                                    ControllerProxy;                                          // 0x0090(0x0008) (Const, Native)
	int                                                CollisionGroups;                                          // 0x0098(0x0004) (Const)
	float                                              Radius;                                                   // 0x009C(0x0004)
	float                                              HalfHeight;                                               // 0x00A0(0x0004)
	float                                              SlopedPushDistance;                                       // 0x00A4(0x0004)
	class AOLPawn*                                     Pawn;                                                     // 0x00A8(0x0008)
	float                                              MeshXOffset;                                              // 0x00B0(0x0004) (Transient)
	float                                              AccelerationWithNoMovementTime;                           // 0x00B4(0x0004) (Transient)
	float                                              SimplifiedStuckTime;                                      // 0x00B8(0x0004) (Transient)
	struct FVector                                     LastMoveVelocity;                                         // 0x00BC(0x000C) (Transient)
	unsigned long                                      StuckLastFrame : 1;                                       // 0x00C8(0x0004) (Transient)
	unsigned long                                      MovedLastFrame : 1;                                       // 0x00C8(0x0004) (Transient)
	unsigned long                                      bStuckOptimOn : 1;                                        // 0x00C8(0x0004) (Transient)
	float                                              StuckOptimRetryTimeAcc;                                   // 0x00CC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLCharacterProxy");
		return ptr;
	}

};


// Class OLGame.OLTutorialManager
// 0x0234 (0x029C - 0x0068)
class UOLTutorialManager : public UObject
{
public:
	unsigned long                                      bTutorialsEnabled : 1;                                    // 0x0068(0x0004) (Config)
	unsigned long                                      bActiveTutorial : 1;                                      // 0x0068(0x0004)
	unsigned long                                      bActiveTutorialCanBePaused : 1;                           // 0x0068(0x0004)
	unsigned long                                      bLongerTutorial : 1;                                      // 0x0068(0x0004)
	unsigned long                                      bQuickTutorialIfInteraction : 1;                          // 0x0068(0x0004)
	unsigned long                                      bPaused : 1;                                              // 0x0068(0x0004) (Transient)
	int                                                CurrentID;                                                // 0x006C(0x0004)
	struct FString                                     TutorialText;                                             // 0x0070(0x0010) (NeedCtorLink)
	TEnumAsByte<EHUDMessagePriority>                   TutorialPriority;                                         // 0x0080(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	TArray<struct FString>                             CompletedTutorials;                                       // 0x0084(0x0010) (NeedCtorLink)
	float                                              ActiveTutorialDelay;                                      // 0x0094(0x0004)
	float                                              TutorialItemTimestamp;                                    // 0x0098(0x0004)
	float                                              LookBackTutorialReminderTimeLeft;                         // 0x009C(0x0004)
	float                                              LastLookBackTutorialReminderPushedTimestamp;              // 0x00A0(0x0004)
	float                                              LookBackTutorialIntervalTime;                             // 0x00A4(0x0004) (Config)
	float                                              PeekTutorialReminderTimeLeft;                             // 0x00A8(0x0004)
	float                                              LastPeekTutorialReminderPeekPushedTimestamp;              // 0x00AC(0x0004)
	float                                              PeekTutorialIntervalTime;                                 // 0x00B0(0x0004) (Config)
	float                                              MicrophoneTutorialReminderTimeLeft;                       // 0x00B4(0x0004)
	float                                              LastMicrophoneTutorialReminderPeekPushedTimestamp;        // 0x00B8(0x0004)
	float                                              MicrophoneTutorialIntervalTime;                           // 0x00BC(0x0004) (Config)
	struct FContextualTutorialsData                    CompletedContextualTutorials;                             // 0x00C0(0x0004)
	int                                                ClimbUpTutorialItemIdx;                                   // 0x00C4(0x0004)
	float                                              DefaultTutorialDuration;                                  // 0x00C8(0x0004) (Const)
	float                                              LongTutorialDuration;                                     // 0x00CC(0x0004) (Const)
	float                                              PausedTimeStamp;                                          // 0x00D0(0x0004) (Transient)
	struct FName                                       BatteriesTutorialTextId;                                  // 0x00D4(0x0008) (Const)
	struct FName                                       ClimbUpTutorialTextId_Keyboard;                           // 0x00DC(0x0008) (Const)
	struct FName                                       ClimbUpTutorialTextId_Gamepad;                            // 0x00E4(0x0008) (Const)
	struct FName                                       DocumentTutorialTextId;                                   // 0x00EC(0x0008) (Const)
	struct FName                                       SpikyPlantTutorialTextId;                                 // 0x00F4(0x0008) (Const)
	struct FName                                       StaminaDepletionTutorialTextId;                           // 0x00FC(0x0008) (Const)
	struct FName                                       StaminaDepletedTutorialTextId;                            // 0x0104(0x0008) (Const)
	struct FName                                       StaminaSwimmingDepletionTutorialTextId;                   // 0x010C(0x0008) (Const)
	struct FName                                       HidingInFoliageStandTutorialTextId;                       // 0x0114(0x0008) (Const)
	struct FName                                       HidingInFoliageCrouchTutorialTextId;                      // 0x011C(0x0008) (Const)
	struct FName                                       HidingInFoliageCrouchToggleTutorialTextId;                // 0x0124(0x0008) (Const)
	struct FName                                       HidingInFoliageCrawlTutorialTextId;                       // 0x012C(0x0008) (Const)
	struct FName                                       HidingInFoliageCrawlGamepadTutorialTextId;                // 0x0134(0x0008) (Const)
	struct FName                                       PeekingFromBarrelKeyboardTutorialTextId;                  // 0x013C(0x0008) (Const)
	struct FName                                       PeekingFromBarrelGamepadTutorialTextId;                   // 0x0144(0x0008) (Const)
	struct FName                                       PeekingFromDoorKeyboardTutorialTextId;                    // 0x014C(0x0008) (Const)
	struct FName                                       PeekingFromDoorGamepadTutorialTextId;                     // 0x0154(0x0008) (Const)
	struct FName                                       PeekingFromWardrobeKeyboardTutorialTextId;                // 0x015C(0x0008) (Const)
	struct FName                                       PeekingFromWardrobeGamepadTutorialTextId;                 // 0x0164(0x0008) (Const)
	struct FName                                       PeekingFromLedgeHangKeyboardTutorialTextId;               // 0x016C(0x0008) (Const)
	struct FName                                       PeekingFromLedgeHangGamepadTutorialTextId;                // 0x0174(0x0008) (Const)
	struct FName                                       PeekingFromUnderwaterKeyboardTutorialTextId;              // 0x017C(0x0008) (Const)
	struct FName                                       PeekingFromUnderwaterGamepadTutorialTextId;               // 0x0184(0x0008) (Const)
	struct FName                                       BandagePickedUpTutorialTextId;                            // 0x018C(0x0008) (Const)
	struct FName                                       BatteryPickedUpTutorialTextId;                            // 0x0194(0x0008) (Const)
	struct FName                                       RecordingGatheredTutorialTextId;                          // 0x019C(0x0008) (Const)
	struct FName                                       DocumentGatheredTutorialTextId;                           // 0x01A4(0x0008) (Const)
	struct FName                                       BandagePocketTutorialTextId;                              // 0x01AC(0x0008) (Const)
	struct FName                                       BatteryPocketTutorialTextId;                              // 0x01B4(0x0008) (Const)
	struct FName                                       RecordingShownTutorialTextId;                             // 0x01BC(0x0008) (Const)
	struct FName                                       ReminderMicrophoneTutorialTextId;                         // 0x01C4(0x0008) (Const)
	struct FName                                       Microphone1TutorialTextId;                                // 0x01CC(0x0008) (Const)
	struct FName                                       Microphone2TutorialTextId;                                // 0x01D4(0x0008) (Const)
	struct FName                                       Microphone3TutorialTextId;                                // 0x01DC(0x0008) (Const)
	struct FName                                       CameraTutorialTextId;                                     // 0x01E4(0x0008) (Const)
	struct FName                                       NightVisionTutorialTextId;                                // 0x01EC(0x0008) (Const)
	struct FName                                       JumpOverTutorialTextId;                                   // 0x01F4(0x0008) (Const)
	struct FName                                       OpenWindowTutorialTextId;                                 // 0x01FC(0x0008) (Const)
	struct FName                                       CrouchGamepadTutorialTextId;                              // 0x0204(0x0008) (Const)
	struct FName                                       CrouchKeyboardTutorialTextId;                             // 0x020C(0x0008) (Const)
	struct FName                                       CrouchKeyboardToggleTutorialTextId;                       // 0x0214(0x0008) (Const)
	struct FName                                       CrouchGamepadTutorialReminderTextId;                      // 0x021C(0x0008) (Const)
	struct FName                                       CrouchKeyboardTutorialReminderTextId;                     // 0x0224(0x0008) (Const)
	struct FName                                       CrouchKeyboardToggleTutorialReminderTextId;               // 0x022C(0x0008) (Const)
	struct FName                                       LookBehindTutorialTextId;                                 // 0x0234(0x0008) (Const)
	struct FName                                       PeekGamepadTutorialTextId;                                // 0x023C(0x0008) (Const)
	struct FName                                       PeekKeyboardTutorialTextId;                               // 0x0244(0x0008) (Const)
	struct FName                                       RunTutorialTextId;                                        // 0x024C(0x0008) (Const)
	struct FName                                       RunTutorialGamepadTextId;                                 // 0x0254(0x0008) (Const)
	struct FName                                       RunReminderTutorialTextId;                                // 0x025C(0x0008) (Const)
	struct FName                                       RunReminderTutorialGamepadTextId;                         // 0x0264(0x0008) (Const)
	struct FName                                       WatchRecordingsReminderTextId;                            // 0x026C(0x0008) (Const)
	struct FName                                       EasyDeathQTETextId;                                       // 0x0274(0x0008) (Const)
	struct FName                                       HidingUnderBedTextId;                                     // 0x027C(0x0008) (Const)
	struct FName                                       DocumentReadingKeyboardTextId;                            // 0x0284(0x0008) (Const)
	struct FName                                       DocumentReadingGamepadTextId;                             // 0x028C(0x0008) (Const)
	struct FName                                       GameplayItemTextId;                                       // 0x0294(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLTutorialManager");
		return ptr;
	}


	void SetTutorialsEnabled(bool bEnabled);
	void Clear();
};


// Class OLGame.OLPawn
// 0x5F04 (0x6680 - 0x077C)
class AOLPawn : public AUDKPawn
{
public:
	class AOLPawn*                                     DefaultPawn;                                              // 0x077C(0x0008)
	unsigned long                                      bUsingNewPhysics : 1;                                     // 0x0784(0x0004)
	unsigned long                                      bSimplifiedPhysics : 1;                                   // 0x0784(0x0004)
	unsigned long                                      bPlayingSpecialMoveAnim : 1;                              // 0x0784(0x0004)
	unsigned long                                      bDelayedSpecialMoveAnim : 1;                              // 0x0784(0x0004)
	unsigned long                                      bForcePlayAnimWhenPositioned : 1;                         // 0x0784(0x0004)
	unsigned long                                      bSpecialMoveInterruptible : 1;                            // 0x0784(0x0004)
	unsigned long                                      bPendingSpecialMoveAnims : 1;                             // 0x0784(0x0004)
	unsigned long                                      bFilterAnimEndNotifies : 1;                               // 0x0784(0x0004) (Const)
	unsigned long                                      bProceduralAnimsDelayedAfterSpecialMove : 1;              // 0x0784(0x0004)
	unsigned long                                      bPendingCollisionSizeChange : 1;                          // 0x0784(0x0004)
	unsigned long                                      bCollisionDisabled : 1;                                   // 0x0784(0x0004)
	unsigned long                                      bIgnorePawnCollisions : 1;                                // 0x0784(0x0004)
	unsigned long                                      bWasInWater : 1;                                          // 0x0784(0x0004) (Transient)
	class UOLCharacterProxy*                           CharProxy;                                                // 0x0788(0x0008) (ExportObject, Component, EditInline)
	class UPhysicsAsset*                               RagdollAsset;                                             // 0x0790(0x0008)
	float                                              FallGravityMultiplier;                                    // 0x0798(0x0004)
	float                                              SimplfiedPhysicsDisableDuration;                          // 0x079C(0x0004)
	struct FVector                                     CharForward;                                              // 0x07A0(0x000C)
	struct FVector                                     CharRight;                                                // 0x07AC(0x000C)
	float                                              CharDeltaYaw;                                             // 0x07B8(0x0004)
	class UOLAnimNodeSlot*                             FullBodyAnimSlot;                                         // 0x07BC(0x0008)
	class UOLAnimCustomBlend*                          CustomBlendNode;                                          // 0x07C4(0x0008)
	struct FVector                                     RealVelocity;                                             // 0x07CC(0x000C)
	struct FVector                                     PreviousLocation;                                         // 0x07D8(0x000C)
	float                                              InstantRotationSpeed;                                     // 0x07E4(0x0004)
	float                                              CurrentRotationSpeed;                                     // 0x07E8(0x0004)
	float                                              FallAccelerationStartedTime;                              // 0x07EC(0x0004)
	TEnumAsByte<ELocomotionMode>                       LocomotionMode;                                           // 0x07F0(0x0001)
	TEnumAsByte<ELocomotionMode>                       PreviousLocomotionMode;                                   // 0x07F1(0x0001)
	TEnumAsByte<ESpecialMoveType>                      SpecialMove;                                              // 0x07F2(0x0001)
	TEnumAsByte<ESpecialMoveType>                      InterruptedSpecialMove;                                   // 0x07F3(0x0001)
	TEnumAsByte<EFootstepDecalType>                    DirtyFeetDecalType;                                       // 0x07F4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x07F5(0x0003) MISSED OFFSET
	struct FSpecialMoveParameters                      SpecialMoveParams[0xC5];                                  // 0x07F8(0x0078) (Edit)
	float                                              SpecialMoveStartedTime;                                   // 0x6450(0x0004)
	TArray<struct FName>                               PlayingSpecialMoveAnims;                                  // 0x6454(0x0010) (NeedCtorLink)
	struct FAdjustPositionData                         AdjustPosition;                                           // 0x6464(0x0038)
	TArray<struct FProceduralAnimData>                 ProceduralAnims;                                          // 0x649C(0x0010) (NeedCtorLink)
	float                                              ProceduralAnimLinearVelocity;                             // 0x64AC(0x0004) (Const)
	float                                              ProceduralAnimAngularVelocity;                            // 0x64B0(0x0004) (Const)
	struct FMovementBlockedData                        WalkingMovementBlockedData;                               // 0x64B4(0x001C)
	float                                              MaxFootstepDistSq;                                        // 0x64D0(0x0004)
	float                                              MaxJumpSoundDistSq;                                       // 0x64D4(0x0004)
	float                                              FloorMaterialLastUpdateTime;                              // 0x64D8(0x0004)
	struct FName                                       LastSurfaceType;                                          // 0x64DC(0x0008)
	class UOLPhysicalMaterialProperty*                 CachedFloorMaterialProperty;                              // 0x64E4(0x0008) (Transient)
	float                                              SmoothPawnSpeedRTPC;                                      // 0x64EC(0x0004)
	float                                              PawnSpeedRTPCApproachUp;                                  // 0x64F0(0x0004) (Config)
	float                                              PawnSpeedRTPCApproachDown;                                // 0x64F4(0x0004) (Config)
	struct FString                                     RTPCNamePawnSpeed;                                        // 0x64F8(0x0010) (Const, NeedCtorLink)
	TArray<struct FDelayedEventInfo>                   DelayedSoundEvents;                                       // 0x6508(0x0010) (NeedCtorLink)
	class UPhysicalMaterial*                           FootStepSurface_WaterShallow;                             // 0x6518(0x0008) (Const)
	class UPhysicalMaterial*                           FootStepSurface_WaterAnkleDeep;                           // 0x6520(0x0008) (Const)
	class UPhysicalMaterial*                           FootStepSurface_WaterWaistDeep;                           // 0x6528(0x0008) (Const)
	class UPhysicalMaterial*                           FootStepSurface_InnerDemonEffect;                         // 0x6530(0x0008) (Const)
	class UParticleSystemComponent*                    WaterFootstepParticlesLeft;                               // 0x6538(0x0008) (Const, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    WaterFootstepParticlesRight;                              // 0x6540(0x0008) (Const, ExportObject, Component, EditInline)
	class UMaterialInstanceConstant*                   FootstepDecalBloodL1;                                     // 0x6548(0x0008) (Const)
	class UMaterialInstanceConstant*                   FootstepDecalBloodL2;                                     // 0x6550(0x0008) (Const)
	class UMaterialInstanceConstant*                   FootstepDecalBloodR1;                                     // 0x6558(0x0008) (Const)
	class UMaterialInstanceConstant*                   FootstepDecalBloodR2;                                     // 0x6560(0x0008) (Const)
	class UMaterialInstanceConstant*                   FootstepDecalSnowL1;                                      // 0x6568(0x0008) (Const)
	class UMaterialInstanceConstant*                   FootstepDecalSnowL2;                                      // 0x6570(0x0008) (Const)
	class UMaterialInstanceConstant*                   FootstepDecalSnowR1;                                      // 0x6578(0x0008) (Const)
	class UMaterialInstanceConstant*                   FootstepDecalSnowR2;                                      // 0x6580(0x0008) (Const)
	class UOLSeqAct_InvisibleFootsteps*                SpecificFootstepProvider;                                 // 0x6588(0x0008)
	int                                                NumRemainingDirtyFeetDecals;                              // 0x6590(0x0004)
	TArray<struct FName>                               WaterMaterials;                                           // 0x6594(0x0010) (Const, NeedCtorLink)
	struct FName                                       BloodMaterial;                                            // 0x65A4(0x0008) (Const)
	struct FName                                       SnowMaterial;                                             // 0x65AC(0x0008) (Const)
	int                                                NumFootstepDecals;                                        // 0x65B4(0x0004) (Config)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x65B8(0x0008) (ExportObject, Component, EditInline)
	struct FName                                       HeadBoneName;                                             // 0x65C0(0x0008)
	struct FName                                       LeftFootBoneName;                                         // 0x65C8(0x0008)
	struct FName                                       RightFootBoneName;                                        // 0x65D0(0x0008)
	float                                              DefaultAirControl;                                        // 0x65D8(0x0004)
	float                                              DestinationPredictionFactor;                              // 0x65DC(0x0004)
	float                                              DestinationPredictionMax;                                 // 0x65E0(0x0004)
	float                                              MeshZOffset;                                              // 0x65E4(0x0004)
	float                                              LastFootstepTime;                                         // 0x65E8(0x0004)
	struct FName                                       FloorMaterialGroup;                                       // 0x65EC(0x0008)
	class UAkEvent*                                    FootStepSound_Walk;                                       // 0x65F4(0x0008)
	class UAkEvent*                                    FootStepSound_Run;                                        // 0x65FC(0x0008)
	float                                              TimeSinceLastFoliageTouching;                             // 0x6604(0x0004) (Transient)
	float                                              PendingAnimSetUpdateTime;                                 // 0x6608(0x0004)
	float                                              WindowInteractionInitialZ;                                // 0x660C(0x0004)
	struct FName                                       WindowInteractionAuxBoneName;                             // 0x6610(0x0008) (Const)
	struct FName                                       InteractionBoneName;                                      // 0x6618(0x0008) (Const)
	TArray<class UOLSeqAct_WaitForSpecialMove*>        SpecialMoveListeners;                                     // 0x6620(0x0010) (NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSetOverrides;                                         // 0x6630(0x0010) (NeedCtorLink)
	TArray<class AOLInteractiveSkeletalFoliageActor*>  TouchingFoliage;                                          // 0x6640(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLBranchShieldingMarker*>            TouchingBranchMarker;                                     // 0x6650(0x0010) (Transient, NeedCtorLink)
	class ALandscapeProxy*                             ActiveWaterLandscape;                                     // 0x6660(0x0008)
	class ULandscapeHeightfieldCollisionComponent*     LastWaterLandscapeCollidingComponent;                     // 0x6668(0x0008) (ExportObject, Component, EditInline)
	struct FVector                                     LastWaterCheckPosition;                                   // 0x6670(0x000C)
	float                                              WaterCrouchHeight;                                        // 0x667C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLPawn");
		return ptr;
	}


	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	bool IsFirstPerson();
	void PlayLanded(const struct FVector& landingLocation, float ImpactVel);
	void Landed(const struct FVector& HitLocation, const struct FVector& HitNormal, class AActor* FloorActor);
	void Destroyed();
	void MAT_BeginAIGroup(const struct FVector& StartLoc, const struct FRotator& StartRot, float BlendTime, bool bDiscardSideAdjustments);
	void AdjustToMatineeStageMark(const struct FVector& StartLoc, const struct FRotator& StartRot, float BlendTime, bool bDiscardSideAdjustments);
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void PlayVOLine(class UAkEvent* LineToPlay, const struct FName& BoneName);
	struct FName GetMaterialBelowFeet(int footIndex, bool bForceUpdate);
	void ClientRestart();
	void PlayFootStepSound(int FootDown, class UAnimNotify_Footstep* footstepNotify);
	void OnFootstep(int FootDown, class UAnimNotify_Footstep* footstepNotify);
	void SpawnFootstepDecal(TEnumAsByte<EFootstepDecalType> DecalType, bool bLeftFoot, float Alpha);
	void ProcessNewFootstepDecal(class UDecalComponent* NewDecalComp, TEnumAsByte<EFootstepDecalType> DecalType, float DecalThickness, bool bLeftFoot, struct FVector* DecalLocation);
	void GetFootstepDecalTransform(bool bLeftFoot, struct FVector* DecalLocation, struct FRotator* DecalRotation);
	void FaceRotation(const struct FRotator& NewRotation, float DeltaTime);
	float GetEyeHeight();
	class USoundCue* GetPawnAmbientSound();
	void SetPawnAmbientSound(class USoundCue* NewAmbientSound);
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void EncroachedBy(class AActor* Other);
	void SetPawnRBChannels(bool bRagdollMode);
	void OnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void ReattachMesh();
	void UpdateShadowSettings(bool bWantShadow);
	void PostBeginPlay();
	void ProceduralAdjustNotify(float Duration);
	void EnableCollisionNotify();
	void RestoreCollisionSizeNotify();
	void ChangeCollisionSizeNotify();
	void MoveInterruptibleNotify();
	void NativePostBeginPlay();
	void NativeOnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StartSpecialMove(TEnumAsByte<ESpecialMoveType> moveType, const struct FVector& targetPosition, const struct FVector& TargetDirection, TEnumAsByte<EAdjustPositionTargetType> TargetType);
	bool IsSpecialMoveCompleted();
	void NativeDestroyed();
};


// Class OLGame.OLTypes
// 0x0000 (0x0068 - 0x0068)
class UOLTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLTypes");
		return ptr;
	}

};


// Class OLGame.OLHero
// 0x5180 (0xB800 - 0x6680)
class AOLHero : public AOLPawn
{
public:
	class AOLPlayerController*                         OLPC;                                                     // 0x6680(0x0008)
	class AOLHero*                                     DefaultHero;                                              // 0x6688(0x0008)
	struct FVector                                     EyeForward;                                               // 0x6690(0x000C)
	class USkeletalMeshComponent*                      ShadowProxy;                                              // 0x669C(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        HeadMesh;                                                 // 0x66A4(0x0008) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      CameraMesh;                                               // 0x66AC(0x0008) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      CameraMeshShadowProxy;                                    // 0x66B4(0x0008) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      WatchMesh;                                                // 0x66BC(0x0008) (ExportObject, Component, EditInline)
	TArray<class UStaticMeshComponent*>                PocketBatteriesMeshes;                                    // 0x66C4(0x0010) (ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class UStaticMeshComponent*>                PocketBandagesMeshes;                                     // 0x66D4(0x0010) (ExportObject, Component, NeedCtorLink, EditInline)
	TArray<int>                                        LeftArmBandageMaterials;                                  // 0x66E4(0x0010) (NeedCtorLink)
	TArray<int>                                        LeftHandBandageMaterials;                                 // 0x66F4(0x0010) (NeedCtorLink)
	TArray<class UMaterialInterface*>                  BandageMaterialsToStream;                                 // 0x6704(0x0010) (NeedCtorLink)
	class UStaticMeshComponent*                        GlassesMesh;                                              // 0x6714(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        BandageMeshRightHand;                                     // 0x671C(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        BandageMeshLeftHand;                                      // 0x6724(0x0008) (ExportObject, Component, EditInline)
	TArray<class UStaticMeshComponent*>                GameplayItemMeshes;                                       // 0x672C(0x0010) (ExportObject, Component, NeedCtorLink, EditInline)
	class UParticleSystemComponent*                    BloodEffect;                                              // 0x673C(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    DecapitatedBloodEffect;                                   // 0x6744(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    RainEffect;                                               // 0x674C(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    UnderwaterWetEffect;                                      // 0x6754(0x0008) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    UnderwaterBloodWetEffect;                                 // 0x675C(0x0008) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    WaterSplashParticles;                                     // 0x6764(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    SnowStepParticlesLightL;                                  // 0x676C(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    SnowStepParticlesLightR;                                  // 0x6774(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    SnowStepParticlesBigL;                                    // 0x677C(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    SnowStepParticlesBigR;                                    // 0x6784(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    GenericCameraEffect;                                      // 0x678C(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    AirBubbleStreamParticles;                                 // 0x6794(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    SwimmingLHandParticles01;                                 // 0x679C(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    SwimmingLHandParticles02;                                 // 0x67A4(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    SwimmingLElbowParticles01;                                // 0x67AC(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    SwimmingLElbowParticles02;                                // 0x67B4(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    SwimmingRHandParticles01;                                 // 0x67BC(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    SwimmingRHandParticles02;                                 // 0x67C4(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    SwimmingRElbowParticles01;                                // 0x67CC(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    SwimmingRElbowParticles02;                                // 0x67D4(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    WaterEnterLFeetParticles;                                 // 0x67DC(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    WaterEnterRFeetParticles;                                 // 0x67E4(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    WaterEnterLKneeParticles;                                 // 0x67EC(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    WaterEnterRKneeParticles;                                 // 0x67F4(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    WaterEnterLHandParticles;                                 // 0x67FC(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    WaterEnterRHandParticles;                                 // 0x6804(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    WaterEnterHeadParticles;                                  // 0x680C(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    WaterBarrelParticles;                                     // 0x6814(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    BloodBarrelParticles;                                     // 0x681C(0x0008) (ExportObject, Component, EditInline)
	class USpotLightComponent*                         NVLightPowered;                                           // 0x6824(0x0008) (ExportObject, Component, EditInline)
	class USpotLightComponent*                         NVLightDefault;                                           // 0x682C(0x0008) (ExportObject, Component, EditInline)
	class USpotLightComponent*                         DarkLight;                                                // 0x6834(0x0008) (ExportObject, Component, EditInline)
	class USpotLightComponent*                         CamcorderScreenLight;                                     // 0x683C(0x0008) (ExportObject, Component, EditInline)
	class UMaterialInstanceConstant*                   CameraScreenMat;                                          // 0x6844(0x0008)
	struct FName                                       CameraScreenParamName;                                    // 0x684C(0x0008)
	class USkeletalMesh*                               YoungBlakeMesh;                                           // 0x6854(0x0008)
	class UStaticMesh*                                 Blake12Head;                                              // 0x685C(0x0008)
	class UAnimSet*                                    YoungBlakeAnimSet;                                        // 0x6864(0x0008)
	class USkeletalMesh*                               CleanBlakeMesh;                                           // 0x686C(0x0008)
	class USkeletalMesh*                               DirtyBlakeMesh;                                           // 0x6874(0x0008)
	class USkeletalMesh*                               GroinInjuryMesh;                                          // 0x687C(0x0008)
	class USkeletalMesh*                               CleanShadowProxyBlakeMesh;                                // 0x6884(0x0008)
	class USkeletalMesh*                               DirtyShadowProxyBlakeMesh;                                // 0x688C(0x0008)
	class UMaterial*                                   HideMaterial;                                             // 0x6894(0x0008)
	struct FName                                       BandageBloodAmountParamName;                              // 0x689C(0x0008)
	float                                              BaseUnderwaterWetEffectLifetime;                          // 0x68A4(0x0004)
	float                                              OverrideUnderwaterWetEffectLifetime;                      // 0x68A8(0x0004)
	struct FName                                       UnderwaterWetEffectLifetimeParamName;                     // 0x68AC(0x0008)
	int                                                PocketFlapsMaterialOveriddeIndex;                         // 0x68B4(0x0004)
	TEnumAsByte<ESkinType>                             SkinType;                                                 // 0x68B8(0x0001)
	TEnumAsByte<ESubSkinType>                          SubSkinType;                                              // 0x68B9(0x0001)
	TEnumAsByte<ECornerPeekPosition>                   LastValidCornerPeekPosition;                              // 0x68BA(0x0001)
	TEnumAsByte<EObjectivePrompt>                      ActiveObjectivePrompt;                                    // 0x68BB(0x0001)
	TEnumAsByte<ECamcorderMode>                        CamcorderMode;                                            // 0x68BC(0x0001)
	TEnumAsByte<ECamcorderState>                       CamcorderState;                                           // 0x68BD(0x0001)
	TEnumAsByte<ELocomotionMode>                       OverriddenLMForNeckOffsetInCinematicMode;                 // 0x68BE(0x0001)
	TEnumAsByte<EHeroWalkingStyle>                     ForcedWalkingStyle;                                       // 0x68BF(0x0001)
	TEnumAsByte<ESpecialMoveType>                      FinishingSpecialMove;                                     // 0x68C0(0x0001)
	TEnumAsByte<ELedgeTransitionType>                  ActiveLedgeTransitionType;                                // 0x68C1(0x0001)
	TEnumAsByte<ELedgeClimbType>                       LedgeClimbType;                                           // 0x68C2(0x0001)
	TEnumAsByte<EDoorOpeningType>                      DoorOpeningType;                                          // 0x68C3(0x0001)
	TEnumAsByte<EDoorPartialOpenType>                  DoorPartialOpenType;                                      // 0x68C4(0x0001)
	TEnumAsByte<EDoorClosingType>                      DoorClosingType;                                          // 0x68C5(0x0001)
	TEnumAsByte<EHeroBodySetup>                        BodySetup;                                                // 0x68C6(0x0001)
	TEnumAsByte<EHeroBodySetup>                        BodySetupToSetAfterSpecialMove;                           // 0x68C7(0x0001)
	TEnumAsByte<EOutOfItemType>                        OutOfItemType;                                            // 0x68C8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x68C9(0x0003) MISSED OFFSET
	unsigned long                                      bBloody : 1;                                              // 0x68CC(0x0004)
	unsigned long                                      bLeftHandIKActive : 1;                                    // 0x68CC(0x0004)
	unsigned long                                      bRightHandIKActive : 1;                                   // 0x68CC(0x0004)
	unsigned long                                      bRightTwistBoneActive : 1;                                // 0x68CC(0x0004)
	unsigned long                                      bShouldHideLeftHandDuringSM : 1;                          // 0x68CC(0x0004)
	unsigned long                                      bShouldHideRightHandDuringSM : 1;                         // 0x68CC(0x0004)
	unsigned long                                      bValidRecordingInSight : 1;                               // 0x68CC(0x0004)
	unsigned long                                      bHandPlanted : 1;                                         // 0x68CC(0x0004)
	unsigned long                                      bContextualPeekWaitingForNoVelocity : 1;                  // 0x68CC(0x0004)
	unsigned long                                      bScrambleLoopSnd : 1;                                     // 0x68CC(0x0004)
	unsigned long                                      bPairedWalkLocationLocked : 1;                            // 0x68CC(0x0004)
	unsigned long                                      bMustCrouchAfterSpecialMove : 1;                          // 0x68CC(0x0004)
	unsigned long                                      bMustCrawlAfterSpecialMove : 1;                           // 0x68CC(0x0004)
	unsigned long                                      bMustGoToInventoryAfterSpecialMove : 1;                   // 0x68CC(0x0004)
	unsigned long                                      bShouldPlayCrawlVariationSpecialMove : 1;                 // 0x68CC(0x0004)
	unsigned long                                      bForcedCrouch : 1;                                        // 0x68CC(0x0004)
	unsigned long                                      bLeaningLeftPushing : 1;                                  // 0x68CC(0x0004)
	unsigned long                                      bLeaningRightPushing : 1;                                 // 0x68CC(0x0004)
	unsigned long                                      bWantToRun : 1;                                           // 0x68CC(0x0004)
	unsigned long                                      bWantToKeepRunning : 1;                                   // 0x68CC(0x0004)
	unsigned long                                      bIsGhost : 1;                                             // 0x68CC(0x0004)
	unsigned long                                      bPlayingRunSnd : 1;                                       // 0x68CC(0x0004)
	unsigned long                                      bExitCrawlToCrouch : 1;                                   // 0x68CC(0x0004)
	unsigned long                                      bCrawlTemporaryDisabled : 1;                              // 0x68CC(0x0004)
	unsigned long                                      bIsStaminaDepleted : 1;                                   // 0x68CC(0x0004)
	unsigned long                                      bMustFindPIEGround : 1;                                   // 0x68CC(0x0004)
	unsigned long                                      bSlopedGroundActive : 1;                                  // 0x68CC(0x0004)
	unsigned long                                      bSlopedGroundSoundActive : 1;                             // 0x68CC(0x0004)
	unsigned long                                      bContextualPeekingMoveCameraYaw : 1;                      // 0x68CC(0x0004)
	unsigned long                                      bNoBleeding : 1;                                          // 0x68CC(0x0004)
	unsigned long                                      bHandsJustCrucified : 1;                                  // 0x68CC(0x0004)
	unsigned long                                      bHandCrucifixionBandaging : 1;                            // 0x68CC(0x0004)
	unsigned long                                      bHandsCrucifiedBandaged : 1;                              // 0x68D0(0x0004)
	unsigned long                                      bBandageWithCamUp : 1;                                    // 0x68D0(0x0004)
	unsigned long                                      bHideBandagesAfterAnim : 1;                               // 0x68D0(0x0004)
	unsigned long                                      bGlassesOff : 1;                                          // 0x68D0(0x0004)
	unsigned long                                      bLostGlasses : 1;                                         // 0x68D0(0x0004)
	unsigned long                                      bHighSubtitles : 1;                                       // 0x68D0(0x0004)
	unsigned long                                      bElectrified : 1;                                         // 0x68D0(0x0004)
	unsigned long                                      bHeatShielding : 1;                                       // 0x68D0(0x0004)
	unsigned long                                      bAffectedByHeat : 1;                                      // 0x68D0(0x0004)
	unsigned long                                      bFlySwatting : 1;                                         // 0x68D0(0x0004)
	unsigned long                                      bFoliageShielding : 1;                                    // 0x68D0(0x0004)
	unsigned long                                      bBrightLightShielding : 1;                                // 0x68D0(0x0004)
	unsigned long                                      bBranchShielding : 1;                                     // 0x68D0(0x0004)
	unsigned long                                      bParrying : 1;                                            // 0x68D0(0x0004)
	unsigned long                                      bLimping : 1;                                             // 0x68D0(0x0004)
	unsigned long                                      bHobbling : 1;                                            // 0x68D0(0x0004)
	unsigned long                                      bInDarkness : 1;                                          // 0x68D0(0x0004)
	unsigned long                                      bLitByFlashlight : 1;                                     // 0x68D0(0x0004)
	unsigned long                                      bCamcorderModeChanged : 1;                                // 0x68D0(0x0004)
	unsigned long                                      bMicrophoneActive : 1;                                    // 0x68D0(0x0004)
	unsigned long                                      bMicrophoneShouldBeReactivated : 1;                       // 0x68D0(0x0004)
	unsigned long                                      bCamcorderDesired : 1;                                    // 0x68D0(0x0004)
	unsigned long                                      bBothHandsNeeded : 1;                                     // 0x68D0(0x0004)
	unsigned long                                      bPlayingNVGlitchSound : 1;                                // 0x68D0(0x0004)
	unsigned long                                      bPlayingCameraHaarpSound : 1;                             // 0x68D0(0x0004)
	unsigned long                                      bRainEffectDesired : 1;                                   // 0x68D0(0x0004)
	unsigned long                                      bCameraCracked : 1;                                       // 0x68D0(0x0004)
	unsigned long                                      bOverrideDarkLight : 1;                                   // 0x68D0(0x0004)
	unsigned long                                      bNoInventory : 1;                                         // 0x68D0(0x0004)
	unsigned long                                      bPlayScriptedAnimWasNoInventory : 1;                      // 0x68D0(0x0004)
	unsigned long                                      bPlayScriptAnimActive : 1;                                // 0x68D0(0x0004)
	unsigned long                                      bLastCinematicModeDisabledCamcorder : 1;                  // 0x68D0(0x0004)
	unsigned long                                      bCanZoomInCinematicMode : 1;                              // 0x68D4(0x0004)
	unsigned long                                      bUseProxyLightInCinematicMode : 1;                        // 0x68D4(0x0004)
	unsigned long                                      bFullCamcorderControlInCinematicMode : 1;                 // 0x68D4(0x0004)
	unsigned long                                      bPartialCamcorderControlInCinematicMode : 1;              // 0x68D4(0x0004)
	unsigned long                                      bMicrophoneDisabledInCinematicMode : 1;                   // 0x68D4(0x0004)
	unsigned long                                      bBlockConstrainedMovement : 1;                            // 0x68D4(0x0004)
	unsigned long                                      bKillConstrainedMovement : 1;                             // 0x68D4(0x0004)
	unsigned long                                      bWantLookBack : 1;                                        // 0x68D4(0x0004)
	unsigned long                                      bLeftAnim : 1;                                            // 0x68D4(0x0004)
	unsigned long                                      bBackAnim : 1;                                            // 0x68D4(0x0004)
	unsigned long                                      bShortAnim : 1;                                           // 0x68D4(0x0004)
	unsigned long                                      bExitLadderLeftHand : 1;                                  // 0x68D4(0x0004)
	unsigned long                                      bLookingBackLeftSide : 1;                                 // 0x68D4(0x0004)
	unsigned long                                      bRunningTraversalMove : 1;                                // 0x68D4(0x0004)
	unsigned long                                      bApplyLandingPenalty : 1;                                 // 0x68D4(0x0004)
	unsigned long                                      bJumping : 1;                                             // 0x68D4(0x0004)
	unsigned long                                      bStartingSpecialMove : 1;                                 // 0x68D4(0x0004)
	unsigned long                                      bPickupCrouched : 1;                                      // 0x68D4(0x0004)
	unsigned long                                      bPickupWhenCrouched : 1;                                  // 0x68D4(0x0004)
	unsigned long                                      bPickupWhenCrawled : 1;                                   // 0x68D4(0x0004)
	unsigned long                                      bForceBigLanding : 1;                                     // 0x68D4(0x0004)
	unsigned long                                      bBigLandingNoHand : 1;                                    // 0x68D4(0x0004)
	unsigned long                                      bClimbOverWallVeryHigh : 1;                               // 0x68D4(0x0004)
	unsigned long                                      ActiveWardrobeIsLeftDoor : 1;                             // 0x68D4(0x0004)
	unsigned long                                      bIsOnWardrobeRail : 1;                                    // 0x68D4(0x0004)
	unsigned long                                      bBeamLookingBack : 1;                                     // 0x68D4(0x0004)
	unsigned long                                      bCrouchShouldHandBeDown : 1;                              // 0x68D4(0x0004)
	unsigned long                                      bSlipperySlide : 1;                                       // 0x68D4(0x0004)
	unsigned long                                      bCanOrientWithBed : 1;                                    // 0x68D4(0x0004)
	unsigned long                                      bQuietDoorInteraction : 1;                                // 0x68D4(0x0004)
	unsigned long                                      SetBodySetupAfterSpecialMove : 1;                         // 0x68D4(0x0004)
	unsigned long                                      bIsYoungBlake : 1;                                        // 0x68D4(0x0004)
	unsigned long                                      bWasUnder : 1;                                            // 0x68D8(0x0004)
	unsigned long                                      bIsBeingChased : 1;                                       // 0x68D8(0x0004)
	unsigned long                                      bIsBeingInvestigated : 1;                                 // 0x68D8(0x0004)
	unsigned long                                      bFellInWater : 1;                                         // 0x68D8(0x0004)
	unsigned long                                      bInventorySoundStateOn : 1;                               // 0x68D8(0x0004)
	unsigned long                                      bWaitingToLookAtHands : 1;                                // 0x68D8(0x0004)
	unsigned long                                      bDoRaftEntryCheck : 1;                                    // 0x68D8(0x0004) (Transient)
	int                                                PendingSubSkinType;                                       // 0x68DC(0x0004)
	struct FSkinMaterials                              Skins[0x6];                                               // 0x68E0(0x01FC)
	struct FHeroAnimNodes                              AnimNodes;                                                // 0x74C8(0x01D8) (NeedCtorLink)
	struct FHeroAnimNodes                              ShadowProxyNodes;                                         // 0x76A0(0x01D8) (NeedCtorLink)
	class UOLAnimNodeSlot*                             ShadowProxyFullBodyAnimSlot;                              // 0x7878(0x0008)
	class UOLAnimCustomBlend*                          ShadowProxyCustomBlendNode;                               // 0x7880(0x0008)
	class USkelControlBase*                            ShadowProxyRightClavicleFixup;                            // 0x7888(0x0008)
	class USkelControlBase*                            ShadowProxyForeTwist1Control;                             // 0x7890(0x0008)
	TArray<class UAnimSet*>                            ExtraSpecialMoveAnimSets;                                 // 0x7898(0x0010) (NeedCtorLink)
	class UAnimSet*                                    ExtraPlayAnimAnimSet;                                     // 0x78A8(0x0008)
	struct FVector                                     MeshOffset2D;                                             // 0x78B0(0x000C)
	float                                              LastFrameMeshZOffset;                                     // 0x78BC(0x0004)
	float                                              MeshPitchOffset;                                          // 0x78C0(0x0004)
	float                                              MeshRollOffset;                                           // 0x78C4(0x0004)
	struct FVector2D                                   PickupMeshOffset;                                         // 0x78C8(0x0008)
	float                                              DrowningMeshOffset;                                       // 0x78D0(0x0004)
	struct FEnvironmentReactionData                    EnvironmentReaction;                                      // 0x78D4(0x0020)
	struct FHandIKData                                 LeftHandIKData;                                           // 0x78F4(0x0030)
	struct FHandPlantedIKData                          LeftHandPlantedIKData;                                    // 0x7924(0x0024)
	float                                              LastHandPlantedHeading;                                   // 0x7948(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x794C(0x0004) MISSED OFFSET
	struct FCornerPeekData                             CornerPeek;                                               // 0x7950(0x00B0)
	float                                              LastValidCornerPeekTime;                                  // 0x7A00(0x0004)
	struct FCornerData                                 LastValidCornerMarker;                                    // 0x7A04(0x0038)
	float                                              TimeLeftForTutorialDoorPeekCollisionCheck;                // 0x7A3C(0x0004)
	struct FAttachmentData                             ActiveAttachment;                                         // 0x7A40(0x0060) (Component)
	struct FCrawlData                                  Crawl;                                                    // 0x7AA0(0x0088)
	struct FSlidingSlopeData                           SlidingSlope;                                             // 0x7B28(0x0010)
	struct FLedgeHangData                              LedgeHang;                                                // 0x7B38(0x0018)
	struct FHidingBarrelData                           HidingBarrel;                                             // 0x7B50(0x0040)
	struct FPushableData                               Pushable;                                                 // 0x7B90(0x0064)
	struct FPairedWalkData                             PairedWalk;                                               // 0x7BF4(0x0044)
	struct FVector                                     PairedWalkLockedLocation;                                 // 0x7C38(0x000C)
	struct FPuntData                                   Punt;                                                     // 0x7C44(0x0014)
	float                                              CurrentLean;                                              // 0x7C58(0x0004)
	float                                              LastLeanSndTime;                                          // 0x7C5C(0x0004)
	float                                              LargeSlopeStartedTime;                                    // 0x7C60(0x0004)
	float                                              RunBreathStartTime;                                       // 0x7C64(0x0004)
	float                                              StoppedRunningStartTime;                                  // 0x7C68(0x0004)
	float                                              RunStamina;                                               // 0x7C6C(0x0004)
	float                                              JumpStamina;                                              // 0x7C70(0x0004)
	float                                              Air;                                                      // 0x7C74(0x0004)
	float                                              TimeSinceLastOutOfAirBubble;                              // 0x7C78(0x0004)
	float                                              OutOfAirBubbleDuration;                                   // 0x7C7C(0x0004)
	float                                              AirBubbleFinalStepDuration;                               // 0x7C80(0x0004)
	float                                              LastTeleportTime;                                         // 0x7C84(0x0004)
	float                                              EnteredLockerZ;                                           // 0x7C88(0x0004)
	float                                              SlopedGroundActiveTime;                                   // 0x7C8C(0x0004)
	float                                              IdleTime;                                                 // 0x7C90(0x0004)
	float                                              WalkOrIdleTime;                                           // 0x7C94(0x0004)
	float                                              FallingTimeLeftBeforeDeath;                               // 0x7C98(0x0004)
	float                                              ContextualPeekingRatio;                                   // 0x7C9C(0x0004)
	float                                              BleedingBandageValidTime;                                 // 0x7CA0(0x0004)
	float                                              BleedingBandageInvalidTime;                               // 0x7CA4(0x0004)
	float                                              HandsCrucifiedEffortTimestamp;                            // 0x7CA8(0x0004)
	float                                              BandagePushBack;                                          // 0x7CAC(0x0004)
	float                                              BandageZOffset;                                           // 0x7CB0(0x0004)
	float                                              TimeLeftForBandage;                                       // 0x7CB4(0x0004)
	float                                              TimeBeforeDrowning;                                       // 0x7CB8(0x0004)
	struct FVector                                     HighestFallingPosition;                                   // 0x7CBC(0x000C)
	float                                              LastPhysicsJumpTime;                                      // 0x7CC8(0x0004)
	float                                              JumpGravityMultiplier;                                    // 0x7CCC(0x0004)
	struct FCornerPeekConfigData                       CornerPeekConfigParams[0x2];                              // 0x7CD0(0x008C)
	float                                              LastTimeObjectivesVOPlayed;                               // 0x7DE8(0x0004)
	struct FName                                       LastObjectiveVOPath;                                      // 0x7DEC(0x0008)
	struct FName                                       LastObjectiveTextId;                                      // 0x7DF4(0x0008)
	class UOLHeroCamera*                               Camera;                                                   // 0x7DFC(0x0008)
	struct FName                                       LeftHandBoneName;                                         // 0x7E04(0x0008) (Const)
	struct FName                                       LeftHandAuxBoneName;                                      // 0x7E0C(0x0008) (Const)
	struct FName                                       RightHandAuxBoneName;                                     // 0x7E14(0x0008) (Const)
	struct FName                                       LeftHandCenterBoneName;                                   // 0x7E1C(0x0008) (Const)
	struct FName                                       RightHandCenterBoneName;                                  // 0x7E24(0x0008) (Const)
	struct FName                                       LeftClavicleBoneName;                                     // 0x7E2C(0x0008) (Const)
	struct FName                                       RightClavicleBoneName;                                    // 0x7E34(0x0008) (Const)
	struct FName                                       CameraBoneName;                                           // 0x7E3C(0x0008) (Const)
	struct FName                                       CamcorderSocketBoneName;                                  // 0x7E44(0x0008) (Const)
	struct FName                                       LeftPocketSocketBoneName;                                 // 0x7E4C(0x0008) (Const)
	struct FName                                       RightPocketSocketBoneName;                                // 0x7E54(0x0008) (Const)
	struct FName                                       BandageLeftForearmSocketBoneName;                         // 0x7E5C(0x0008) (Const)
	struct FName                                       BabyHoldingSocketName;                                    // 0x7E64(0x0008) (Const)
	struct FName                                       PregLynnHandSocketName;                                   // 0x7E6C(0x0008) (Const)
	struct FVector                                     EyeLocation;                                              // 0x7E74(0x000C)
	struct FRotator                                    EyeRotation;                                              // 0x7E80(0x000C)
	float                                              CurrentFOV;                                               // 0x7E8C(0x0004)
	float                                              FinalFOV;                                                 // 0x7E90(0x0004)
	float                                              OverriddenFOV;                                            // 0x7E94(0x0004)
	float                                              OverriddenFOVApproachCoeff;                               // 0x7E98(0x0004)
	unsigned char                                      UnknownData02[0x4];                                       // 0x7E9C(0x0004) MISSED OFFSET
	struct FMatrix                                     CameraCompSpace;                                          // 0x7EA0(0x0040)
	struct FCameraParameters                           CamParams;                                                // 0x7EE0(0x0018)
	struct FRotationRateLimitParams                    RotationRateLimits;                                       // 0x7EF8(0x0014)
	struct FScriptedDOFData                            ScriptedDOF;                                              // 0x7F0C(0x0020)
	float                                              LastDamageTime;                                           // 0x7F2C(0x0004)
	float                                              LastDamageAmount;                                         // 0x7F30(0x0004)
	struct FDamageTypeParams                           LastDamageParams;                                         // 0x7F34(0x0020)
	float                                              LastScriptedDamageEffectTime;                             // 0x7F54(0x0004)
	float                                              PreciseHealth;                                            // 0x7F58(0x0004)
	float                                              LastBandageUsedTime;                                      // 0x7F5C(0x0004)
	float                                              ElectricEffectStartTime;                                  // 0x7F60(0x0004)
	float                                              NextElectricHurtSoundTime;                                // 0x7F64(0x0004)
	float                                              TimeOfDeath;                                              // 0x7F68(0x0004)
	struct FVector                                     FoliageCameraOffset;                                      // 0x7F6C(0x000C)
	float                                              BrightLightLookingAtTime;                                 // 0x7F78(0x0004)
	float                                              HeatDistance;                                             // 0x7F7C(0x0004)
	float                                              LastHeatDamageTime;                                       // 0x7F80(0x0004)
	float                                              LastElectricDamageTime;                                   // 0x7F84(0x0004)
	float                                              LastDamageVolumeTime;                                     // 0x7F88(0x0004)
	struct FVector                                     DamageVolumeHitNormal;                                    // 0x7F8C(0x000C)
	float                                              CurrentHeatBlur;                                          // 0x7F98(0x0004)
	float                                              HobblingIntensity;                                        // 0x7F9C(0x0004)
	float                                              HobblingDuration;                                         // 0x7FA0(0x0004)
	float                                              HobblingTimeLeft;                                         // 0x7FA4(0x0004)
	float                                              InitialHobblingIntensity;                                 // 0x7FA8(0x0004)
	float                                              TargetHobblingIntensity;                                  // 0x7FAC(0x0004)
	class AOLBushesVolume*                             BushesVolume;                                             // 0x7FB0(0x0008)
	float                                              AnalogDarkness;                                           // 0x7FB8(0x0004)
	float                                              LastAnalogDarknessUpdateTime;                             // 0x7FBC(0x0004)
	float                                              FixedLookRatio;                                           // 0x7FC0(0x0004)
	float                                              RTPCRotationSpeed;                                        // 0x7FC4(0x0004)
	float                                              RTPCIdleRotationSpeed;                                    // 0x7FC8(0x0004)
	float                                              RTPCHealth;                                               // 0x7FCC(0x0004)
	float                                              LastTripHurtTime;                                         // 0x7FD0(0x0004)
	float                                              RTPCNPCDistance;                                          // 0x7FD4(0x0004)
	TArray<class AOLPhysicsVolume*>                    TouchingAutoStancePhysicsVolume;                          // 0x7FD8(0x0010) (NeedCtorLink)
	class AOLPhysicsVolume*                            AnticipatedAutoStancePhysicsVolume;                       // 0x7FE8(0x0008)
	struct FVector                                     AnticipatedAutoStancePhysicsVolumePosition;               // 0x7FF0(0x000C)
	class AOLPawn*                                     ClosestNPC;                                               // 0x7FFC(0x0008)
	struct FDizzinessData                              Dizzy;                                                    // 0x8004(0x0140)
	float                                              CurrentContextualDizzinessRatio;                          // 0x8144(0x0004)
	struct FWindData                                   Wind;                                                     // 0x8148(0x0038)
	struct FNVLightSettings                            CurrentPoweredNVLightSettings;                            // 0x8180(0x0030)
	struct FNVLightSettings                            NormalNVLightSettings;                                    // 0x81B0(0x0030) (Config)
	struct FNVLightSettings                            InteriorNVLightSettings;                                  // 0x81E0(0x0030) (Config)
	struct FNVLightSettings                            PassiveNVLightSettings;                                   // 0x8210(0x0030) (Config)
	float                                              CamcorderDisabledEndTime;                                 // 0x8240(0x0004)
	float                                              LastCamcorderSwitchTime;                                  // 0x8244(0x0004)
	float                                              CurrentBatterySetEnergy;                                  // 0x8248(0x0004)
	float                                              CurrentCamcorderZoomFactor;                               // 0x824C(0x0004)
	float                                              TargetCamcorderZoomFactor;                                // 0x8250(0x0004)
	float                                              NVLightInterpFactor;                                      // 0x8254(0x0004)
	float                                              LastRainEffectActiveTime;                                 // 0x8258(0x0004)
	float                                              CurrentDarkLightRadius;                                   // 0x825C(0x0004)
	float                                              CurrentDarkLightBrightnessEV;                             // 0x8260(0x0004)
	float                                              DarkLightOverrideBrightnessEV;                            // 0x8264(0x0004)
	float                                              DarkLightOverrideRadius;                                  // 0x8268(0x0004)
	float                                              OverriddenMinCamcorderFOV;                                // 0x826C(0x0004)
	float                                              BatteryDurationNV;                                        // 0x8270(0x0004)
	float                                              BatteryDurationMicrophone;                                // 0x8274(0x0004)
	float                                              OverriddenHealthRegenRate;                                // 0x8278(0x0004)
	struct FCameraEffectData                           CameraEffect;                                             // 0x827C(0x001C)
	struct FNVGlitchData                               NVGlitch;                                                 // 0x8298(0x001C)
	float                                              TutorialLookBackReminderTimeLeft;                         // 0x82B4(0x0004)
	float                                              ValidMicrophoneTutorialReminderDuration;                  // 0x82B8(0x0004)
	float                                              HidingUnderBedReminderDuration;                           // 0x82BC(0x0004)
	float                                              DoorInteractionTutorialDuration;                          // 0x82C0(0x0004)
	struct FVector                                     DesiredMoveDirection;                                     // 0x82C4(0x000C)
	struct FVector                                     ExternalImpulse;                                          // 0x82D0(0x000C)
	float                                              WalkSpeed;                                                // 0x82DC(0x0004)
	float                                              RunSpeed;                                                 // 0x82E0(0x0004)
	float                                              CurrentRunSpeed;                                          // 0x82E4(0x0004)
	float                                              InputMovementScaling;                                     // 0x82E8(0x0004)
	struct FLocomotionModeParameters                   LocomotionModeParams[0x21];                               // 0x82EC(0x004C) (Edit)
	class UOLSeqAct_HeroControl*                       HeroControl;                                              // 0x8CB8(0x0008)
	class UOLSeqAct_CamcorderEnabledAnim*              CamcorderEnabledAnim;                                     // 0x8CC0(0x0008)
	class UOLSeqAct_AIPlayerContact*                   PlayerContactSeq;                                         // 0x8CC8(0x0008)
	class UOLSeqAct_WaitForPlayerInput*                WaitForPlayerInputSeq;                                    // 0x8CD0(0x0008)
	class AOLSqueezeMarker*                            ActiveSqueeze;                                            // 0x8CD8(0x0008)
	class AOLLedgeMarker*                              ActiveLedge;                                              // 0x8CE0(0x0008)
	class AOLDoor*                                     ActiveDoor;                                               // 0x8CE8(0x0008)
	class AOLWindow*                                   ActiveWindow;                                             // 0x8CF0(0x0008)
	class AOLBasementWindow*                           ActiveBasementWindow;                                     // 0x8CF8(0x0008)
	class AOLLadderMarker*                             ActiveLadder;                                             // 0x8D00(0x0008)
	class AOLPickableObject*                           ActivePickup;                                             // 0x8D08(0x0008)
	class AOLHidingSpot*                               ActiveLocker;                                             // 0x8D10(0x0008)
	class AOLBed*                                      ActiveBed;                                                // 0x8D18(0x0008)
	class AOLCSA*                                      ActiveCSA;                                                // 0x8D20(0x0008)
	class AOLCrawlMarker*                              ActiveCrawl;                                              // 0x8D28(0x0008)
	class AOLSlidingSlopeMarker*                       ActiveSlidingSlope;                                       // 0x8D30(0x0008)
	class AOLTripActor*                                ActiveTripActor;                                          // 0x8D38(0x0008)
	class AOLWardrobe*                                 ActiveWardrobe;                                           // 0x8D40(0x0008)
	class AOLStairsMarker*                             ActiveStairsMarker;                                       // 0x8D48(0x0008)
	class AOLBeamMarker*                               ActiveBeam;                                               // 0x8D50(0x0008)
	float                                              WalkSpeedOverride;                                        // 0x8D58(0x0004)
	float                                              RunSpeedOverride;                                         // 0x8D5C(0x0004)
	float                                              AccelApproachFactor;                                      // 0x8D60(0x0004)
	float                                              DecelApproachFactor;                                      // 0x8D64(0x0004)
	struct FSpeedLimitParams                           TemporarySpeedLimit;                                      // 0x8D68(0x0014)
	struct FSqueezeLimitsParams                        SqueezeLimits;                                            // 0x8D7C(0x0004)
	float                                              SpecialMoveBlendAlpha;                                    // 0x8D80(0x0004)
	struct FVector                                     LadderDesiredMoveDirection;                               // 0x8D84(0x000C)
	float                                              LandingPenaltyDuration;                                   // 0x8D90(0x0004)
	float                                              SpecialMoveTargetYaw;                                     // 0x8D94(0x0004)
	float                                              SpecialMoveTargetPitch;                                   // 0x8D98(0x0004)
	float                                              EnterBedZ;                                                // 0x8D9C(0x0004)
	float                                              LastCompletedDoorInteractionTime;                         // 0x8DA0(0x0004)
	float                                              SlideUnderDuration;                                       // 0x8DA4(0x0004)
	struct FVector                                     DodgeDirection;                                           // 0x8DA8(0x000C)
	struct FVector                                     SlipperySlideStartPos;                                    // 0x8DB4(0x000C)
	float                                              LastActiveLedgeTimestamp;                                 // 0x8DC0(0x0004)
	float                                              LastActiveLedgeZ;                                         // 0x8DC4(0x0004)
	float                                              LastActiveLadderTimestamp;                                // 0x8DC8(0x0004)
	float                                              LastSpecialMoveFinishedTime;                              // 0x8DCC(0x0004)
	float                                              LastClimbUpObstacleFinishedTime;                          // 0x8DD0(0x0004)
	float                                              RunStartedTime;                                           // 0x8DD4(0x0004)
	float                                              SprintEnabledTime;                                        // 0x8DD8(0x0004)
	float                                              LastLandingTimestamp;                                     // 0x8DDC(0x0004)
	float                                              SpecialMoveStalledTimestamp;                              // 0x8DE0(0x0004)
	float                                              FallingStartedTime;                                       // 0x8DE4(0x0004)
	float                                              LastEnterLookBackTime;                                    // 0x8DE8(0x0004)
	float                                              EnteredHidingSpotTime;                                    // 0x8DEC(0x0004)
	float                                              EasyGrabBeamTime;                                         // 0x8DF0(0x0004)
	float                                              SpecialMovesDisabledUntilTime;                            // 0x8DF4(0x0004)
	float                                              StaminaExhaustedRatio;                                    // 0x8DF8(0x0004)
	float                                              OutOfAirRatio;                                            // 0x8DFC(0x0004)
	float                                              AdrenalineRatio;                                          // 0x8E00(0x0004)
	float                                              AdrenalineBoostActivationTime;                            // 0x8E04(0x0004)
	float                                              AdrenalineBoostDuration;                                  // 0x8E08(0x0004)
	float                                              DoorSlowClosingAnimStartTime;                             // 0x8E0C(0x0004)
	class AOLEnemyPawn*                                AttackingEnemy;                                           // 0x8E10(0x0008)
	TArray<struct FCamcorderLostPromptRangeData>       CamcorderLostPromptRange;                                 // 0x8E18(0x0010) (NeedCtorLink)
	struct FVector                                     LastPositionOnNavmesh;                                    // 0x8E28(0x000C)
	struct FVector                                     AvgVelocity;                                              // 0x8E34(0x000C)
	float                                              RotationChangeAccumulation;                               // 0x8E40(0x0004)
	float                                              LastBeingChasedTime;                                      // 0x8E44(0x0004)
	float                                              LastBeingInvestigatedTime;                                // 0x8E48(0x0004)
	struct FHeroDeathGripData                          DeathGrip;                                                // 0x8E4C(0x006C)
	float                                              DeathGripLastActivatedTime;                               // 0x8EB8(0x0004)
	struct FWaveAnimatedDataConfig                     RaftAnimatedDataParams[0x2];                              // 0x8EBC(0x0048)
	struct FWaveAnimatedDataConfig                     SwimmingAnimatedDataParam;                                // 0x8F4C(0x0048)
	struct FRaftData                                   Raft;                                                     // 0x8F94(0x0160)
	struct FWaveAnimatedData                           SwimmingAnimatedZOffset;                                  // 0x90F4(0x0018)
	struct FWaveAnimatedData                           SwimmingAnimatedRoll;                                     // 0x910C(0x0018)
	struct FWaveAnimatedData                           SwimmingAnimatedPitch;                                    // 0x9124(0x0018)
	struct FUnderwaterData                             Underwater;                                               // 0x913C(0x0014)
	struct FSwimmingParticlesData                      SwimmingParticles;                                        // 0x9150(0x0018)
	struct FInventoryData                              Inventory;                                                // 0x9168(0x001C)
	struct FLookatObjectData                           LookatObject;                                             // 0x9184(0x001C)
	struct FVector                                     FallPushLastTestLocation;                                 // 0x91A0(0x000C)
	struct FVector                                     FallPushVector;                                           // 0x91AC(0x000C)
	float                                              LastRecordingStartTime;                                   // 0x91B8(0x0004)
	TArray<struct FGameplayItemDefinition>             GameplayItems;                                            // 0x91BC(0x0010) (NeedCtorLink)
	float                                              OutOfItemTypeTimestamp;                                   // 0x91CC(0x0004)
	TArray<struct FName>                               CleanSlideSurfaceNames;                                   // 0x91D0(0x0010) (NeedCtorLink)
	struct FName                                       CrouchNoise;                                              // 0x91E0(0x0008) (Const)
	struct FName                                       WalkingNoise;                                             // 0x91E8(0x0008) (Const)
	struct FName                                       RunningNoise;                                             // 0x91F0(0x0008) (Const)
	struct FName                                       DoorMajorNoise;                                           // 0x91F8(0x0008) (Const)
	float                                              MovingNoiseRate;                                          // 0x9200(0x0004) (Const)
	class UForceFeedbackWaveform*                      BigLandingFFWaveform;                                     // 0x9204(0x0008) (Edit, Const)
	class UForceFeedbackWaveform*                      SmallLandingFFWaveform;                                   // 0x920C(0x0008) (Edit, Const)
	class UForceFeedbackWaveform*                      StumbleLandingFFWaveform;                                 // 0x9214(0x0008) (Edit, Const)
	class UForceFeedbackWaveform*                      PickupFFWaveform;                                         // 0x921C(0x0008) (Edit, Const)
	class UForceFeedbackWaveform*                      DroppedDownFFWaveform;                                    // 0x9224(0x0008) (Edit, Const)
	class UForceFeedbackWaveform*                      DoorInteractionFFWaveform;                                // 0x922C(0x0008) (Edit, Const)
	class UForceFeedbackWaveform*                      RunThroughDoorFFWaveform;                                 // 0x9234(0x0008) (Edit, Const)
	class UForceFeedbackWaveform*                      StartRecordingFFWaveform;                                 // 0x923C(0x0008) (Edit, Const)
	struct FCameraShakeData                            SlidingSlopeShakes[0x3];                                  // 0x9244(0x0098) (Const)
	struct FCameraShakeData                            ExhaustedShake;                                           // 0x940C(0x0098) (Const)
	struct FCameraShakeData                            HurtShake;                                                // 0x94A4(0x0098) (Const)
	struct FCameraShakeData                            RaftSmallCollisionShake;                                  // 0x953C(0x0098) (Const)
	struct FCameraShakeData                            PushableCameraShake[0x7];                                 // 0x95D4(0x0098) (Const)
	struct FCameraShakeData                            WindShake;                                                // 0x99FC(0x0098) (Const)
	struct FDizzinessConfig                            PuntDizziness;                                            // 0x9A94(0x00D0) (Const)
	struct FQTEMatineeData                             QTEMatinee;                                               // 0x9B64(0x0018)
	float                                              KeepCrouchedTimeLeft;                                     // 0x9B7C(0x0004)
	float                                              AutoUncrouchTime;                                         // 0x9B80(0x0004)
	class UAkEvent*                                    SndCamStart;                                              // 0x9B84(0x0008) (Const)
	class UAkEvent*                                    SndCamStop;                                               // 0x9B8C(0x0008) (Const)
	class UAkEvent*                                    SndCamOnNVOn;                                             // 0x9B94(0x0008) (Const)
	class UAkEvent*                                    SndCamOnNVOff;                                            // 0x9B9C(0x0008) (Const)
	class UAkEvent*                                    SndCamOffNVOn;                                            // 0x9BA4(0x0008) (Const)
	class UAkEvent*                                    SndCamOffNVOff;                                           // 0x9BAC(0x0008) (Const)
	class UAkEvent*                                    SndMicrophoneOn;                                          // 0x9BB4(0x0008) (Const)
	class UAkEvent*                                    SndMicrophoneOff;                                         // 0x9BBC(0x0008) (Const)
	class UAkEvent*                                    SndReloadBatteries;                                       // 0x9BC4(0x0008) (Const)
	class UAkEvent*                                    SndPickupDocument;                                        // 0x9BCC(0x0008) (Const)
	class UAkEvent*                                    SndPickupBatteries;                                       // 0x9BD4(0x0008) (Const)
	class UAkEvent*                                    SndPickupBandages;                                        // 0x9BDC(0x0008) (Const)
	class UAkEvent*                                    SndZoomIn;                                                // 0x9BE4(0x0008) (Const)
	class UAkEvent*                                    SndZoomOut;                                               // 0x9BEC(0x0008) (Const)
	class UAkEvent*                                    SndSoldierHit;                                            // 0x9BF4(0x0008) (Const)
	class UAkEvent*                                    SndBladeHit;                                              // 0x9BFC(0x0008) (Const)
	class UAkEvent*                                    SndDie;                                                   // 0x9C04(0x0008) (Const)
	class UAkEvent*                                    SndSetDeathState;                                         // 0x9C0C(0x0008) (Const)
	class UAkEvent*                                    SndDeathBuildUpStart;                                     // 0x9C14(0x0008) (Const)
	class UAkEvent*                                    SndDeathBuildUpStop;                                      // 0x9C1C(0x0008) (Const)
	class UAkEvent*                                    SndHit;                                                   // 0x9C24(0x0008) (Const)
	class UAkEvent*                                    SndHitElectrified;                                        // 0x9C2C(0x0008) (Const)
	class UAkEvent*                                    SndStartPeek;                                             // 0x9C34(0x0008) (Const)
	class UAkEvent*                                    SndStopPeek;                                              // 0x9C3C(0x0008) (Const)
	class UAkEvent*                                    SndStartDamage;                                           // 0x9C44(0x0008) (Const)
	class UAkEvent*                                    SndStopDamage;                                            // 0x9C4C(0x0008) (Const)
	class UAkEvent*                                    SndElectricHitStart;                                      // 0x9C54(0x0008) (Const)
	class UAkEvent*                                    SndElectricHitStop;                                       // 0x9C5C(0x0008) (Const)
	class UAkEvent*                                    SndStartRun;                                              // 0x9C64(0x0008) (Const)
	class UAkEvent*                                    SndStopRun;                                               // 0x9C6C(0x0008) (Const)
	class UAkEvent*                                    SndStopRunShort;                                          // 0x9C74(0x0008) (Const)
	class UAkEvent*                                    SndStartLookBack;                                         // 0x9C7C(0x0008) (Const)
	class UAkEvent*                                    SndStopLookBack;                                          // 0x9C84(0x0008) (Const)
	class UAkEvent*                                    SndDieMusicEvent;                                         // 0x9C8C(0x0008) (Const)
	class UAkEvent*                                    SndDieInfiniteFallingMusicEvent;                          // 0x9C94(0x0008) (Const)
	class UAkEvent*                                    SndNewObjective;                                          // 0x9C9C(0x0008) (Const)
	class UAkEvent*                                    SndRecordingCompleted;                                    // 0x9CA4(0x0008) (Const)
	class UAkEvent*                                    SndLowBatteryStart;                                       // 0x9CAC(0x0008) (Const)
	class UAkEvent*                                    SndLowBatteryStop;                                        // 0x9CB4(0x0008) (Const)
	class UAkEvent*                                    SndSlidingSlopeStart;                                     // 0x9CBC(0x0008) (Const)
	class UAkEvent*                                    SndSlidingSlopeStop;                                      // 0x9CC4(0x0008) (Const)
	class UAkEvent*                                    SndStaminaExhaustedStart;                                 // 0x9CCC(0x0008) (Const)
	class UAkEvent*                                    SndStaminaExhaustedStop;                                  // 0x9CD4(0x0008) (Const)
	class UAkEvent*                                    SndUnderwaterStart;                                       // 0x9CDC(0x0008) (Const)
	class UAkEvent*                                    SndUnderwaterStop;                                        // 0x9CE4(0x0008) (Const)
	class UAkEvent*                                    SndUnderwaterBubbles;                                     // 0x9CEC(0x0008) (Const)
	class UAkEvent*                                    SndRaftCollisionHit;                                      // 0x9CF4(0x0008) (Const)
	class UAkEvent*                                    SndRaftScrapingStart;                                     // 0x9CFC(0x0008) (Const)
	class UAkEvent*                                    SndRaftScrapingStop;                                      // 0x9D04(0x0008) (Const)
	class UAkEvent*                                    SndLedgeHangStartPeeking;                                 // 0x9D0C(0x0008) (Const)
	class UAkEvent*                                    SndLedgeHangStopPeeking;                                  // 0x9D14(0x0008) (Const)
	class UAkEvent*                                    SndLedgeHangPeekingExhausted;                             // 0x9D1C(0x0008) (Const)
	class UAkEvent*                                    SndLadderGrabFromAir;                                     // 0x9D24(0x0008) (Const)
	class UAkEvent*                                    SndBarrelCoverClosed;                                     // 0x9D2C(0x0008) (Const)
	class UAkEvent*                                    SndWaterEnter;                                            // 0x9D34(0x0008) (Const)
	class UAkEvent*                                    SndRiverRushingStart;                                     // 0x9D3C(0x0008) (Const)
	class UAkEvent*                                    SndRiverRushingStop;                                      // 0x9D44(0x0008) (Const)
	class UAkEvent*                                    SndInventoryIn;                                           // 0x9D4C(0x0008) (Const)
	class UAkEvent*                                    SndInventoryOut;                                          // 0x9D54(0x0008) (Const)
	class UAkEvent*                                    SndPostReadDocument;                                      // 0x9D5C(0x0008) (Const)
	class UAkEvent*                                    SndRecordingVideoStartLoop;                               // 0x9D64(0x0008) (Const)
	class UAkEvent*                                    SndRecordingVideoStopLoop;                                // 0x9D6C(0x0008) (Const)
	class UAkEvent*                                    SndRecordingVideoStart;                                   // 0x9D74(0x0008) (Const)
	class UAkEvent*                                    SndRecordingVideoCompleted;                               // 0x9D7C(0x0008) (Const)
	class UAkEvent*                                    SndRecordingSnapshotCompleted;                            // 0x9D84(0x0008) (Const)
	class UAkEvent*                                    SndInnerDemonPrecenceStart;                               // 0x9D8C(0x0008) (Const)
	class UAkEvent*                                    SndInnerDemonPrecenceStop;                                // 0x9D94(0x0008) (Const)
	class UAkEvent*                                    SndBandageInterrupted;                                    // 0x9D9C(0x0008) (Const)
	class UAkEvent*                                    SndDeathGripStruggleStart;                                // 0x9DA4(0x0008) (Const)
	class UAkEvent*                                    SndDeathGripStruggleStop;                                 // 0x9DAC(0x0008) (Const)
	class UAkEvent*                                    SndLandInWater;                                           // 0x9DB4(0x0008) (Const)
	class UAkEvent*                                    SndFoleyFall;                                             // 0x9DBC(0x0008) (Const)
	class UAkEvent*                                    SndEnterWaterBarrel;                                      // 0x9DC4(0x0008) (Const)
	class UAkEvent*                                    SndCrawlScrambleStart;                                    // 0x9DCC(0x0008) (Const)
	class UAkEvent*                                    SndCrawlScrambleStop;                                     // 0x9DD4(0x0008) (Const)
	class UAkEvent*                                    SndPlayerSlideStart;                                      // 0x9DDC(0x0008) (Const)
	class UAkEvent*                                    SndPlayerCleanSlideStart;                                 // 0x9DE4(0x0008) (Const)
	class UAkEvent*                                    SndPlayerCleanSlideStop;                                  // 0x9DEC(0x0008) (Const)
	struct FString                                     StateHitIntensityGroup;                                   // 0x9DF4(0x0010) (Const, NeedCtorLink)
	struct FString                                     StateHitIntensityLow;                                     // 0x9E04(0x0010) (Const, NeedCtorLink)
	struct FString                                     StateHitIntensityMed;                                     // 0x9E14(0x0010) (Const, NeedCtorLink)
	struct FString                                     StateHitIntensityHigh;                                    // 0x9E24(0x0010) (Const, NeedCtorLink)
	struct FString                                     StateMicrophoneGroup;                                     // 0x9E34(0x0010) (Const, NeedCtorLink)
	struct FString                                     StateMicrophoneOff;                                       // 0x9E44(0x0010) (Const, NeedCtorLink)
	struct FString                                     StateMicrophoneOn;                                        // 0x9E54(0x0010) (Const, NeedCtorLink)
	struct FString                                     StateCatchOutOfAirIntensityGroup;                         // 0x9E64(0x0010) (Const, NeedCtorLink)
	struct FString                                     StateCatchOutOfAirLow;                                    // 0x9E74(0x0010) (Const, NeedCtorLink)
	struct FString                                     StateCatchOutOfAirMed;                                    // 0x9E84(0x0010) (Const, NeedCtorLink)
	struct FString                                     StateCatchOutOfAirHigh;                                   // 0x9E94(0x0010) (Const, NeedCtorLink)
	struct FName                                       SwitchRaftCollisionType;                                  // 0x9EA4(0x0008) (Const)
	struct FName                                       SwitchRaftCollisionTypeLight;                             // 0x9EAC(0x0008) (Const)
	struct FName                                       SwitchRaftCollisionTypeMedium;                            // 0x9EB4(0x0008) (Const)
	struct FName                                       SwitchRaftCollisionTypeHard;                              // 0x9EBC(0x0008) (Const)
	struct FName                                       SwitchSlidingSlopeMaterial;                               // 0x9EC4(0x0008) (Const)
	struct FName                                       SwitchSlidingSlopeMaterialDirt;                           // 0x9ECC(0x0008) (Const)
	struct FName                                       SwitchSlidingSlopeMaterialLeaves;                         // 0x9ED4(0x0008) (Const)
	struct FName                                       SwitchSlidingSlopeMaterialWood;                           // 0x9EDC(0x0008) (Const)
	struct FName                                       SwitchEnterWater;                                         // 0x9EE4(0x0008) (Const)
	struct FName                                       SwitchEnterWaterTypeSoft;                                 // 0x9EEC(0x0008) (Const)
	struct FName                                       SwitchEnterWaterTypeHard;                                 // 0x9EF4(0x0008) (Const)
	struct FString                                     RTPCNameHealth;                                           // 0x9EFC(0x0010) (Const, NeedCtorLink)
	struct FString                                     RTPCNameZoom;                                             // 0x9F0C(0x0010) (Const, NeedCtorLink)
	struct FString                                     RTPCNameBatteryIntensity;                                 // 0x9F1C(0x0010) (Const, NeedCtorLink)
	struct FString                                     RTPCNamePlayerSpeed;                                      // 0x9F2C(0x0010) (Const, NeedCtorLink)
	struct FString                                     RTPCNamePlayerRotationSpeed;                              // 0x9F3C(0x0010) (Const, NeedCtorLink)
	struct FString                                     RTPCNamePlayerIdleRotationSpeed;                          // 0x9F4C(0x0010) (Const, NeedCtorLink)
	struct FString                                     RTPCNamePlayerExhausted;                                  // 0x9F5C(0x0010) (Const, NeedCtorLink)
	struct FString                                     RTPCNamePlayerOutOfAir;                                   // 0x9F6C(0x0010) (Const, NeedCtorLink)
	struct FString                                     RTPCNameRaftScrapeStrength;                               // 0x9F7C(0x0010) (Const, NeedCtorLink)
	struct FString                                     RTPCNameBarrelCoverMoveSpeed;                             // 0x9F8C(0x0010) (Const, NeedCtorLink)
	struct FString                                     RTPCNameRiverCurrent;                                     // 0x9F9C(0x0010) (Const, NeedCtorLink)
	struct FString                                     RTPCNameInnerDemonPresence;                               // 0x9FAC(0x0010) (Const, NeedCtorLink)
	struct FName                                       AnimNameJumpFromWalk;                                     // 0x9FBC(0x0008) (Const)
	struct FName                                       AnimNameJumpFromRun;                                      // 0x9FC4(0x0008) (Const)
	struct FName                                       AnimNameJumpOverFromWalk;                                 // 0x9FCC(0x0008) (Const)
	struct FName                                       AnimNameJumpOverFromRun;                                  // 0x9FD4(0x0008) (Const)
	struct FName                                       AnimNameJumpOverToGrabLedge;                              // 0x9FDC(0x0008) (Const)
	struct FName                                       AnimNameClimbUpFromWalk;                                  // 0x9FE4(0x0008) (Const)
	struct FName                                       AnimNameClimbUpFromRun;                                   // 0x9FEC(0x0008) (Const)
	struct FName                                       AnimNameClimbUpToCrouch;                                  // 0x9FF4(0x0008) (Const)
	struct FName                                       AnimNameClimbUpWall150;                                   // 0x9FFC(0x0008) (Const)
	struct FName                                       AnimNameClimbUpWall200;                                   // 0xA004(0x0008) (Const)
	struct FName                                       AnimNameClimbOverWall200;                                 // 0xA00C(0x0008) (Const)
	struct FName                                       AnimNameClimbOverWall325;                                 // 0xA014(0x0008) (Const)
	struct FName                                       AnimNameClimbUpToCrawl;                                   // 0xA01C(0x0008) (Const)
	struct FName                                       AnimNameCrouch;                                           // 0xA024(0x0008) (Const)
	struct FName                                       AnimNameUncrouch;                                         // 0xA02C(0x0008) (Const)
	struct FName                                       AnimNameLedgeHangLeftInside;                              // 0xA034(0x0008) (Const)
	struct FName                                       AnimNameLedgeHangRightInside;                             // 0xA03C(0x0008) (Const)
	struct FName                                       AnimNameLedgeHangLeftOutside;                             // 0xA044(0x0008) (Const)
	struct FName                                       AnimNameLedgeHangRightOutside;                            // 0xA04C(0x0008) (Const)
	struct FName                                       AnimNameClimbUpLedgeToCrouch;                             // 0xA054(0x0008) (Const)
	struct FName                                       AnimNameClimbUpLedgeToCrawl;                              // 0xA05C(0x0008) (Const)
	struct FName                                       AnimNameClimbUpLedgeToStand;                              // 0xA064(0x0008) (Const)
	struct FName                                       AnimNameClimbOverLedgeToFalling;                          // 0xA06C(0x0008) (Const)
	struct FName                                       AnimNameClimbOverLedgeToStand;                            // 0xA074(0x0008) (Const)
	struct FName                                       AnimNameSlideOverFromRun;                                 // 0xA07C(0x0008) (Const)
	struct FName                                       AnimNameGrabAndClimb;                                     // 0xA084(0x0008) (Const)
	struct FName                                       AnimNameGrabLedgeFromAir;                                 // 0xA08C(0x0008) (Const)
	struct FName                                       AnimNameGrabLedgeFromWalkHigh;                            // 0xA094(0x0008) (Const)
	struct FName                                       AnimNameGrabLedgeFromWalkLow;                             // 0xA09C(0x0008) (Const)
	struct FName                                       AnimNameLandingSmallStanding;                             // 0xA0A4(0x0008) (Const)
	struct FName                                       AnimNameLandingSmallCrouched;                             // 0xA0AC(0x0008) (Const)
	struct FName                                       AnimNameLandingSmallCrawled;                              // 0xA0B4(0x0008) (Const)
	struct FName                                       AnimNameLandingBeam;                                      // 0xA0BC(0x0008) (Const)
	struct FName                                       AnimNameBigLandingStanding;                               // 0xA0C4(0x0008) (Const)
	struct FName                                       AnimNameBigLandingStandingNoHand;                         // 0xA0CC(0x0008) (Const)
	struct FName                                       AnimNameBigLandingCrouched;                               // 0xA0D4(0x0008) (Const)
	struct FName                                       AnimNameBigLandingCrawled;                                // 0xA0DC(0x0008) (Const)
	struct FName                                       AnimNameEnterLedgeWalkInsideLeftPerp;                     // 0xA0E4(0x0008) (Const)
	struct FName                                       AnimNameEnterLedgeWalkInsideLeftPrl;                      // 0xA0EC(0x0008) (Const)
	struct FName                                       AnimNameEnterLedgeWalkInsideRightPerp;                    // 0xA0F4(0x0008) (Const)
	struct FName                                       AnimNameEnterLedgeWalkInsideRightPrl;                     // 0xA0FC(0x0008) (Const)
	struct FName                                       AnimNameEnterLedgeWalkOutsideLeftPerp;                    // 0xA104(0x0008) (Const)
	struct FName                                       AnimNameEnterLedgeWalkOutsideLeftPrl;                     // 0xA10C(0x0008) (Const)
	struct FName                                       AnimNameEnterLedgeWalkOutsideRightPerp;                   // 0xA114(0x0008) (Const)
	struct FName                                       AnimNameEnterLedgeWalkOutsideRightPrl;                    // 0xA11C(0x0008) (Const)
	struct FName                                       AnimNameEnterLedgeWalkBackPerp;                           // 0xA124(0x0008) (Const)
	struct FName                                       AnimNameEnterLedgeWalkLeftBeam;                           // 0xA12C(0x0008) (Const)
	struct FName                                       AnimNameEnterLedgeWalkRightBeam;                          // 0xA134(0x0008) (Const)
	struct FName                                       AnimNameLedgeWalkTransitionLeftInside;                    // 0xA13C(0x0008) (Const)
	struct FName                                       AnimNameLedgeWalkTransitionLeftOutside;                   // 0xA144(0x0008) (Const)
	struct FName                                       AnimNameLedgeWalkTransitionRightInside;                   // 0xA14C(0x0008) (Const)
	struct FName                                       AnimNameLedgeWalkTransitionRightOutside;                  // 0xA154(0x0008) (Const)
	struct FName                                       AnimNameExitLedgeWalkRightInside;                         // 0xA15C(0x0008) (Const)
	struct FName                                       AnimNameExitLedgeWalkLeftInside;                          // 0xA164(0x0008) (Const)
	struct FName                                       AnimNameExitLedgeWalkRightOutside;                        // 0xA16C(0x0008) (Const)
	struct FName                                       AnimNameExitLedgeWalkLeftOutside;                         // 0xA174(0x0008) (Const)
	struct FName                                       AnimNameExitLedgeWalkForward;                             // 0xA17C(0x0008) (Const)
	struct FName                                       AnimNameExitLedgeWalkLeftBeam;                            // 0xA184(0x0008) (Const)
	struct FName                                       AnimNameExitLedgeWalkRightBeam;                           // 0xA18C(0x0008) (Const)
	struct FName                                       AnimNameJumpFromLedgeWalk;                                // 0xA194(0x0008) (Const)
	struct FName                                       AnimNameStepOffFromLedgeWalk;                             // 0xA19C(0x0008) (Const)
	struct FName                                       AnimNameEnterSqueezeLeft;                                 // 0xA1A4(0x0008) (Const)
	struct FName                                       AnimNameEnterSqueezeRight;                                // 0xA1AC(0x0008) (Const)
	struct FName                                       AnimNameEnterSqueezeHandsDownLeft;                        // 0xA1B4(0x0008) (Const)
	struct FName                                       AnimNameEnterSqueezeHandsDownRight;                       // 0xA1BC(0x0008) (Const)
	struct FName                                       AnimNameExitSqueezeLeft;                                  // 0xA1C4(0x0008) (Const)
	struct FName                                       AnimNameExitSqueezeRight;                                 // 0xA1CC(0x0008) (Const)
	struct FName                                       AnimNameExitSqueezeHandsDownLeft;                         // 0xA1D4(0x0008) (Const)
	struct FName                                       AnimNameExitSqueezeHandsDownRight;                        // 0xA1DC(0x0008) (Const)
	struct FName                                       AnimNameAutomaticSqueeze;                                 // 0xA1E4(0x0008) (Const)
	struct FName                                       AnimNameSqueezeNormalIdle;                                // 0xA1EC(0x0008) (Const)
	struct FName                                       AnimNameSqueezeNormalLeft;                                // 0xA1F4(0x0008) (Const)
	struct FName                                       AnimNameSqueezeNormalRight;                               // 0xA1FC(0x0008) (Const)
	struct FName                                       AnimNameSqueezeBackIdle;                                  // 0xA204(0x0008) (Const)
	struct FName                                       AnimNameSqueezeBackLeft;                                  // 0xA20C(0x0008) (Const)
	struct FName                                       AnimNameSqueezeBackRight;                                 // 0xA214(0x0008) (Const)
	struct FName                                       AnimNameEnterLadderGroundStraight;                        // 0xA21C(0x0008) (Const)
	struct FName                                       AnimNameEnterLadderGround45Left;                          // 0xA224(0x0008) (Const)
	struct FName                                       AnimNameEnterLadderGround45Right;                         // 0xA22C(0x0008) (Const)
	struct FName                                       AnimNameEnterLadderAboveForward;                          // 0xA234(0x0008) (Const)
	struct FName                                       AnimNameEnterLadderAboveBackward;                         // 0xA23C(0x0008) (Const)
	struct FName                                       AnimNameEnterLadderAboveFloorForward;                     // 0xA244(0x0008) (Const)
	struct FName                                       AnimNameEnterLadderAboveFloorBackward;                    // 0xA24C(0x0008) (Const)
	struct FName                                       AnimNameExitLadderOnTopLH;                                // 0xA254(0x0008) (Const)
	struct FName                                       AnimNameExitLadderOnTopRH;                                // 0xA25C(0x0008) (Const)
	struct FName                                       AnimNameExitLadderOnTopFloorLH;                           // 0xA264(0x0008) (Const)
	struct FName                                       AnimNameExitLadderOnTopFloorRH;                           // 0xA26C(0x0008) (Const)
	struct FName                                       AnimNamePickupObject_h40v70;                              // 0xA274(0x0008) (Const)
	struct FName                                       AnimNamePickupObject_h40v140;                             // 0xA27C(0x0008) (Const)
	struct FName                                       AnimNamePickupObject_h85v70;                              // 0xA284(0x0008) (Const)
	struct FName                                       AnimNamePickupObject_h85v140;                             // 0xA28C(0x0008) (Const)
	struct FName                                       AnimNamePickupObject_h62v105;                             // 0xA294(0x0008) (Const)
	struct FName                                       AnimNamePickupObjectCrouched_h30vm10;                     // 0xA29C(0x0008) (Const)
	struct FName                                       AnimNamePickupObjectCrouched_h60vm10;                     // 0xA2A4(0x0008) (Const)
	struct FName                                       AnimNamePickupObjectCrouched_h45v35;                      // 0xA2AC(0x0008) (Const)
	struct FName                                       AnimNamePickupObjectCrouched_h30v60;                      // 0xA2B4(0x0008) (Const)
	struct FName                                       AnimNamePickupObjectCrouched_h60v60;                      // 0xA2BC(0x0008) (Const)
	struct FName                                       AnimNamePickupObjectCrawling_h40vm10;                     // 0xA2C4(0x0008) (Const)
	struct FName                                       AnimNamePickupObjectCrawling_h40v30;                      // 0xA2CC(0x0008) (Const)
	struct FName                                       AnimNamePickupObjectCrawling_h60v30;                      // 0xA2D4(0x0008) (Const)
	struct FName                                       AnimNamePickupObjectCrawling_h60vm10;                     // 0xA2DC(0x0008) (Const)
	struct FName                                       AnimNamePickupObjectCrawling_h50v10;                      // 0xA2E4(0x0008) (Const)
	struct FName                                       AnimNamePickupDoc_h40v70;                                 // 0xA2EC(0x0008) (Const)
	struct FName                                       AnimNamePickupDoc_h40v140;                                // 0xA2F4(0x0008) (Const)
	struct FName                                       AnimNamePickupDoc_h85v70;                                 // 0xA2FC(0x0008) (Const)
	struct FName                                       AnimNamePickupDoc_h85v140;                                // 0xA304(0x0008) (Const)
	struct FName                                       AnimNamePickupDoc_h62v105;                                // 0xA30C(0x0008) (Const)
	struct FName                                       AnimNamePickupDocCrouched_h30vm10;                        // 0xA314(0x0008) (Const)
	struct FName                                       AnimNamePickupDocCrouched_h60vm10;                        // 0xA31C(0x0008) (Const)
	struct FName                                       AnimNamePickupDocCrouched_h45v35;                         // 0xA324(0x0008) (Const)
	struct FName                                       AnimNamePickupDocCrouched_h30v60;                         // 0xA32C(0x0008) (Const)
	struct FName                                       AnimNamePickupDocCrouched_h60v60;                         // 0xA334(0x0008) (Const)
	struct FName                                       AnimNamePickupDocCrawling_h40vm10;                        // 0xA33C(0x0008) (Const)
	struct FName                                       AnimNamePickupDocCrawling_h40v30;                         // 0xA344(0x0008) (Const)
	struct FName                                       AnimNamePickupDocCrawling_h60v30;                         // 0xA34C(0x0008) (Const)
	struct FName                                       AnimNamePickupDocCrawling_h60vm10;                        // 0xA354(0x0008) (Const)
	struct FName                                       AnimNamePickupDocCrawling_h50v10;                         // 0xA35C(0x0008) (Const)
	struct FName                                       AnimNamePickupBandage_h40v70;                             // 0xA364(0x0008) (Const)
	struct FName                                       AnimNamePickupBandage_h40v140;                            // 0xA36C(0x0008) (Const)
	struct FName                                       AnimNamePickupBandage_h85v70;                             // 0xA374(0x0008) (Const)
	struct FName                                       AnimNamePickupBandage_h85v140;                            // 0xA37C(0x0008) (Const)
	struct FName                                       AnimNamePickupBandage_h62v105;                            // 0xA384(0x0008) (Const)
	struct FName                                       AnimNamePickupBandageCrouched_h30vm10;                    // 0xA38C(0x0008) (Const)
	struct FName                                       AnimNamePickupBandageCrouched_h60vm10;                    // 0xA394(0x0008) (Const)
	struct FName                                       AnimNamePickupBandageCrouched_h45v35;                     // 0xA39C(0x0008) (Const)
	struct FName                                       AnimNamePickupBandageCrouched_h30v60;                     // 0xA3A4(0x0008) (Const)
	struct FName                                       AnimNamePickupBandageCrouched_h60v60;                     // 0xA3AC(0x0008) (Const)
	struct FName                                       AnimNamePickupBandageCrawling_h40vm10;                    // 0xA3B4(0x0008) (Const)
	struct FName                                       AnimNamePickupBandageCrawling_h40v30;                     // 0xA3BC(0x0008) (Const)
	struct FName                                       AnimNamePickupBandageCrawling_h60v30;                     // 0xA3C4(0x0008) (Const)
	struct FName                                       AnimNamePickupBandageCrawling_h60vm10;                    // 0xA3CC(0x0008) (Const)
	struct FName                                       AnimNamePickupBandageCrawling_h50v10;                     // 0xA3D4(0x0008) (Const)
	struct FName                                       AnimNamePickupPaperForSnapShot;                           // 0xA3DC(0x0008) (Const)
	struct FName                                       AnimNameDropDownPaperFromSnapShot;                        // 0xA3E4(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorLeftFront;                               // 0xA3EC(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorLeftSide;                                // 0xA3F4(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorLeftBack;                                // 0xA3FC(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorLeftInside;                              // 0xA404(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorRightFront;                              // 0xA40C(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorRightSide;                               // 0xA414(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorRightBack;                               // 0xA41C(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorRightInside;                             // 0xA424(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorLeftFrontSlow;                           // 0xA42C(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorLeftSideSlow;                            // 0xA434(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorLeftBackSlow;                            // 0xA43C(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorLeftInsideSlow;                          // 0xA444(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorRightFrontSlow;                          // 0xA44C(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorRightSideSlow;                           // 0xA454(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorRightBackSlow;                           // 0xA45C(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorRightInsideSlow;                         // 0xA464(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenPullLeft;                                 // 0xA46C(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenPullRight;                                // 0xA474(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenPushLeft;                                 // 0xA47C(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenPushRight;                                // 0xA484(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenCrouchedPullLeft;                         // 0xA48C(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenCrouchedPullRight;                        // 0xA494(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenCrouchedPushLeft;                         // 0xA49C(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenCrouchedPushRight;                        // 0xA4A4(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenCrawledPullLeft;                          // 0xA4AC(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenCrawledPullRight;                         // 0xA4B4(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenCrawledPushLeft;                          // 0xA4BC(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenCrawledPushRight;                         // 0xA4C4(0x0008) (Const)
	struct FName                                       AnimNameDoorRunThroughLeft;                               // 0xA4CC(0x0008) (Const)
	struct FName                                       AnimNameDoorRunThroughRight;                              // 0xA4D4(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenInsidePushLeft;                           // 0xA4DC(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenInsidePushRight;                          // 0xA4E4(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenOneWayLeft;                               // 0xA4EC(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenOneWayRight;                              // 0xA4F4(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenAutoClosePullLeft;                        // 0xA4FC(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenAutoClosePullRight;                       // 0xA504(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenAutoClosePushLeft;                        // 0xA50C(0x0008) (Const)
	struct FName                                       AnimNameDoorOpenAutoClosePushRight;                       // 0xA514(0x0008) (Const)
	struct FName                                       AnimNameDoorAccessLeft;                                   // 0xA51C(0x0008) (Const)
	struct FName                                       AnimNameDoorAccessRight;                                  // 0xA524(0x0008) (Const)
	struct FName                                       AnimNameDoorAccessLeftPull15;                             // 0xA52C(0x0008) (Const)
	struct FName                                       AnimNameDoorAccessRightPull15;                            // 0xA534(0x0008) (Const)
	struct FName                                       AnimNameDoorAccessLeftPush15;                             // 0xA53C(0x0008) (Const)
	struct FName                                       AnimNameDoorAccessRightPush15;                            // 0xA544(0x0008) (Const)
	struct FName                                       AnimNameDoorLockedLeft;                                   // 0xA54C(0x0008) (Const)
	struct FName                                       AnimNameDoorLockedRight;                                  // 0xA554(0x0008) (Const)
	struct FName                                       AnimNameUnlockDoorLeft;                                   // 0xA55C(0x0008) (Const)
	struct FName                                       AnimNameUnlockDoorRight;                                  // 0xA564(0x0008) (Const)
	struct FName                                       AnimNameUnlockAndOpenDoorLeft;                            // 0xA56C(0x0008) (Const)
	struct FName                                       AnimNameUnlockAndOpenDoorRight;                           // 0xA574(0x0008) (Const)
	struct FName                                       AnimNameLockDoorLeft;                                     // 0xA57C(0x0008) (Const)
	struct FName                                       AnimNameLockDoorRight;                                    // 0xA584(0x0008) (Const)
	struct FName                                       AnimNameLockerOpenStraight;                               // 0xA58C(0x0008) (Const)
	struct FName                                       AnimNameLockerOpen45Left;                                 // 0xA594(0x0008) (Const)
	struct FName                                       AnimNameLockerOpen45Right;                                // 0xA59C(0x0008) (Const)
	struct FName                                       AnimNameHideInLocker;                                     // 0xA5A4(0x0008) (Const)
	struct FName                                       AnimNameGrabFromSqueezeLeft;                              // 0xA5AC(0x0008) (Const)
	struct FName                                       AnimNameGrabFromSqueezeRight;                             // 0xA5B4(0x0008) (Const)
	struct FName                                       AnimNameEnterBedLeft;                                     // 0xA5BC(0x0008) (Const)
	struct FName                                       AnimNameEnterBedRight;                                    // 0xA5C4(0x0008) (Const)
	struct FName                                       AnimNameEnterBedLeftFromStand;                            // 0xA5CC(0x0008) (Const)
	struct FName                                       AnimNameEnterBedRightFromStand;                           // 0xA5D4(0x0008) (Const)
	struct FName                                       AnimNameSlideUnderBedLeft;                                // 0xA5DC(0x0008) (Const)
	struct FName                                       AnimNameSlideUnderBedRight;                               // 0xA5E4(0x0008) (Const)
	struct FName                                       AnimNameExitBedLeft;                                      // 0xA5EC(0x0008) (Const)
	struct FName                                       AnimNameExitBedRight;                                     // 0xA5F4(0x0008) (Const)
	struct FName                                       AnimNameExitBedLeftToCrouch;                              // 0xA5FC(0x0008) (Const)
	struct FName                                       AnimNameExitBedRightToCrouch;                             // 0xA604(0x0008) (Const)
	struct FName                                       AnimNameEnterPushObjectLeft;                              // 0xA60C(0x0008) (Const)
	struct FName                                       AnimNameEnterPushObjectRight;                             // 0xA614(0x0008) (Const)
	struct FName                                       AnimNameEnterPushObjectLow;                               // 0xA61C(0x0008) (Const)
	struct FName                                       AnimNameEnterPushBarnDoor;                                // 0xA624(0x0008) (Const)
	struct FName                                       AnimNameEnterPushProjector;                               // 0xA62C(0x0008) (Const)
	struct FName                                       AnimNameExitPushObjectLeft;                               // 0xA634(0x0008) (Const)
	struct FName                                       AnimNameExitPushObjectRight;                              // 0xA63C(0x0008) (Const)
	struct FName                                       AnimNameExitPushObjectLow;                                // 0xA644(0x0008) (Const)
	struct FName                                       AnimNameExitPushBarnDoor;                                 // 0xA64C(0x0008) (Const)
	struct FName                                       AnimNameExitPushProjector;                                // 0xA654(0x0008) (Const)
	struct FName                                       AnimNameRaiseCamcorder;                                   // 0xA65C(0x0008) (Const)
	struct FName                                       AnimNameLowerCamcorder;                                   // 0xA664(0x0008) (Const)
	struct FName                                       AnimNameRaiseCamcorderBed;                                // 0xA66C(0x0008) (Const)
	struct FName                                       AnimNameLowerCamcorderBed;                                // 0xA674(0x0008) (Const)
	struct FName                                       AnimNameRaiseCamcorderCrouched;                           // 0xA67C(0x0008) (Const)
	struct FName                                       AnimNameLowerCamcorderCrouched;                           // 0xA684(0x0008) (Const)
	struct FName                                       AnimNameRaiseCamcorderCrawled;                            // 0xA68C(0x0008) (Const)
	struct FName                                       AnimNameLowerCamcorderCrawled;                            // 0xA694(0x0008) (Const)
	struct FName                                       AnimNameReloadBatteries;                                  // 0xA69C(0x0008) (Const)
	struct FName                                       AnimNameReloadBatteriesInactive;                          // 0xA6A4(0x0008) (Const)
	struct FName                                       AnimNameReloadBatteriesCrouched;                          // 0xA6AC(0x0008) (Const)
	struct FName                                       AnimNameReloadBatteriesCrouchedInactive;                  // 0xA6B4(0x0008) (Const)
	struct FName                                       AnimNameReloadBatteriesCrawled;                           // 0xA6BC(0x0008) (Const)
	struct FName                                       AnimNameReloadBatteriesCrawledInactive;                   // 0xA6C4(0x0008) (Const)
	struct FName                                       AnimNameReloadBatteriesBed;                               // 0xA6CC(0x0008) (Const)
	struct FName                                       AnimNameReloadBatteriesBedInactive;                       // 0xA6D4(0x0008) (Const)
	struct FName                                       AnimNameReloadBatteriesSqueeze;                           // 0xA6DC(0x0008) (Const)
	struct FName                                       AnimNameReloadBatteriesSqueezeInactive;                   // 0xA6E4(0x0008) (Const)
	struct FName                                       AnimNameReloadBatteriesSmallSpace;                        // 0xA6EC(0x0008) (Const)
	struct FName                                       AnimNameReloadBatteriesSmallSpaceInactive;                // 0xA6F4(0x0008) (Const)
	struct FName                                       AnimNameHitReactionFwd;                                   // 0xA6FC(0x0008) (Const)
	struct FName                                       AnimNameHitReactionBwd;                                   // 0xA704(0x0008) (Const)
	struct FName                                       AnimNameHitReactionLeft;                                  // 0xA70C(0x0008) (Const)
	struct FName                                       AnimNameHitReactionRight;                                 // 0xA714(0x0008) (Const)
	struct FName                                       AnimNameHitReactionCrouchedFwd;                           // 0xA71C(0x0008) (Const)
	struct FName                                       AnimNameHitReactionCrouchedBwd;                           // 0xA724(0x0008) (Const)
	struct FName                                       AnimNameHitReactionCrouchedLeft;                          // 0xA72C(0x0008) (Const)
	struct FName                                       AnimNameHitReactionCrouchedRight;                         // 0xA734(0x0008) (Const)
	struct FName                                       AnimNameWallContactLeftHard;                              // 0xA73C(0x0008) (Const)
	struct FName                                       AnimNameWallContactLeftSoft;                              // 0xA744(0x0008) (Const)
	struct FName                                       AnimNameWallContactRightHard;                             // 0xA74C(0x0008) (Const)
	struct FName                                       AnimNameWallContactRightSoft;                             // 0xA754(0x0008) (Const)
	struct FName                                       AnimNameWallContactCrouchedLeftHard;                      // 0xA75C(0x0008) (Const)
	struct FName                                       AnimNameWallContactCrouchedLeftSoft;                      // 0xA764(0x0008) (Const)
	struct FName                                       AnimNameWallContactCrouchedRightHard;                     // 0xA76C(0x0008) (Const)
	struct FName                                       AnimNameWallContactCrouchedRightSoft;                     // 0xA774(0x0008) (Const)
	struct FName                                       AnimNameContextualLeanCrouchLeftHard;                     // 0xA77C(0x0008) (Const)
	struct FName                                       AnimNameContextualLeanCrouchLeftSoft;                     // 0xA784(0x0008) (Const)
	struct FName                                       AnimNameContextualLeanCrouchRightHard;                    // 0xA78C(0x0008) (Const)
	struct FName                                       AnimNameContextualLeanCrouchRightSoft;                    // 0xA794(0x0008) (Const)
	struct FName                                       AnimNameContextualLeanUncrouchLeftHard;                   // 0xA79C(0x0008) (Const)
	struct FName                                       AnimNameContextualLeanUncrouchLeftSoft;                   // 0xA7A4(0x0008) (Const)
	struct FName                                       AnimNameContextualLeanUncrouchRightHard;                  // 0xA7AC(0x0008) (Const)
	struct FName                                       AnimNameContextualLeanUncrouchRightSoft;                  // 0xA7B4(0x0008) (Const)
	struct FName                                       AnimNameEnterCornerPeekLeftHard;                          // 0xA7BC(0x0008) (Const)
	struct FName                                       AnimNameEnterCornerPeekLeftSoft;                          // 0xA7C4(0x0008) (Const)
	struct FName                                       AnimNameEnterCornerPeekRightHard;                         // 0xA7CC(0x0008) (Const)
	struct FName                                       AnimNameEnterCornerPeekRightSoft;                         // 0xA7D4(0x0008) (Const)
	struct FName                                       AnimNameExitCornerPeekLeftHard;                           // 0xA7DC(0x0008) (Const)
	struct FName                                       AnimNameExitCornerPeekLeftSoft;                           // 0xA7E4(0x0008) (Const)
	struct FName                                       AnimNameExitCornerPeekRightHard;                          // 0xA7EC(0x0008) (Const)
	struct FName                                       AnimNameExitCornerPeekRightSoft;                          // 0xA7F4(0x0008) (Const)
	struct FName                                       AnimNameExitCornerPeekForwardLeftHard;                    // 0xA7FC(0x0008) (Const)
	struct FName                                       AnimNameExitCornerPeekForwardLeftSoft;                    // 0xA804(0x0008) (Const)
	struct FName                                       AnimNameExitCornerPeekForwardRightHard;                   // 0xA80C(0x0008) (Const)
	struct FName                                       AnimNameExitCornerPeekForwardRightSoft;                   // 0xA814(0x0008) (Const)
	struct FName                                       AnimNameExitCornerPeekCrouchedForwardLeftHard;            // 0xA81C(0x0008) (Const)
	struct FName                                       AnimNameExitCornerPeekCrouchedForwardLeftSoft;            // 0xA824(0x0008) (Const)
	struct FName                                       AnimNameExitCornerPeekCrouchedForwardRightHard;           // 0xA82C(0x0008) (Const)
	struct FName                                       AnimNameExitCornerPeekCrouchedForwardRightSoft;           // 0xA834(0x0008) (Const)
	struct FName                                       AnimNameCornerTransitionFromLeft;                         // 0xA83C(0x0008) (Const)
	struct FName                                       AnimNameCornerTransitionFromRight;                        // 0xA844(0x0008) (Const)
	struct FName                                       AnimNameGrabFromBedLeft;                                  // 0xA84C(0x0008) (Const)
	struct FName                                       AnimNameGrabFromBedRight;                                 // 0xA854(0x0008) (Const)
	struct FName                                       AnimNameGrabFromLocker;                                   // 0xA85C(0x0008) (Const)
	struct FName                                       AnimNameGrabUnder;                                        // 0xA864(0x0008) (Const)
	struct FName                                       AnimNameGrabUnderLeft90;                                  // 0xA86C(0x0008) (Const)
	struct FName                                       AnimNameGrabUnderLeft180;                                 // 0xA874(0x0008) (Const)
	struct FName                                       AnimNameGrabUnderRight90;                                 // 0xA87C(0x0008) (Const)
	struct FName                                       AnimNameGrabUnderRight180;                                // 0xA884(0x0008) (Const)
	struct FName                                       AnimNameGrabUnderMartha;                                  // 0xA88C(0x0008) (Const)
	struct FName                                       AnimNameGrabUnderMarthaL90;                               // 0xA894(0x0008) (Const)
	struct FName                                       AnimNameGrabUnderMarthaL180;                              // 0xA89C(0x0008) (Const)
	struct FName                                       AnimNameGrabUnderMarthaR90;                               // 0xA8A4(0x0008) (Const)
	struct FName                                       AnimNameGrabUnderMarthaR180;                              // 0xA8AC(0x0008) (Const)
	struct FName                                       AnimNameGrabUnderNic;                                     // 0xA8B4(0x0008) (Const)
	struct FName                                       AnimNamePushawayLeft;                                     // 0xA8BC(0x0008) (Const)
	struct FName                                       AnimNamePushawayRight;                                    // 0xA8C4(0x0008) (Const)
	struct FName                                       AnimNameFall2HighDeath;                                   // 0xA8CC(0x0008) (Const)
	struct FName                                       AnimNameFallDeath;                                        // 0xA8D4(0x0008) (Const)
	struct FName                                       AnimNameGenericDeath;                                     // 0xA8DC(0x0008) (Const)
	struct FName                                       AnimNameHiddenInWaterBarrelDeath;                         // 0xA8E4(0x0008) (Const)
	struct FName                                       AnimNameHiddenUnderwaterDeath;                            // 0xA8EC(0x0008) (Const)
	struct FName                                       AnimNameHiddenUnderShallowWaterDeath;                     // 0xA8F4(0x0008) (Const)
	struct FName                                       AnimNameSwimmingDeath;                                    // 0xA8FC(0x0008) (Const)
	struct FName                                       AnimNameCrawlingDeath;                                    // 0xA904(0x0008) (Const)
	struct FName                                       AnimNameFatalityNormalFront;                              // 0xA90C(0x0008) (Const)
	struct FName                                       AnimNameFatalityNormalBack;                               // 0xA914(0x0008) (Const)
	struct FName                                       AnimNameFatalityChokeFront;                               // 0xA91C(0x0008) (Const)
	struct FName                                       AnimNameFatalityChokeLeft;                                // 0xA924(0x0008) (Const)
	struct FName                                       AnimNameFatalityChokeRight;                               // 0xA92C(0x0008) (Const)
	struct FName                                       AnimNameFatalityHereticFront;                             // 0xA934(0x0008) (Const)
	struct FName                                       AnimNameFatalityHereticBack;                              // 0xA93C(0x0008) (Const)
	struct FName                                       AnimNameFatalityInnerDemonFront;                          // 0xA944(0x0008) (Const)
	struct FName                                       AnimNameDodgeStandLeft;                                   // 0xA94C(0x0008) (Const)
	struct FName                                       AnimNameDodgeStandRight;                                  // 0xA954(0x0008) (Const)
	struct FName                                       AnimNameDodgeStandBack;                                   // 0xA95C(0x0008) (Const)
	struct FName                                       AnimNameDodgeRunLeft;                                     // 0xA964(0x0008) (Const)
	struct FName                                       AnimNameDodgeRunRight;                                    // 0xA96C(0x0008) (Const)
	struct FName                                       AnimNameDodgeRunBack;                                     // 0xA974(0x0008) (Const)
	struct FName                                       AnimNameSlideToCrouch;                                    // 0xA97C(0x0008) (Const)
	struct FName                                       AnimNameSlideToLedge;                                     // 0xA984(0x0008) (Const)
	struct FName                                       AnimNameSlideToCrawl;                                     // 0xA98C(0x0008) (Const)
	struct FName                                       AnimNameEnterCrawlFromStand;                              // 0xA994(0x0008) (Const)
	struct FName                                       AnimNameEnterCrawlFromCrouch;                             // 0xA99C(0x0008) (Const)
	struct FName                                       AnimNameExitCrawlToStand;                                 // 0xA9A4(0x0008) (Const)
	struct FName                                       AnimNameExitCrawlToCrouch;                                // 0xA9AC(0x0008) (Const)
	struct FName                                       AnimNameDeathGripEnterBack;                               // 0xA9B4(0x0008) (Const)
	struct FName                                       AnimNameDeathGripEnterFront;                              // 0xA9BC(0x0008) (Const)
	struct FName                                       AnimNameDeathGripDeath;                                   // 0xA9C4(0x0008) (Const)
	struct FName                                       AnimNameDeathGripEscape;                                  // 0xA9CC(0x0008) (Const)
	struct FName                                       AnimNameDeathGripStruggle;                                // 0xA9D4(0x0008) (Const)
	struct FName                                       AnimNameDeathGripShake;                                   // 0xA9DC(0x0008) (Const)
	struct FName                                       AnimNameDeathGripCrawlerEnterR90;                         // 0xA9E4(0x0008) (Const)
	struct FName                                       AnimNameDeathGripCrawlerEnterL45;                         // 0xA9EC(0x0008) (Const)
	struct FName                                       AnimNameDeathGripCrawlerEnterL135;                        // 0xA9F4(0x0008) (Const)
	struct FName                                       AnimNameDeathGripCrawlerDeath;                            // 0xA9FC(0x0008) (Const)
	struct FName                                       AnimNameDeathGripCrawlerEscape;                           // 0xAA04(0x0008) (Const)
	struct FName                                       AnimNameDeathGripCrawlerEscapeBack;                       // 0xAA0C(0x0008) (Const)
	struct FName                                       AnimNameDeathGripCrawlerStruggle;                         // 0xAA14(0x0008) (Const)
	struct FName                                       AnimNameDeathGripCrawlerShake;                            // 0xAA1C(0x0008) (Const)
	struct FName                                       AnimNameDeathGripCrawler2Enter;                           // 0xAA24(0x0008) (Const)
	struct FName                                       AnimNameDeathGripCrawler2EnterBack;                       // 0xAA2C(0x0008) (Const)
	struct FName                                       AnimNameDeathGripCrawler2Death;                           // 0xAA34(0x0008) (Const)
	struct FName                                       AnimNameDeathGripCrawler2EscapeFront;                     // 0xAA3C(0x0008) (Const)
	struct FName                                       AnimNameDeathGripCrawler2EscapeBack;                      // 0xAA44(0x0008) (Const)
	struct FName                                       AnimNameDeathGripCrawler2Struggle;                        // 0xAA4C(0x0008) (Const)
	struct FName                                       AnimNameDeathGripCrawler2Shake;                           // 0xAA54(0x0008) (Const)
	struct FName                                       AnimNameMultiKilled;                                      // 0xAA5C(0x0008) (Const)
	struct FName                                       AnimNameMarthaKillFront;                                  // 0xAA64(0x0008) (Const)
	struct FName                                       AnimNameMarthaKillBack;                                   // 0xAA6C(0x0008) (Const)
	struct FName                                       AnimNameCrawlerKillFront;                                 // 0xAA74(0x0008) (Const)
	struct FName                                       AnimNameCrawlerKillBack;                                  // 0xAA7C(0x0008) (Const)
	struct FName                                       AnimNameNicAndLairdKillFront;                             // 0xAA84(0x0008) (Const)
	struct FName                                       AnimNameNicAndLairdKillBack;                              // 0xAA8C(0x0008) (Const)
	struct FName                                       AnimNameOpenWindowFull;                                   // 0xAA94(0x0008) (Const)
	struct FName                                       AnimNameOpenWindowPartial;                                // 0xAA9C(0x0008) (Const)
	struct FName                                       AnimNameCloseWindow;                                      // 0xAAA4(0x0008) (Const)
	struct FName                                       AnimNameEnterBasementToStand;                             // 0xAAAC(0x0008) (Const)
	struct FName                                       AnimNameEnterBasementToCrouch;                            // 0xAAB4(0x0008) (Const)
	struct FName                                       AnimNameSlopeSoftFeetLanding;                             // 0xAABC(0x0008) (Const)
	struct FName                                       AnimNameSlopeHardFeetLanding;                             // 0xAAC4(0x0008) (Const)
	struct FName                                       AnimNameSlopeShortLanding;                                // 0xAACC(0x0008) (Const)
	struct FName                                       AnimNameSlopeLoseGlasses;                                 // 0xAAD4(0x0008) (Const)
	struct FName                                       AnimNameTripFallForward;                                  // 0xAADC(0x0008) (Const)
	struct FName                                       AnimNameTripFallBack;                                     // 0xAAE4(0x0008) (Const)
	struct FName                                       AnimNameTripFallRight;                                    // 0xAAEC(0x0008) (Const)
	struct FName                                       AnimNameTripFallLeft;                                     // 0xAAF4(0x0008) (Const)
	struct FName                                       AnimNameTripDodgeForward;                                 // 0xAAFC(0x0008) (Const)
	struct FName                                       AnimNameTripDodgeBack;                                    // 0xAB04(0x0008) (Const)
	struct FName                                       AnimNameTripDodgeRight;                                   // 0xAB0C(0x0008) (Const)
	struct FName                                       AnimNameTripDodgeLeft;                                    // 0xAB14(0x0008) (Const)
	struct FName                                       AnimNameTripWalkHurtForward;                              // 0xAB1C(0x0008) (Const)
	struct FName                                       AnimNameTripWalkHurtBack;                                 // 0xAB24(0x0008) (Const)
	struct FName                                       AnimNameTripWalkHurtRight;                                // 0xAB2C(0x0008) (Const)
	struct FName                                       AnimNameTripWalkHurtLeft;                                 // 0xAB34(0x0008) (Const)
	struct FName                                       AnimNameTripCrouchHurtForward;                            // 0xAB3C(0x0008) (Const)
	struct FName                                       AnimNameTripCrouchHurtBack;                               // 0xAB44(0x0008) (Const)
	struct FName                                       AnimNameTripCrouchHurtRight;                              // 0xAB4C(0x0008) (Const)
	struct FName                                       AnimNameTripCrouchHurtLeft;                               // 0xAB54(0x0008) (Const)
	struct FName                                       AnimNameTripCrawlHurtForward;                             // 0xAB5C(0x0008) (Const)
	struct FName                                       AnimNameTripCrawlHurtBack;                                // 0xAB64(0x0008) (Const)
	struct FName                                       AnimNameTripCrawlHurtRight;                               // 0xAB6C(0x0008) (Const)
	struct FName                                       AnimNameTripCrawlHurtLeft;                                // 0xAB74(0x0008) (Const)
	struct FName                                       AnimNameEnterHidingBarrel;                                // 0xAB7C(0x0008) (Const)
	struct FName                                       AnimNameEnterHidingBarrelWithCover;                       // 0xAB84(0x0008) (Const)
	struct FName                                       AnimNameExitHidingBarrel;                                 // 0xAB8C(0x0008) (Const)
	struct FName                                       AnimNameExitHidingBarrelWithCover;                        // 0xAB94(0x0008) (Const)
	struct FName                                       AnimNameEnterWardrobeInsideLeft;                          // 0xAB9C(0x0008) (Const)
	struct FName                                       AnimNameEnterWardrobeInsideRight;                         // 0xABA4(0x0008) (Const)
	struct FName                                       AnimNameExitWardrobeInsideLeft;                           // 0xABAC(0x0008) (Const)
	struct FName                                       AnimNameExitWardrobeInsideRight;                          // 0xABB4(0x0008) (Const)
	struct FName                                       AnimNameGrabbedFromBarrelGeneric;                         // 0xABBC(0x0008) (Const)
	struct FName                                       AnimNameGrabbedFromBarrelMartha;                          // 0xABC4(0x0008) (Const)
	struct FName                                       AnimNameGrabbedFromWardrobeLeftGeneric;                   // 0xABCC(0x0008) (Const)
	struct FName                                       AnimNameGrabbedFromWardrobeRightGeneric;                  // 0xABD4(0x0008) (Const)
	struct FName                                       AnimNameGrabbedFromWardrobeLeftGenericShort;              // 0xABDC(0x0008) (Const)
	struct FName                                       AnimNameGrabbedFromWardrobeRightGenericShort;             // 0xABE4(0x0008) (Const)
	struct FName                                       AnimNameAttackedCrawlingFront;                            // 0xABEC(0x0008) (Const)
	struct FName                                       AnimNameAttackedCrawlingLeft;                             // 0xABF4(0x0008) (Const)
	struct FName                                       AnimNameAttackedCrawlingRight;                            // 0xABFC(0x0008) (Const)
	struct FName                                       AnimNameGrabbedUnderwaterShallowFront;                    // 0xAC04(0x0008) (Const)
	struct FName                                       AnimNameGrabbedUnderwaterShallowBack;                     // 0xAC0C(0x0008) (Const)
	struct FName                                       AnimNameGrabbedUnderwaterDeepFront;                       // 0xAC14(0x0008) (Const)
	struct FName                                       AnimNameGrabbedUnderwaterDeepBack;                        // 0xAC1C(0x0008) (Const)
	struct FName                                       AnimNameSlideUnder;                                       // 0xAC24(0x0008) (Const)
	struct FName                                       AnimNameBellySlideUnder;                                  // 0xAC2C(0x0008) (Const)
	struct FName                                       AnimNameCrouchUnderwater;                                 // 0xAC34(0x0008) (Const)
	struct FName                                       AnimNameUncrouchUnderwater;                               // 0xAC3C(0x0008) (Const)
	struct FName                                       AnimNameUncrouchUnderwaterToCrouch;                       // 0xAC44(0x0008) (Const)
	struct FName                                       AnimNameCrouchUnderShallowWater;                          // 0xAC4C(0x0008) (Const)
	struct FName                                       AnimNameCrouchUnderShallowWaterFromCrouch;                // 0xAC54(0x0008) (Const)
	struct FName                                       AnimNameUncrouchUnderShallowWater;                        // 0xAC5C(0x0008) (Const)
	struct FName                                       AnimNameUncrouchUnderShallowWaterToCrouch;                // 0xAC64(0x0008) (Const)
	struct FName                                       AnimNameSlidingSlopeEntryWalkForward;                     // 0xAC6C(0x0008) (Const)
	struct FName                                       AnimNameSlidingSlopeEntryWalkBackward;                    // 0xAC74(0x0008) (Const)
	struct FName                                       AnimNameSlidingSlopeEntryRunForward;                      // 0xAC7C(0x0008) (Const)
	struct FName                                       AnimNameSlidingSlopeEntryRunBackward;                     // 0xAC84(0x0008) (Const)
	struct FName                                       AnimNameSlidingSlopeEntryAirForward;                      // 0xAC8C(0x0008) (Const)
	struct FName                                       AnimNameSlidingSlopeEntryAirBackward;                     // 0xAC94(0x0008) (Const)
	struct FName                                       AnimNameSlidingSlopeEntryCrouchForward;                   // 0xAC9C(0x0008) (Const)
	struct FName                                       AnimNameSlidingSlopeEntryCrouchBackward;                  // 0xACA4(0x0008) (Const)
	struct FName                                       AnimNameSlidingSlopeEntryCrawlForward;                    // 0xACAC(0x0008) (Const)
	struct FName                                       AnimNameSlidingSlopeEntryCrawlBackward;                   // 0xACB4(0x0008) (Const)
	struct FName                                       AnimNameRaftCollisionFront;                               // 0xACBC(0x0008) (Const)
	struct FName                                       AnimNameRaftCollisionSideRight;                           // 0xACC4(0x0008) (Const)
	struct FName                                       AnimNameRaftCollisionSideLeft;                            // 0xACCC(0x0008) (Const)
	struct FName                                       AnimNameRaftNormalIdle;                                   // 0xACD4(0x0008) (Const)
	struct FName                                       AnimNameRaftBrokenIdle;                                   // 0xACDC(0x0008) (Const)
	struct FName                                       AnimNameRaftRockCrash;                                    // 0xACE4(0x0008) (Const)
	struct FName                                       AnimNamePutGlassesOn;                                     // 0xACEC(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnIdle;                                 // 0xACF4(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnWalk;                                 // 0xACFC(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnRun;                                  // 0xAD04(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnBackwards;                            // 0xAD0C(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnTurning;                              // 0xAD14(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnHurting;                              // 0xAD1C(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnWalkStrafeL;                          // 0xAD24(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnWalkStrafeR;                          // 0xAD2C(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnRunStrafeL;                           // 0xAD34(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnRunStrafeR;                           // 0xAD3C(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnIdleCAM;                              // 0xAD44(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnWalkCAM;                              // 0xAD4C(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnRunCAM;                               // 0xAD54(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnBackwardsCAM;                         // 0xAD5C(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnTurningCAM;                           // 0xAD64(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnHurtingCAM;                           // 0xAD6C(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnWalkStrafeLCAM;                       // 0xAD74(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnWalkStrafeRCAM;                       // 0xAD7C(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnRunStrafeLCAM;                        // 0xAD84(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnRunStrafeRCAM;                        // 0xAD8C(0x0008) (Const)
	struct FName                                       AnimNameLeadByJessicaIdle;                                // 0xAD94(0x0008) (Const)
	struct FName                                       AnimNameLeadByJessicaWalk;                                // 0xAD9C(0x0008) (Const)
	struct FName                                       AnimNameLeadByJessicaRun;                                 // 0xADA4(0x0008) (Const)
	struct FName                                       AnimNameLeadByLynnIdle;                                   // 0xADAC(0x0008) (Const)
	struct FName                                       AnimNameLeadByLynnWalk;                                   // 0xADB4(0x0008) (Const)
	struct FName                                       AnimNameLeadByLynnRun;                                    // 0xADBC(0x0008) (Const)
	struct FName                                       AnimNamePushingLeftIdle;                                  // 0xADC4(0x0008) (Const)
	struct FName                                       AnimNamePushingLeftPush;                                  // 0xADCC(0x0008) (Const)
	struct FName                                       AnimNamePushingRightIdle;                                 // 0xADD4(0x0008) (Const)
	struct FName                                       AnimNamePushingRightPush;                                 // 0xADDC(0x0008) (Const)
	struct FName                                       AnimNamePushingLowIdle;                                   // 0xADE4(0x0008) (Const)
	struct FName                                       AnimNamePushingLowPush;                                   // 0xADEC(0x0008) (Const)
	struct FName                                       AnimNamePushingLowPull;                                   // 0xADF4(0x0008) (Const)
	struct FName                                       AnimNamePushingBarnIdle;                                  // 0xADFC(0x0008) (Const)
	struct FName                                       AnimNamePushingBarnPush;                                  // 0xAE04(0x0008) (Const)
	struct FName                                       AnimNamePushingBarnPull;                                  // 0xAE0C(0x0008) (Const)
	struct FName                                       AnimNamePushingLightIdle;                                 // 0xAE14(0x0008) (Const)
	struct FName                                       AnimNamePushingLightPush;                                 // 0xAE1C(0x0008) (Const)
	struct FName                                       AnimNamePushingLightPull;                                 // 0xAE24(0x0008) (Const)
	struct FName                                       AnimNamePushingProjectorIdle;                             // 0xAE2C(0x0008) (Const)
	struct FName                                       AnimNamePushingProjectorPush;                             // 0xAE34(0x0008) (Const)
	struct FName                                       AnimNamePushingProjectorPull;                             // 0xAE3C(0x0008) (Const)
	struct FName                                       AnimNameRunStumbleSoft;                                   // 0xAE44(0x0008) (Const)
	struct FName                                       AnimNameRunStumbleHard;                                   // 0xAE4C(0x0008) (Const)
	struct FName                                       AnimNameUseBandage;                                       // 0xAE54(0x0008) (Const)
	struct FName                                       AnimNameUseBandageForCrucifixion;                         // 0xAE5C(0x0008) (Const)
	struct FName                                       AnimNameRaiseCamcorderHud;                                // 0xAE64(0x0008) (Const)
	struct FName                                       AnimNameLowerCamcorderHud;                                // 0xAE6C(0x0008) (Const)
	struct FName                                       AnimNameInventoryNoCamRightArm;                           // 0xAE74(0x0008) (Const)
	struct FName                                       AnimNameCrawlScrambleFwd;                                 // 0xAE7C(0x0008) (Const)
	float                                              ObstacleMinZWalking;                                      // 0xAE84(0x0004) (Const)
	float                                              ObstacleMaxZWalking;                                      // 0xAE88(0x0004) (Const)
	float                                              ObstacleMinZFalling;                                      // 0xAE8C(0x0004) (Const)
	float                                              ObstacleMaxZFalling;                                      // 0xAE90(0x0004) (Const)
	float                                              LowJumpOverZ;                                             // 0xAE94(0x0004) (Const)
	float                                              MinCosAngleToObstacle;                                    // 0xAE98(0x0004) (Const)
	float                                              MaxLedgeCosAngle;                                         // 0xAE9C(0x0004) (Const)
	float                                              MinWidthForClimbWalking;                                  // 0xAEA0(0x0004) (Const)
	float                                              MinWidthForClimbRunning;                                  // 0xAEA4(0x0004) (Const)
	float                                              MinWidthForClimbUpWall;                                   // 0xAEA8(0x0004) (Const)
	float                                              MinClearanceForClimb;                                     // 0xAEAC(0x0004) (Const)
	float                                              MinWidthForSlide;                                         // 0xAEB0(0x0004) (Const)
	float                                              MaxWidthForSlide;                                         // 0xAEB4(0x0004) (Const)
	float                                              MinHeightForSlide;                                        // 0xAEB8(0x0004) (Const)
	float                                              MaxHeightForSlide;                                        // 0xAEBC(0x0004) (Const)
	float                                              StepUpAndLandInteractDist;                                // 0xAEC0(0x0004) (Const)
	float                                              JumpOverInteractDistWalking;                              // 0xAEC4(0x0004) (Const)
	float                                              JumpOverInteractDistRunning;                              // 0xAEC8(0x0004) (Const)
	float                                              JumpOverInteractDistFalling;                              // 0xAECC(0x0004) (Const)
	float                                              JumpOverMinObstacleZ;                                     // 0xAED0(0x0004) (Const)
	float                                              JumpOverExpectedDistWalking;                              // 0xAED4(0x0004) (Const)
	float                                              JumpOverExpectedHeightWalking;                            // 0xAED8(0x0004) (Const)
	float                                              JumpOverExpectedDistRunning;                              // 0xAEDC(0x0004) (Const)
	float                                              JumpOverExpectedHeightRunning;                            // 0xAEE0(0x0004) (Const)
	float                                              JumpOverAndGrabMaxLedgeWidth;                             // 0xAEE4(0x0004) (Const)
	float                                              JumpOverAndGrabLedgeInteractDistWalking;                  // 0xAEE8(0x0004) (Const)
	float                                              JumpOverAndGrabLedgeInteractDistRunning;                  // 0xAEEC(0x0004) (Const)
	float                                              JumpOverAndGrabLedgeInteractDistFalling;                  // 0xAEF0(0x0004) (Const)
	float                                              JumpOverAndGrabLedgeExpectedDist;                         // 0xAEF4(0x0004) (Const)
	float                                              JumpOverAndGrabLedgeExpectedHeightFromLedge;              // 0xAEF8(0x0004) (Const)
	float                                              SlideOverInteractDistMin;                                 // 0xAEFC(0x0004) (Const)
	float                                              SlideOverInteractDistMax;                                 // 0xAF00(0x0004) (Const)
	float                                              SlideOverExpectedDist;                                    // 0xAF04(0x0004) (Const)
	float                                              SlideOverExpectedHeight;                                  // 0xAF08(0x0004) (Const)
	float                                              ClimbUpInteractDistWalking;                               // 0xAF0C(0x0004) (Const)
	float                                              ClimbUpInteractDistRunning;                               // 0xAF10(0x0004) (Const)
	float                                              ClimbUpInteractDistFalling;                               // 0xAF14(0x0004) (Const)
	float                                              ClimbUpWallInteractHeightMin;                             // 0xAF18(0x0004) (Const)
	float                                              ClimbUpExpectedDistWalking;                               // 0xAF1C(0x0004) (Const)
	float                                              ClimbUpExpectedHeightWalking;                             // 0xAF20(0x0004) (Const)
	float                                              ClimbUpExpectedDistRunning;                               // 0xAF24(0x0004) (Const)
	float                                              ClimbUpExpectedHeightRunning;                             // 0xAF28(0x0004) (Const)
	float                                              ClimbUpWallExpectedDist;                                  // 0xAF2C(0x0004) (Const)
	float                                              ClimbUpWallExpectedHeightMin;                             // 0xAF30(0x0004) (Const)
	float                                              ClimbUpWallExpectedHeightMax;                             // 0xAF34(0x0004) (Const)
	float                                              ClimbOverWallExpectedDist;                                // 0xAF38(0x0004) (Const)
	float                                              ClimbOverWallExpectedHeight;                              // 0xAF3C(0x0004) (Const)
	float                                              ClimbOverWallVeryHighThresholdHeight;                     // 0xAF40(0x0004) (Const)
	float                                              ClimbOverWallVeryHighExpectedDist;                        // 0xAF44(0x0004) (Const)
	float                                              ClimbOverWallVeryHighExpectedHeight;                      // 0xAF48(0x0004) (Const)
	float                                              ClimbUpToCrouchExpectedDist;                              // 0xAF4C(0x0004) (Const)
	float                                              ClimbUpToCrouchExpectedHeight;                            // 0xAF50(0x0004) (Const)
	float                                              ClimbUpToCrouchMinHeight;                                 // 0xAF54(0x0004) (Const)
	float                                              ClimbUpToCrawlExpectedDist;                               // 0xAF58(0x0004) (Const)
	float                                              ClimbUpToCrawlExpectedHeight;                             // 0xAF5C(0x0004) (Const)
	float                                              GrabLedgeInteractDistWalking;                             // 0xAF60(0x0004) (Const)
	float                                              GrabLedgeInteractDistRunning;                             // 0xAF64(0x0004) (Const)
	float                                              GrabLedgeMinHeightOnGround;                               // 0xAF68(0x0004) (Const)
	float                                              GrabLedgeMaxHeightOnGround;                               // 0xAF6C(0x0004) (Const)
	float                                              GrabLedgeMinFloorClearance;                               // 0xAF70(0x0004) (Const)
	float                                              GrabLedgeFromJumpOverMinFloorClearance;                   // 0xAF74(0x0004) (Const)
	float                                              GrabLedgeMinHeightInAir;                                  // 0xAF78(0x0004) (Const)
	float                                              GrabLedgeMaxHeightInAir;                                  // 0xAF7C(0x0004) (Const)
	float                                              GrabLedgeInteractDistGoingDownFwd;                        // 0xAF80(0x0004) (Const)
	float                                              GrabLedgeInteractDistGoingDownBwd;                        // 0xAF84(0x0004) (Const)
	float                                              GrabLedgeInteractDistBeam;                                // 0xAF88(0x0004) (Const)
	float                                              GrabLedgeInteractDistBeamEasy;                            // 0xAF8C(0x0004) (Const)
	float                                              GrabLedgeMinHeightInAirGoingDown;                         // 0xAF90(0x0004) (Const)
	float                                              GrabLedgeMaxHeightInAirGoingDown;                         // 0xAF94(0x0004) (Const)
	float                                              GrabLedgeFromGroundExpectedHeight;                        // 0xAF98(0x0004) (Const)
	float                                              GrabLedgeFromAirExpectedHeight;                           // 0xAF9C(0x0004) (Const)
	float                                              GrabAndClimbInteractDistFwd;                              // 0xAFA0(0x0004) (Const)
	float                                              GrabAndClimbInteractDistBwd;                              // 0xAFA4(0x0004) (Const)
	float                                              GrabAndClimbExpectedDistFwd;                              // 0xAFA8(0x0004) (Const)
	float                                              GrabAndClimbExpectedDistHeight;                           // 0xAFAC(0x0004) (Const)
	float                                              GrabAndClimbMinHeightFwd;                                 // 0xAFB0(0x0004) (Const)
	float                                              GrabAndClimbMinHeightBwd;                                 // 0xAFB4(0x0004) (Const)
	float                                              GrabAndClimbMaxHeight;                                    // 0xAFB8(0x0004) (Const)
	float                                              LedgeHangDistToWall;                                      // 0xAFBC(0x0004) (Const)
	float                                              LedgeHangHeightToLedge;                                   // 0xAFC0(0x0004) (Const)
	float                                              LedgeHangTransitionInteractDist;                          // 0xAFC4(0x0004) (Const)
	float                                              LedgeHangTransitionInsideExpectedDist;                    // 0xAFC8(0x0004) (Const)
	float                                              LedgeHangTransitionOutsideExpectedDist;                   // 0xAFCC(0x0004) (Const)
	float                                              LedgeHangClimbOverMaxLedgeWidth;                          // 0xAFD0(0x0004) (Const)
	float                                              LedgeHangClimbOverMinHeightClearance;                     // 0xAFD4(0x0004) (Const)
	float                                              LedgeHangClimbOverFullHeightClearance;                    // 0xAFD8(0x0004) (Const)
	float                                              LedgeHangClimbUpMinFwdClearance;                          // 0xAFDC(0x0004) (Const)
	float                                              LedgeWalkTransitionInteractDistInside;                    // 0xAFE0(0x0004) (Const)
	float                                              LedgeWalkTransitionInteractDistOutside;                   // 0xAFE4(0x0004) (Const)
	float                                              LedgeWalkTransitionInteractDistExit;                      // 0xAFE8(0x0004) (Const)
	float                                              LedgeWalkEnterExpectedInsidePerpSideDist;                 // 0xAFEC(0x0004) (Const)
	float                                              LedgeWalkEnterExpectedOutsidePerpSideDist;                // 0xAFF0(0x0004) (Const)
	float                                              LedgeWalkEnterExpectedInsidePrlSideDist;                  // 0xAFF4(0x0004) (Const)
	float                                              LedgeWalkEnterExpectedOutsidePrlSideDist;                 // 0xAFF8(0x0004) (Const)
	float                                              LedgeWalkEnterExpectedInsidePerpFwdDist;                  // 0xAFFC(0x0004) (Const)
	float                                              LedgeWalkEnterExpectedOutsidePerpFwdDist;                 // 0xB000(0x0004) (Const)
	float                                              LedgeWalkEnterExpectedInsidePrlFwdDist;                   // 0xB004(0x0004) (Const)
	float                                              LedgeWalkEnterExpectedOutsidePrlFwdDist;                  // 0xB008(0x0004) (Const)
	float                                              LedgeWalkEnterExpectedFromBeamFwdDist;                    // 0xB00C(0x0004) (Const)
	float                                              LedgeWalkEnterExpectedFromBeamSideDist;                   // 0xB010(0x0004) (Const)
	float                                              LedgeWalkTransitionExpectedDistInside;                    // 0xB014(0x0004) (Const)
	float                                              LedgeWalkTransitionExpectedDistOutside;                   // 0xB018(0x0004) (Const)
	float                                              LedgeWalkDistFromEdge;                                    // 0xB01C(0x0004) (Const)
	float                                              LedgeWalkMaxWallDist;                                     // 0xB020(0x0004) (Const)
	float                                              LedgeWalkMinDrop;                                         // 0xB024(0x0004) (Const)
	float                                              SqueezeInteractDist;                                      // 0xB028(0x0004) (Const)
	float                                              SqueezeEnterExpectedDistFwd;                              // 0xB02C(0x0004) (Const)
	float                                              SqueezeExitExpectedDistFwd;                               // 0xB030(0x0004) (Const)
	float                                              SqueezeDistFromCenter;                                    // 0xB034(0x0004) (Const)
	float                                              EnterLockerInteractDistance;                              // 0xB038(0x0004) (Const)
	float                                              LadderEnterFromGroundInteractDist;                        // 0xB03C(0x0004) (Const)
	float                                              LadderEnterFromAboveInteractDist;                         // 0xB040(0x0004) (Const)
	float                                              LadderGrabDist;                                           // 0xB044(0x0004) (Const)
	float                                              LadderEnterFromGroundDeltaZ;                              // 0xB048(0x0004) (Const)
	float                                              LadderBarSpacing;                                         // 0xB04C(0x0004) (Const)
	float                                              LadderRootHeightOffsetFromBar;                            // 0xB050(0x0004) (Const)
	float                                              LadderEnterFromAboveExpectedDist;                         // 0xB054(0x0004) (Const)
	float                                              LadderDistFwd;                                            // 0xB058(0x0004) (Const)
	float                                              LadderExitOnTopInteractDist;                              // 0xB05C(0x0004) (Const)
	float                                              LadderExitOnGroundInteractDist;                           // 0xB060(0x0004) (Const)
	float                                              LadderMaxHeightForDrop;                                   // 0xB064(0x0004) (Const)
	float                                              HeroFatalityExpectedDistNormalFront;                      // 0xB068(0x0004) (Const)
	float                                              HeroFatalityExpectedDistNormalBack;                       // 0xB06C(0x0004) (Const)
	float                                              HeroFatalityExpectedDistCrawler;                          // 0xB070(0x0004) (Const)
	float                                              HeroFatalityExpectedDistMarta;                            // 0xB074(0x0004) (Const)
	float                                              HeroFatalityExpectedDistInnerDemon;                       // 0xB078(0x0004) (Const)
	float                                              HeroFatalityExpectedDistNicAndLaird;                      // 0xB07C(0x0004) (Const)
	float                                              HeroFatalityExpectedDistHereticFront;                     // 0xB080(0x0004) (Const)
	float                                              HeroFatalityExpectedDistHereticBack;                      // 0xB084(0x0004) (Const)
	float                                              PickupObjectExpectedDist;                                 // 0xB088(0x0004) (Const)
	float                                              PickupObjectInteractDistMinHorz;                          // 0xB08C(0x0004) (Const)
	float                                              PickupObjectInteractDistMaxHorz;                          // 0xB090(0x0004) (Const)
	float                                              PickupObjectInteractDistMaxHorzCrawling;                  // 0xB094(0x0004) (Const)
	float                                              PickupObjectInteractDistMinVertStanding;                  // 0xB098(0x0004) (Const)
	float                                              PickupObjectInteractDistMaxVertStanding;                  // 0xB09C(0x0004) (Const)
	float                                              PickupObjectInteractDistMinVertCrouched;                  // 0xB0A0(0x0004) (Const)
	float                                              PickupObjectInteractDistMaxVertCrouched;                  // 0xB0A4(0x0004) (Const)
	float                                              PickupObjectInteractDistMinVertCrawling;                  // 0xB0A8(0x0004) (Const)
	float                                              PickupObjectInteractDistMaxVertCrawling;                  // 0xB0AC(0x0004) (Const)
	float                                              DoorOpenInteractionDist;                                  // 0xB0B0(0x0004) (Const)
	float                                              DoorOpenCrouchedInteractionDist;                          // 0xB0B4(0x0004) (Const)
	float                                              DoorOpenCrawledInteractionDist;                           // 0xB0B8(0x0004) (Const)
	float                                              DoorOpenExpectedFwdDist;                                  // 0xB0BC(0x0004) (Const)
	float                                              DoorOpenExpectedSideDist;                                 // 0xB0C0(0x0004) (Const)
	float                                              DoorOpenInsideExpectedDistFwd;                            // 0xB0C4(0x0004) (Const)
	float                                              DoorKnockExpectedFwdDist;                                 // 0xB0C8(0x0004) (Const)
	float                                              DoorRunThroughInteractDist;                               // 0xB0CC(0x0004) (Const)
	float                                              DoorRunThroughExpectedDist;                               // 0xB0D0(0x0004) (Const)
	float                                              DoorInteractiveOpenMaxAngle;                              // 0xB0D4(0x0004) (Const)
	float                                              DoorMaxAngleForInteractiveOpen;                           // 0xB0D8(0x0004) (Const)
	float                                              DoorCloseInteractionDist;                                 // 0xB0DC(0x0004) (Const)
	float                                              DoorCloseCrouchedInteractionDist;                         // 0xB0E0(0x0004) (Const)
	float                                              DoorCloseCrawledInteractionDist;                          // 0xB0E4(0x0004) (Const)
	float                                              DoorCloseExpectedDistFwd;                                 // 0xB0E8(0x0004) (Const)
	float                                              WindowOpenInteractionDist;                                // 0xB0EC(0x0004) (Const)
	float                                              WindowCloseInteractionDist;                               // 0xB0F0(0x0004) (Const)
	float                                              LockerOpenStraightExpectedDistSide;                       // 0xB0F4(0x0004) (Const)
	float                                              LockerOpenLeftExpectedDistSide;                           // 0xB0F8(0x0004) (Const)
	float                                              LockerOpenRightExpectedDistSide;                          // 0xB0FC(0x0004) (Const)
	float                                              LockerOpenExpectedDistFwd;                                // 0xB100(0x0004) (Const)
	float                                              LockerEnterExpectedDistSide;                              // 0xB104(0x0004) (Const)
	float                                              LockerEnterExpectedDistFwd;                               // 0xB108(0x0004) (Const)
	float                                              GrabFromSqueezeExpectedDistanceLeft;                      // 0xB10C(0x0004) (Const)
	float                                              GrabFromSqueezeExpectedDistanceRight;                     // 0xB110(0x0004) (Const)
	float                                              BedFromCrouchInteractDistance;                            // 0xB114(0x0004) (Const)
	float                                              BedSlideInteractDistance;                                 // 0xB118(0x0004) (Const)
	float                                              BedSlideExpectedSideDist;                                 // 0xB11C(0x0004) (Const)
	float                                              BedSlideExpectedFwdDist;                                  // 0xB120(0x0004) (Const)
	float                                              PushableInteractMinLookCosAngle;                          // 0xB124(0x0004) (Const)
	float                                              PushableExpectedDistFromEdge;                             // 0xB128(0x0004) (Const)
	float                                              PushableExpectedSideOffset;                               // 0xB12C(0x0004) (Const)
	float                                              PushableExpectedDistFromEdgeLow;                          // 0xB130(0x0004) (Const)
	float                                              PushableExpectedSideOffsetLow;                            // 0xB134(0x0004) (Const)
	float                                              PushFromLedgeAnimatedExpectedDist;                        // 0xB138(0x0004) (Const)
	float                                              PushFromLedgeAnimatedInteractDist;                        // 0xB13C(0x0004) (Const)
	float                                              PushFromLedgeAnimatedMinHeightCrouched;                   // 0xB140(0x0004) (Const)
	float                                              PushFromLedgeAnimatedMinHeightWalking;                    // 0xB144(0x0004) (Const)
	float                                              PushFromLedgeAnimatedMinHeightRunning;                    // 0xB148(0x0004) (Const)
	float                                              PushFromLedgeAnimatedMinHeightCrawled;                    // 0xB14C(0x0004) (Const)
	float                                              PushFromLedgeProceduralInteractDist;                      // 0xB150(0x0004) (Const)
	float                                              PeekingEnterInteractDistFromWall;                         // 0xB154(0x0004) (Const)
	float                                              PeekingEnterInteractDistFromEdgeMin;                      // 0xB158(0x0004) (Const)
	float                                              PeekingEnterInteractDistFromEdgeMax;                      // 0xB15C(0x0004) (Const)
	float                                              PeekingEnterExpectedDistFromWall;                         // 0xB160(0x0004) (Const)
	float                                              PeekingEnterExpectedDistFromEdgeLeft;                     // 0xB164(0x0004) (Const)
	float                                              PeekingEnterExpectedDistFromEdgeRight;                    // 0xB168(0x0004) (Const)
	float                                              PeekingCrouchedEnterExpectedDistFromWallLeft;             // 0xB16C(0x0004) (Const)
	float                                              PeekingCrouchedEnterExpectedDistFromWallRight;            // 0xB170(0x0004) (Const)
	float                                              PeekingCrouchedEnterExpectedDistFromEdgeLeft;             // 0xB174(0x0004) (Const)
	float                                              PeekingCrouchedEnterExpectedDistFromEdgeRight;            // 0xB178(0x0004) (Const)
	float                                              SlideToLedgeExpectedDist;                                 // 0xB17C(0x0004) (Const)
	float                                              SlideToLedgeInteractDist;                                 // 0xB180(0x0004) (Const)
	float                                              WindowOpenExpectedFwdDist;                                // 0xB184(0x0004) (Const)
	float                                              WindowCloseExpectedFwdDist;                               // 0xB188(0x0004) (Const)
	float                                              WindowInteractionExpectedDownDist;                        // 0xB18C(0x0004) (Const)
	float                                              DoorLockExpectedFwdDist;                                  // 0xB190(0x0004) (Const)
	float                                              DoorUnlockExpectedFwdDist;                                // 0xB194(0x0004) (Const)
	float                                              DoorLockTargetRadius;                                     // 0xB198(0x0004) (Const)
	float                                              DoorLockInteractDist;                                     // 0xB19C(0x0004) (Const)
	float                                              EnterBasementInteractDistLow;                             // 0xB1A0(0x0004) (Const)
	float                                              EnterBasementInteractDistStanding;                        // 0xB1A4(0x0004) (Const)
	float                                              EnterBasementExpectedAnimDist;                            // 0xB1A8(0x0004) (Const)
	float                                              ExitBasementInteractDist;                                 // 0xB1AC(0x0004) (Const)
	float                                              ExitBasementExpectedAnimDistZ;                            // 0xB1B0(0x0004) (Const)
	float                                              ExitBasementExpectedAnimDistFwd;                          // 0xB1B4(0x0004) (Const)
	float                                              SlidingSlopeMinZ;                                         // 0xB1B8(0x0004) (Const)
	float                                              SlidingSlopeMaxZ;                                         // 0xB1BC(0x0004) (Const)
	float                                              SlidingSlopeExpectedDistFwd;                              // 0xB1C0(0x0004) (Const)
	float                                              HidingBarrelRadius;                                       // 0xB1C4(0x0004) (Const)
	float                                              HidingBarrelHeight;                                       // 0xB1C8(0x0004) (Const)
	float                                              HidingBarrelWaterHeight;                                  // 0xB1CC(0x0004) (Const)
	float                                              HidingBarrelAnimSyncDistance;                             // 0xB1D0(0x0004) (Const)
	float                                              HidingBarrelMaxWalkDistanceForInteraction;                // 0xB1D4(0x0004) (Const)
	float                                              HidingBarrelMaxRunDistanceForInteraction;                 // 0xB1D8(0x0004) (Const)
	float                                              WardrobeInteractionDist;                                  // 0xB1DC(0x0004) (Const)
	float                                              WardrobeInsideLeftSideDist;                               // 0xB1E0(0x0004) (Const)
	float                                              WardrobeInsideLeftFwdDist;                                // 0xB1E4(0x0004) (Const)
	float                                              WardrobeInsideRightSideDist;                              // 0xB1E8(0x0004) (Const)
	float                                              WardrobeInsideRightFwdDist;                               // 0xB1EC(0x0004) (Const)
	float                                              HidingInWaterShallowLimit;                                // 0xB1F0(0x0004) (Const)
	float                                              DoorPullPeekCameraOffset;                                 // 0xB1F4(0x0004) (Const)
	float                                              DoorPullPeekSoftMinOpenRatio;                             // 0xB1F8(0x0004) (Const)
	float                                              DoorPullPeekHardMinOpenRatio;                             // 0xB1FC(0x0004) (Const)
	float                                              DoorPushLeftPeekCameraOffset;                             // 0xB200(0x0004) (Const)
	float                                              DoorPushRightPeekCameraOffset;                            // 0xB204(0x0004) (Const)
	float                                              DoorPushPeekSoftMinOpenRatio;                             // 0xB208(0x0004) (Const)
	float                                              DoorPushPeekHardMinOpenRatio;                             // 0xB20C(0x0004) (Const)
	float                                              DoorPushPeekCameraBonusYaw;                               // 0xB210(0x0004) (Const)
	float                                              WardrobeDoorInsideLeftCameraOffset;                       // 0xB214(0x0004) (Const)
	float                                              WardrobeDoorInsideRightCameraOffset;                      // 0xB218(0x0004) (Const)
	float                                              WardrobeDoorPushLeftPeekCameraBonusYaw;                   // 0xB21C(0x0004) (Const)
	float                                              WardrobeDoorPushRightPeekCameraBonusYaw;                  // 0xB220(0x0004) (Const)
	float                                              WardrobeDoorPushPeekLeftSoftMinOpenRatio;                 // 0xB224(0x0004) (Const)
	float                                              WardrobeDoorPushPeekLeftHardMinOpenRatio;                 // 0xB228(0x0004) (Const)
	float                                              WardrobeDoorPushPeekRightSoftMinOpenRatio;                // 0xB22C(0x0004) (Const)
	float                                              WardrobeDoorPushPeekRightHardMinOpenRatio;                // 0xB230(0x0004) (Const)
	float                                              PregnantLynnAnimatedWalkSpeed;                            // 0xB234(0x0004) (Const)
	float                                              PregnantLynnAnimatedRunSpeed;                             // 0xB238(0x0004) (Const)
	float                                              PregnantLynnAnimatedStrafeSpeed;                          // 0xB23C(0x0004) (Const)
	float                                              LeadingJessicaAnimatedWalkSpeed;                          // 0xB240(0x0004) (Const)
	float                                              LeadingJessicaAnimatedRunSpeed;                           // 0xB244(0x0004) (Const)
	float                                              LeadingLynnAnimatedWalkSpeed;                             // 0xB248(0x0004) (Const)
	float                                              LeadingLynnAnimatedRunSpeed;                              // 0xB24C(0x0004) (Const)
	float                                              ClimbOnBeamInteractDist;                                  // 0xB250(0x0004) (Const)
	float                                              PregLynnSideOffset;                                       // 0xB254(0x0004) (Const)
	float                                              MinEyeDistToWall;                                         // 0xB258(0x0004) (Const)
	float                                              ForwardJumpSpeedThreshold;                                // 0xB25C(0x0004) (Const)
	float                                              MaxGrabLedgeAdjustment;                                   // 0xB260(0x0004) (Const)
	float                                              MaxSpeedPenaltyPctForInjuries;                            // 0xB264(0x0004) (Const)
	float                                              NoLedgeTransitionMinCosAngle;                             // 0xB268(0x0004) (Const)
	struct FVector                                     DefaultLeftHandJointTargetRotation;                       // 0xB26C(0x000C) (Const)
	struct FVector                                     CornerPeekJointTargetPosLeft;                             // 0xB278(0x000C) (Const)
	struct FVector                                     CornerPeekJointTargetPosRight;                            // 0xB284(0x000C) (Const)
	float                                              CrawlFeetDist;                                            // 0xB290(0x0004) (Const)
	float                                              MinHidingBarrelPeek;                                      // 0xB294(0x0004) (Const)
	float                                              UnderwaterPeekDistance;                                   // 0xB298(0x0004) (Const)
	struct FName                                       FirstDirtyCheckpoint;                                     // 0xB29C(0x0008) (Const)
	struct FName                                       HandsCrucifiedCheckpoint;                                 // 0xB2A4(0x0008) (Const)
	struct FName                                       FirstHandsBandagedCheckpoint;                             // 0xB2AC(0x0008) (Const)
	float                                              InteractiveDoorDurationToBeConsideredRead;                // 0xB2B4(0x0004) (Const)
	class UParticleSystem*                             RemappingBarrelParticle;                                  // 0xB2B8(0x0008) (Const)
	class UParticleSystem*                             RemappedBarrelParticle;                                   // 0xB2C0(0x0008) (Const)
	float                                              FoliageMinimumFrontalDisplacement;                        // 0xB2C8(0x0004) (Const)
	float                                              FoliageForwardSpeedDisplacementModifier;                  // 0xB2CC(0x0004) (Const)
	float                                              FoliageForwardSpeedDisplacementTippingPoint;              // 0xB2D0(0x0004) (Const)
	float                                              MinSpeedForTrip;                                          // 0xB2D4(0x0004) (Const)
	float                                              TripFallLimpDuration;                                     // 0xB2D8(0x0004) (Const)
	float                                              TripHurtLimpDuration;                                     // 0xB2DC(0x0004) (Const)
	float                                              TripHurtSlowDownDuration;                                 // 0xB2E0(0x0004) (Const)
	float                                              TripHurtSlowDownWalkSpeed;                                // 0xB2E4(0x0004) (Const)
	float                                              TripHurtSlowDownRunSpeed;                                 // 0xB2E8(0x0004) (Const)
	struct FName                                       RaftSkeletalMeshDefinitionName;                           // 0xB2EC(0x0008) (Const)
	struct FName                                       RaftPaddleStaticMeshDefinitionName;                       // 0xB2F4(0x0008) (Const)
	float                                              DoorPeekingCollisionCheckAdditionalBuffer;                // 0xB2FC(0x0004) (Const)
	float                                              NormalWalkSpeed;                                          // 0xB300(0x0004) (Config)
	float                                              NormalRunSpeed;                                           // 0xB304(0x0004) (Config)
	float                                              StaminaDepletedRunSpeed;                                  // 0xB308(0x0004) (Config)
	float                                              SprintSpeed;                                              // 0xB30C(0x0004) (Config)
	float                                              CrouchedSpeed;                                            // 0xB310(0x0004) (Config)
	float                                              ElectrifiedSpeed;                                         // 0xB314(0x0004) (Config)
	float                                              ShallowWaterWalkSpeed;                                    // 0xB318(0x0004) (Config)
	float                                              ShallowWaterRunSpeed;                                     // 0xB31C(0x0004) (Config)
	float                                              WaterWalkSpeed;                                           // 0xB320(0x0004) (Config)
	float                                              WaterRunSpeed;                                            // 0xB324(0x0004) (Config)
	float                                              FoliageWalkSpeed;                                         // 0xB328(0x0004) (Config)
	float                                              FoliageRunSpeed;                                          // 0xB32C(0x0004) (Config)
	float                                              LimpingWalkSpeed;                                         // 0xB330(0x0004) (Config)
	float                                              HobblingWalkSpeed;                                        // 0xB334(0x0004) (Config)
	float                                              HobblingRunSpeed;                                         // 0xB338(0x0004) (Config)
	float                                              BeamWalkSpeed;                                            // 0xB33C(0x0004) (Config)
	float                                              BeamRunSpeed;                                             // 0xB340(0x0004) (Config)
	float                                              FreeCrawlSpeed;                                           // 0xB344(0x0004) (Config)
	float                                              ConstrainedCrawlSpeed;                                    // 0xB348(0x0004) (Config)
	float                                              CrawlChasedSpeed;                                         // 0xB34C(0x0004) (Config)
	float                                              HiddenUnderwaterSpeed;                                    // 0xB350(0x0004) (Config)
	float                                              YoungBlakeWalkSpeed;                                      // 0xB354(0x0004) (Config)
	float                                              YoungBlakeRunSpeed;                                       // 0xB358(0x0004) (Config)
	float                                              CrawlCamcorderSpeedPenalty;                               // 0xB35C(0x0004) (Config)
	float                                              CrawlCamcorderReloadSpeedPenalty;                         // 0xB360(0x0004) (Config)
	float                                              FreeCrawlBackwardsSlowDown;                               // 0xB364(0x0004) (Config)
	float                                              ConstrainedCrawlBackwardsSlowDown;                        // 0xB368(0x0004) (Config)
	float                                              CrawlStrafeSlowDown;                                      // 0xB36C(0x0004) (Config)
	float                                              StairsUpNormalSpeed;                                      // 0xB370(0x0004) (Config)
	float                                              StairsDownNormalSpeed;                                    // 0xB374(0x0004) (Config)
	float                                              StairsUpRunSpeed;                                         // 0xB378(0x0004) (Config)
	float                                              StairsDownRunSpeed;                                       // 0xB37C(0x0004) (Config)
	float                                              SwimmingWalkWithCamcorderSpeed;                           // 0xB380(0x0004) (Config)
	float                                              SwimmingWalkSpeed;                                        // 0xB384(0x0004) (Config)
	float                                              SwimmingRunSpeed;                                         // 0xB388(0x0004) (Config)
	float                                              SwimmingPulseSpeed;                                       // 0xB38C(0x0004) (Config)
	float                                              BleedingRunSpeedMultiplier;                               // 0xB390(0x0004) (Config)
	float                                              StartHealtForSlowDown;                                    // 0xB394(0x0004) (Config)
	float                                              EndHealtForSlowDown;                                      // 0xB398(0x0004) (Config)
	float                                              DrowningSpeed;                                            // 0xB39C(0x0004) (Config)
	float                                              PairedWalkMovingRotationRate;                             // 0xB3A0(0x0004) (Config)
	float                                              PairedWalkTurnOnSpotRotationRate;                         // 0xB3A4(0x0004) (Config)
	float                                              PairedWalkBackwardsSlowDown;                              // 0xB3A8(0x0004) (Config)
	float                                              PairedWalkStrafeSlowDown;                                 // 0xB3AC(0x0004) (Config)
	float                                              CrawlRotationCorrectionRate;                              // 0xB3B0(0x0004) (Config)
	float                                              LedgeRotationCorrectionRate;                              // 0xB3B4(0x0004) (Config)
	float                                              SlidingSlopeRotationCorrectionRate;                       // 0xB3B8(0x0004) (Config)
	float                                              SpeedPenaltyBackwards;                                    // 0xB3BC(0x0004) (Config)
	float                                              SpeedPenaltyStrafe;                                       // 0xB3C0(0x0004) (Config)
	float                                              ForwardSpeedForJumpWalking;                               // 0xB3C4(0x0004) (Config)
	float                                              ForwardSpeedForJumpRunning;                               // 0xB3C8(0x0004) (Config)
	float                                              ForwardSpeedForJumpOnBeam;                                // 0xB3CC(0x0004) (Config)
	float                                              MaxSpeedPenaltyForUpSlopeRunning;                         // 0xB3D0(0x0004) (Config)
	float                                              MaxSpeedGainForDownSlopeRunning;                          // 0xB3D4(0x0004) (Config)
	float                                              MaxSpeedPenaltyForUpSlopeWalking;                         // 0xB3D8(0x0004) (Config)
	float                                              MaxSpeedGainForDownSlopeWalking;                          // 0xB3DC(0x0004) (Config)
	float                                              JumpClearanceWalking;                                     // 0xB3E0(0x0004) (Config)
	float                                              JumpClearanceRunning;                                     // 0xB3E4(0x0004) (Config)
	float                                              JumpClearanceOnBeam;                                      // 0xB3E8(0x0004) (Config)
	float                                              SmallLandingPenaltyDuration;                              // 0xB3EC(0x0004) (Config)
	float                                              HardLandingPenaltyDuration;                               // 0xB3F0(0x0004) (Config)
	float                                              LandingSpeedModifier;                                     // 0xB3F4(0x0004) (Config)
	float                                              ElectrifiedJumpDelay;                                     // 0xB3F8(0x0004) (Config)
	float                                              ExternalImpulseDecelCoeff;                                // 0xB3FC(0x0004) (Config)
	float                                              ExternalImpulseMinVel;                                    // 0xB400(0x0004) (Config)
	float                                              ExternalImpulseMaxVel;                                    // 0xB404(0x0004) (Config)
	float                                              ExternalImpulseMaxVelCrouched;                            // 0xB408(0x0004) (Config)
	float                                              ExternalImpulseMaxVelCrawling;                            // 0xB40C(0x0004) (Config)
	float                                              FallSpeedForDamage;                                       // 0xB410(0x0004) (Config)
	float                                              FallSpeedForDeath;                                        // 0xB414(0x0004) (Config)
	float                                              FallDamageExponent;                                       // 0xB418(0x0004) (Config)
	float                                              FallingRotationSlowThreshold;                             // 0xB41C(0x0004) (Config)
	float                                              FallingRotationFastThreshold;                             // 0xB420(0x0004) (Config)
	float                                              FallingRotationSlowRate;                                  // 0xB424(0x0004) (Config)
	float                                              FallingRotationFastRate;                                  // 0xB428(0x0004) (Config)
	float                                              DarknessThreshold;                                        // 0xB42C(0x0004) (Config)
	float                                              MaxStaticLuminance;                                       // 0xB430(0x0004) (Config)
	float                                              MaxDynamicLuminance;                                      // 0xB434(0x0004) (Config)
	float                                              MinSpeedForSlide;                                         // 0xB438(0x0004) (Config)
	float                                              SlideToCrawlDuration;                                     // 0xB43C(0x0004) (Config)
	float                                              SlideToCrouchDuration;                                    // 0xB440(0x0004) (Config)
	float                                              MinSpeedForSprint;                                        // 0xB444(0x0004) (Config)
	float                                              MaxRotSpeedForSprint;                                     // 0xB448(0x0004) (Config)
	float                                              UnpenalizedRotSpeedForSprint;                             // 0xB44C(0x0004) (Config)
	float                                              SprintDelay;                                              // 0xB450(0x0004) (Config)
	float                                              LongBreathStopMinRunDuration;                             // 0xB454(0x0004) (Config)
	float                                              BaseFOV;                                                  // 0xB458(0x0004) (Config)
	float                                              DefaultFOV;                                               // 0xB45C(0x0004) (Config)
	float                                              RunningFOV;                                               // 0xB460(0x0004) (Config)
	float                                              FOVApproachCoeffOpening;                                  // 0xB464(0x0004) (Config)
	float                                              FOVApproachCoeffClosing;                                  // 0xB468(0x0004) (Config)
	float                                              FOVApproachCoeffRun;                                      // 0xB46C(0x0004) (Config)
	float                                              FOVApproachCoeffWalk;                                     // 0xB470(0x0004) (Config)
	float                                              EasyBatteryDurationNV;                                    // 0xB474(0x0004) (Config)
	float                                              NrmBatteryDurationNV;                                     // 0xB478(0x0004) (Config)
	float                                              HardBatteryDurationNV;                                    // 0xB47C(0x0004) (Config)
	float                                              EasyBatteryDurationMicrophone;                            // 0xB480(0x0004) (Config)
	float                                              NrmBatteryDurationMicrophone;                             // 0xB484(0x0004) (Config)
	float                                              HardBatteryDurationMicrophone;                            // 0xB488(0x0004) (Config)
	float                                              MaxBatteryEnergyForReload;                                // 0xB48C(0x0004) (Config)
	float                                              InitialBatteryEnergy;                                     // 0xB490(0x0004) (Config)
	float                                              CamcorderMinFOV;                                          // 0xB494(0x0004) (Config)
	float                                              CamcorderMaxFOV;                                          // 0xB498(0x0004) (Config)
	float                                              CamcorderNVMaxFOV;                                        // 0xB49C(0x0004) (Config)
	float                                              DarkLightBrightnessEVDefault;                             // 0xB4A0(0x0004) (Config)
	float                                              DarkLightRadiusDefault;                                   // 0xB4A4(0x0004) (Config)
	float                                              DarkLightBrightnessEVNoCamcorder;                         // 0xB4A8(0x0004) (Config)
	float                                              DarkLightRadiusNoCamcorder;                               // 0xB4AC(0x0004) (Config)
	float                                              DarkLightBrightnessEVBothHandsNeeded;                     // 0xB4B0(0x0004) (Config)
	float                                              DarkLightRadiusBothHandsNeeded;                           // 0xB4B4(0x0004) (Config)
	float                                              DarkLightBrightnessEVAttacked;                            // 0xB4B8(0x0004) (Config)
	float                                              DarkLightRadiusAttacked;                                  // 0xB4BC(0x0004) (Config)
	float                                              DarkLightBrightnessEVFatalitized;                         // 0xB4C0(0x0004) (Config)
	float                                              DarkLightRadiusFatalitized;                               // 0xB4C4(0x0004) (Config)
	float                                              DarkLightBrightnessEVParrying;                            // 0xB4C8(0x0004) (Config)
	float                                              DarkLightRadiusParrying;                                  // 0xB4CC(0x0004) (Config)
	float                                              DarkLightBrightnessEVCamcorderHud;                        // 0xB4D0(0x0004) (Config)
	float                                              DarkLightRadiusCamcorderHud;                              // 0xB4D4(0x0004) (Config)
	float                                              DarkLightBrightnessEVLookAtObject;                        // 0xB4D8(0x0004) (Config)
	float                                              DarkLightRadiusLookAtObject;                              // 0xB4DC(0x0004) (Config)
	float                                              DarkLightBrightnessEVUnderwater;                          // 0xB4E0(0x0004) (Config)
	float                                              DarkLightRadiusUnderwater;                                // 0xB4E4(0x0004) (Config)
	float                                              DarkLightBrightnessEVBandage;                             // 0xB4E8(0x0004) (Config)
	float                                              DarkLightRadiusBandage;                                   // 0xB4EC(0x0004) (Config)
	float                                              DarkLightBrightnessEVInventory;                           // 0xB4F0(0x0004) (Config)
	float                                              DarkLightRadiusInventory;                                 // 0xB4F4(0x0004) (Config)
	float                                              NVGlitchTimeThreshold;                                    // 0xB4F8(0x0004) (Config)
	float                                              NVGlitchMaxDelayStart;                                    // 0xB4FC(0x0004) (Config)
	float                                              NVGlitchMaxDelayEnd;                                      // 0xB500(0x0004) (Config)
	float                                              NVGlitchMinDuration;                                      // 0xB504(0x0004) (Config)
	float                                              NVGlitchMaxDuration;                                      // 0xB508(0x0004) (Config)
	float                                              NVGlitchMaxLevel;                                         // 0xB50C(0x0004) (Config)
	float                                              NVGlitchingBaseBrightnessEV;                              // 0xB510(0x0004) (Config)
	float                                              MicrophoneLowBatteryThreshold;                            // 0xB514(0x0004) (Config)
	float                                              HealthRegenRate;                                          // 0xB518(0x0004) (Config)
	float                                              BandageUsedHealthRegenRate;                               // 0xB51C(0x0004) (Config)
	float                                              HealthRegenDelay;                                         // 0xB520(0x0004) (Config)
	float                                              HobbleApproachRate;                                       // 0xB524(0x0004) (Config)
	float                                              ElectricEffectPeriod;                                     // 0xB528(0x0004) (Config)
	float                                              ElectricEffectBase;                                       // 0xB52C(0x0004) (Config)
	int                                                ElectricEffectMode;                                       // 0xB530(0x0004) (Config)
	float                                              ElectricHurtSoundInterval;                                // 0xB534(0x0004) (Config)
	float                                              DeathScreenDuration;                                      // 0xB538(0x0004) (Config)
	float                                              HeatDamageDist;                                           // 0xB53C(0x0004) (Config)
	float                                              HeatDamageInterval;                                       // 0xB540(0x0004) (Config)
	float                                              HeatDamagePerSec;                                         // 0xB544(0x0004) (Config)
	float                                              HeatMaxBlurDist;                                          // 0xB548(0x0004) (Config)
	float                                              HeatMinBlurDist;                                          // 0xB54C(0x0004) (Config)
	float                                              HeatMinBlurAmount;                                        // 0xB550(0x0004) (Config)
	float                                              HeatBlurApproachCoeffIn;                                  // 0xB554(0x0004) (Config)
	float                                              HeatBlurApproachCoeffOut;                                 // 0xB558(0x0004) (Config)
	float                                              MinCosAngleForPickup;                                     // 0xB55C(0x0004) (Config)
	float                                              PickupInteractRadius;                                     // 0xB560(0x0004) (Config)
	float                                              JumpForwardFromLedgeWalkXYSpeed;                          // 0xB564(0x0004) (Config)
	float                                              JumpForwardFromLedgeWalkZSpeed;                           // 0xB568(0x0004) (Config)
	float                                              DropFromLedgeWalkXYSpeed;                                 // 0xB56C(0x0004) (Config)
	float                                              DropFromLedgeWalkZSpeed;                                  // 0xB570(0x0004) (Config)
	float                                              LookBackCamRotOffset;                                     // 0xB574(0x0004) (Config)
	float                                              LookBackCamBackOffset;                                    // 0xB578(0x0004) (Config)
	float                                              LookBackCamSideOffset;                                    // 0xB57C(0x0004) (Config)
	float                                              LeanSpeedThreshold;                                       // 0xB580(0x0004) (Config)
	float                                              StaminaMaxStamina;                                        // 0xB584(0x0004) (Config)
	float                                              StaminaMinStaminaForReplenished;                          // 0xB588(0x0004) (Config)
	float                                              StaminaMaxSpeedForReplenish;                              // 0xB58C(0x0004) (Config)
	float                                              StaminaReplenishRate;                                     // 0xB590(0x0004) (Config)
	float                                              StaminaIdleReplenishRate;                                 // 0xB594(0x0004) (Config)
	float                                              StaminaSwimmingIdleReplenishRate;                         // 0xB598(0x0004) (Config)
	float                                              StaminaNormalDepleteRate;                                 // 0xB59C(0x0004) (Config)
	float                                              StaminaFoliageDepleteRate;                                // 0xB5A0(0x0004) (Config)
	float                                              StaminaSwimmingIdleDepleteRate;                           // 0xB5A4(0x0004) (Config)
	float                                              StaminaSwimmingFastDepleteRate;                           // 0xB5A8(0x0004) (Config)
	float                                              StaminaDepletionEffectStart;                              // 0xB5AC(0x0004) (Config)
	float                                              StaminaEyeFocusDistance;                                  // 0xB5B0(0x0004) (Config)
	float                                              AdrenalineFadeTime;                                       // 0xB5B4(0x0004) (Config)
	float                                              AdrenalineBoostDurationOnHit;                             // 0xB5B8(0x0004) (Config)
	float                                              JumpStaminaReplenishRate;                                 // 0xB5BC(0x0004) (Config)
	float                                              JumpStaminaUsePerJump;                                    // 0xB5C0(0x0004) (Config)
	float                                              AirMaxAir;                                                // 0xB5C4(0x0004) (Config)
	float                                              AirReplenishRate;                                         // 0xB5C8(0x0004) (Config)
	float                                              AirDepletionRate;                                         // 0xB5CC(0x0004) (Config)
	float                                              AirSprintDepletionRate;                                   // 0xB5D0(0x0004) (Config)
	float                                              AirSprintMinimumThreshold;                                // 0xB5D4(0x0004) (Config)
	float                                              AirOutOfAirDamageAmount;                                  // 0xB5D8(0x0004) (Config)
	float                                              AirOutOfAirBubblesDuration;                               // 0xB5DC(0x0004) (Config)
	float                                              AirOutOfAirDamageThreshold;                               // 0xB5E0(0x0004) (Config)
	float                                              AirOutOfAirFinalWarningTime;                              // 0xB5E4(0x0004) (Config)
	float                                              AirOutOfAirBubbleStartTime;                               // 0xB5E8(0x0004) (Config)
	float                                              AirOutOfAirBubbleDamageStartTime;                         // 0xB5EC(0x0004) (Config)
	float                                              AirOutOfAirBubbleStepTime;                                // 0xB5F0(0x0004) (Config)
	float                                              AirOutOfAirBubbleStepTimeFinalMin;                        // 0xB5F4(0x0004) (Config)
	float                                              AirOutOfAirBubbleStepTimeFinalMax;                        // 0xB5F8(0x0004) (Config)
	float                                              WaterWaistDeepRotationSpeed;                              // 0xB5FC(0x0004) (Config)
	float                                              WaterCrawlHeight;                                         // 0xB600(0x0004) (Config)
	float                                              WaterNormalWalkHeight;                                    // 0xB604(0x0004) (Config)
	float                                              WaterWaistWalkHeight;                                     // 0xB608(0x0004) (Config)
	float                                              WaterStartSlowdownWalkingDepth;                           // 0xB60C(0x0004) (Config)
	float                                              WaterMaxWalkingDepth;                                     // 0xB610(0x0004) (Config)
	float                                              NumFootstepsForFullLoudness;                              // 0xB614(0x0004) (Config)
	float                                              RunDurationForFullLoudness;                               // 0xB618(0x0004) (Config)
	float                                              WalkingLoudness;                                          // 0xB61C(0x0004) (Config)
	float                                              CrouchLoudness;                                           // 0xB620(0x0004) (Config)
	float                                              RunningLoudness;                                          // 0xB624(0x0004) (Config)
	float                                              CrawlingLoudness;                                         // 0xB628(0x0004) (Config)
	float                                              WalkingWaterLoudness;                                     // 0xB62C(0x0004) (Config)
	float                                              CrouchWaterLoudness;                                      // 0xB630(0x0004) (Config)
	float                                              HobblingWalkLoudness;                                     // 0xB634(0x0004) (Config)
	float                                              HobblingRunLoudness;                                      // 0xB638(0x0004) (Config)
	float                                              LandingBigLoudness;                                       // 0xB63C(0x0004) (Config)
	float                                              LandingSmallLoudness;                                     // 0xB640(0x0004) (Config)
	float                                              LandingBigWaterLoudness;                                  // 0xB644(0x0004) (Config)
	float                                              LandingSmallWaterLoudness;                                // 0xB648(0x0004) (Config)
	float                                              DoorOpenInstantLoudness;                                  // 0xB64C(0x0004) (Config)
	float                                              DoorOpenPartialLoudness;                                  // 0xB650(0x0004) (Config)
	float                                              DoorCloseFastLoudness;                                    // 0xB654(0x0004) (Config)
	float                                              DoorEnterLockerLoudness;                                  // 0xB658(0x0004) (Config)
	float                                              DoorExitLockerLoudness;                                   // 0xB65C(0x0004) (Config)
	float                                              DoorRunThroughLoudness;                                   // 0xB660(0x0004) (Config)
	float                                              DoorUnlockLoudness;                                       // 0xB664(0x0004) (Config)
	float                                              DoorLockLoudness;                                         // 0xB668(0x0004) (Config)
	float                                              WindowOpenLoudness;                                       // 0xB66C(0x0004) (Config)
	float                                              WindowCloseLoudness;                                      // 0xB670(0x0004) (Config)
	float                                              TripDamageLoudness;                                       // 0xB674(0x0004) (Config)
	float                                              TrippingLoudness;                                         // 0xB678(0x0004) (Config)
	float                                              EnterBarrelLoudness;                                      // 0xB67C(0x0004) (Config)
	float                                              ExitBarrelLoudness;                                       // 0xB680(0x0004) (Config)
	float                                              EnterWardrobeLoudness;                                    // 0xB684(0x0004) (Config)
	float                                              ExitWardrobeLoudness;                                     // 0xB688(0x0004) (Config)
	float                                              ExitSlidingSlopeLoudness;                                 // 0xB68C(0x0004) (Config)
	float                                              DoorChimesLoudness;                                       // 0xB690(0x0004) (Config)
	float                                              NumCamcorderBeepsForFullLoudness;                         // 0xB694(0x0004) (Config)
	float                                              LowBatteryLoudness;                                       // 0xB698(0x0004) (Config)
	float                                              PlayerSpeedRTPCApproachUp;                                // 0xB69C(0x0004) (Config)
	float                                              PlayerSpeedRTPCApproachDown;                              // 0xB6A0(0x0004) (Config)
	float                                              StairsUpPitchChange;                                      // 0xB6A4(0x0004) (Config)
	float                                              StairsDownPitchChange;                                    // 0xB6A8(0x0004) (Config)
	float                                              BeamPitchChange;                                          // 0xB6AC(0x0004) (Config)
	float                                              MaxProceduralCrawlRoll;                                   // 0xB6B0(0x0004) (Config)
	float                                              MinAngleForPitchChange;                                   // 0xB6B4(0x0004) (Config)
	float                                              MaxAngleForPitchChange;                                   // 0xB6B8(0x0004) (Config)
	float                                              MinPitchAdjustment;                                       // 0xB6BC(0x0004) (Config)
	float                                              MaxPitchAdjustment;                                       // 0xB6C0(0x0004) (Config)
	float                                              SlidingSlopeDefaultSpeed;                                 // 0xB6C4(0x0004) (Config)
	float                                              MinimumRowingForceRatio;                                  // 0xB6C8(0x0004) (Config)
	float                                              BaseRowingSpeed;                                          // 0xB6CC(0x0004) (Config)
	float                                              FastRowingSpeed;                                          // 0xB6D0(0x0004) (Config)
	float                                              BaseRowingTurningSpeed;                                   // 0xB6D4(0x0004) (Config)
	float                                              RowingTurnInputNoRealignDelay;                            // 0xB6D8(0x0004) (Config)
	float                                              BaseRiverRowingTurningSpeed;                              // 0xB6DC(0x0004) (Config)
	float                                              FastRiverRowingTurningSpeed;                              // 0xB6E0(0x0004) (Config)
	float                                              BaseRowingBackSpeed;                                      // 0xB6E4(0x0004) (Config)
	float                                              FastRowingBackSpeed;                                      // 0xB6E8(0x0004) (Config)
	float                                              RowingInducedRotationRatio;                               // 0xB6EC(0x0004) (Config)
	float                                              MaxRaftActualVelocityToDesiredVelocityRotationSpeed;      // 0xB6F0(0x0004) (Config)
	float                                              MinRaftOrientationToVelocityRotationSpeed;                // 0xB6F4(0x0004) (Config)
	float                                              MaxRaftOrientationToVelocityRotationSpeed;                // 0xB6F8(0x0004) (Config)
	float                                              MaxRiverDirectionFreeRange;                               // 0xB6FC(0x0004) (Config)
	float                                              RiverDrowningDelay;                                       // 0xB700(0x0004) (Config)
	float                                              RiverDrowningRecenterSpeed;                               // 0xB704(0x0004) (Config)
	float                                              RaftSpeedForFastAnim;                                     // 0xB708(0x0004) (Config)
	float                                              AnimatedRaftRatioToBaseRaftAngle;                         // 0xB70C(0x0004) (Config)
	float                                              AnimatedRaftRatioToBaseRaftOffset;                        // 0xB710(0x0004) (Config)
	float                                              AnimatedRaftSpeedToAnimationValueFactor;                  // 0xB714(0x0004) (Config)
	float                                              AnimatedRaftSpeedToAnimationTimeFactor;                   // 0xB718(0x0004) (Config)
	float                                              RaftVelocityForLightImpact;                               // 0xB71C(0x0004) (Config)
	float                                              RaftVelocityForMediumImpact;                              // 0xB720(0x0004) (Config)
	float                                              RaftVelocityForHardImpact;                                // 0xB724(0x0004) (Config)
	float                                              RaftCollisionScrapingDistance;                            // 0xB728(0x0004) (Config)
	float                                              GlassesOffBlurAmount;                                     // 0xB72C(0x0004) (Config)
	float                                              LedgeHangPeekMaxDuration;                                 // 0xB730(0x0004) (Config)
	float                                              LedgeHangPeekRestDuration;                                // 0xB734(0x0004) (Config)
	float                                              LedgeHandPeekOutEffortTrigger;                            // 0xB738(0x0004) (Config)
	float                                              LedgeHandPeekOutEffortTriggerReset;                       // 0xB73C(0x0004) (Config)
	float                                              LedgeHandPeekInEffortTrigger;                             // 0xB740(0x0004) (Config)
	float                                              LedgeHandPeekInEffortTriggerReset;                        // 0xB744(0x0004) (Config)
	float                                              WaterDepthToSwimming;                                     // 0xB748(0x0004) (Config)
	float                                              WaterDepthToWalking;                                      // 0xB74C(0x0004) (Config)
	float                                              SwimmingSurfaceDepth;                                     // 0xB750(0x0004) (Config)
	float                                              SwimmingDrowningDepth;                                    // 0xB754(0x0004) (Config)
	float                                              SwimmingDrowningStaminaStart;                             // 0xB758(0x0004) (Config)
	float                                              SwimmingDrowningStaminaEnd;                               // 0xB75C(0x0004) (Config)
	float                                              PairedWalkPregLynnRunningMeterRate;                       // 0xB760(0x0004) (Config)
	float                                              PairedWalkPregLynnWalkingMeterRate;                       // 0xB764(0x0004) (Config)
	float                                              PairedWalkPregLynnIdleMeterRate;                          // 0xB768(0x0004) (Config)
	float                                              PairedWalkPregLynnHurtDurationMin;                        // 0xB76C(0x0004) (Config)
	float                                              PairedWalkPregLynnHurtDurationMax;                        // 0xB770(0x0004) (Config)
	float                                              PairedWalkPregLynnLimitedWalkRampDuration;                // 0xB774(0x0004) (Config)
	float                                              MinFallHeightForDamage;                                   // 0xB778(0x0004) (Config)
	float                                              MaxFallHeightForDamage;                                   // 0xB77C(0x0004) (Config)
	float                                              MaxFallHeightForWaterDeath;                               // 0xB780(0x0004) (Config)
	float                                              FallHeightForBigLandingCrawled;                           // 0xB784(0x0004) (Config)
	float                                              FallHeightForBigLanding;                                  // 0xB788(0x0004) (Config)
	float                                              FallHeightForSmallLanding;                                // 0xB78C(0x0004) (Config)
	float                                              FallHeightForSpeedPenalty;                                // 0xB790(0x0004) (Config)
	float                                              FallHeightForStumble;                                     // 0xB794(0x0004) (Config)
	float                                              FallHeightForHardStumble;                                 // 0xB798(0x0004) (Config)
	float                                              FallHorDistanceForHardStumble;                            // 0xB79C(0x0004) (Config)
	float                                              SpeedMinForStumble;                                       // 0xB7A0(0x0004) (Config)
	float                                              UnderwaterMovementMaxHeadBobbing;                         // 0xB7A4(0x0004) (Config)
	float                                              UnderwaterZOffset;                                        // 0xB7A8(0x0004) (Config)
	float                                              DeathGripMouseInputCooldownRateFast;                      // 0xB7AC(0x0004) (Config)
	float                                              DeathGripMouseInputCooldownRateSlow;                      // 0xB7B0(0x0004) (Config)
	float                                              DeathGripMouseInputCooldownThresh;                        // 0xB7B4(0x0004) (Config)
	float                                              DeathGripGamepadFastDurationThresh;                       // 0xB7B8(0x0004) (Config)
	float                                              DeathGripGamepadSlowDurationThresh;                       // 0xB7BC(0x0004) (Config)
	float                                              DeathGripMouseFastDurationThresh;                         // 0xB7C0(0x0004) (Config)
	float                                              DeathGripMouseSlowDurationThresh;                         // 0xB7C4(0x0004) (Config)
	float                                              CamcorderHudFOV;                                          // 0xB7C8(0x0004) (Config)
	float                                              BleedingHealthLossPerSeconds;                             // 0xB7CC(0x0004) (Config)
	float                                              MaxHealthForBleeding;                                     // 0xB7D0(0x0004) (Config)
	float                                              MaxHealthForBleedingWithBlade;                            // 0xB7D4(0x0004) (Config)
	float                                              ChancesOfBleeding;                                        // 0xB7D8(0x0004) (Config)
	float                                              MinBleedEffectRatio;                                      // 0xB7DC(0x0004) (Config)
	float                                              FullBleedEffectRatio;                                     // 0xB7E0(0x0004) (Config)
	float                                              BandageVisibleDuration;                                   // 0xB7E4(0x0004) (Config)
	float                                              BandageMinVisibleDurationOnceSeen;                        // 0xB7E8(0x0004) (Config)
	float                                              ValidLookBackStateTimerForTutorial;                       // 0xB7EC(0x0004) (Config)
	float                                              DistanceToInnerDemonForAmbiance;                          // 0xB7F0(0x0004) (Config)
	float                                              DurationOfAutoOpenRecording;                              // 0xB7F4(0x0004) (Config)
	float                                              BandageUsedBleedingInvincibilityDuration;                 // 0xB7F8(0x0004) (Config)
	float                                              LadderCamSpringStiffness;                                 // 0xB7FC(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLHero");
		return ptr;
	}


	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void NativeUnTouch(class AActor* Other);
	void NativeTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool IsInMainMenu();
	void UpdateDifficultyBasedValues();
	bool HandleTeleport(TArray<class UObject*> DestList, bool bUpdateRotation, bool bCheckOverlap, float TeleportDistance, TArray<class AVolume*> TeleportVolumes, int PreferredDestIndex);
	void OutsideWorldBounds();
	void FellOutOfWorld(class UClass* dmgType);
	void MakeFootstepNoise(int footIndex);
	void SetMeshVisibility(bool bVisible);
	void EndViewTarget(class APlayerController* PC);
	void BecomeViewTarget(class APlayerController* PC);
	void PlayLanded(const struct FVector& landingLocation, float ImpactVel);
	void NativePlayLanded(const struct FVector& landingLocation, float ImpactVel);
	void TakeFallingDamage(const struct FVector& fallLocation);
	bool HealDamage(int Amount, class AController* Healer, class UClass* DamageType);
	void TakeDamage(int Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void NativeInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void PossessedBy(class AController* C, bool bVehicleTransition);
	void RefreshInventory();
	void SetHeroWalkableFloor(float Angle);
	void TryForceEnterRaft(bool ignoreAssertIfUnsucessful);
	void OverrideRaftAttachmentMode(bool bManuallyControlled);
	void AllowRiverMovement();
	void DisallowRiverMovement(bool bClearVelocity);
	void QuickHeroTest();
	bool CanBeGrabbedUnder();
	bool CanBeFatalitized();
	bool CanBeAttacked();
	void BarrelEntryNotify();
	void LandingMaybeStayCrouched();
	void EndOfHandWatchingNotify();
	void HandContactNotify();
	void InventoryToggleNotify();
	void BodyBandageHideAllIfNotVisibleNotify();
	void BodyBandageHideAllNotify();
	void BodyBandageStepNotify();
	void ShowPickupNotify();
	void HidePickupNotify();
	void BandageDetachNotify();
	void BandageAttachNotify();
	void CSAActivationNotify();
	void BarrelCoverDetachNotify();
	void BarrelCoverAttachNotify();
	void GlassesPickedUpNotify();
	void PutBackGlassesNotify();
	void LoseGlassesNotify();
	void PostRaftBrokenNotify();
	void RaftDetachNotify();
	void RaftAttachNotify();
	void ExitingWaterNotify();
	void EnteringWaterNotify();
	void SlideUnderCommitStanceNotify();
	void HideCamcorderNotify();
	void SetCamcorderVisibleNotify();
	void ResetNeckOffsetNotify();
	void DecapitatedNotify();
	void GroinInjuryNotify();
	void DieNotify();
	void OverrideCameraSettingsNotify(class UOLAnimNotify_OverrideCameraParams* camParamsNotify);
	void BandageUsedNotify();
	void BatteriesReloadedNotify();
	void CamcorderLoweredNotify();
	void CamcorderRaisedNotify();
	void CamcorderAvailableNotify();
	void WardrobeDoorEndNotify();
	void WardrobeDoorNotify();
	void BarrelInteractionEndNotify();
	void BarrelInteractionNotify();
	void BasementWindowEndNotify();
	void BasementWindowNotify();
	void WindowAnimEndNotify();
	void WindowAnimStartNotify();
	void TryInteractDoorOpen();
	void DoorAnimNotify();
	void DropNotify();
	void PickupNotify();
	bool TryGrabFromUnder(class AOLEnemyPawn* Attacker, const struct FVector& StartLocation, const struct FVector& AttackStartLocation);
	bool TryGrabFromBed(class AOLEnemyPawn* Attacker);
	bool TryGrabFromLocker(class AOLEnemyPawn* Attacker);
	void ExitCinematicMode(class USeqAct_ToggleCinematicMode* seqAction);
	void EnterCinematicMode(class USeqAct_ToggleCinematicMode* seqAction);
	void StartSpecialMove(TEnumAsByte<ESpecialMoveType> moveType, const struct FVector& targetPosition, const struct FVector& TargetDirection, TEnumAsByte<EAdjustPositionTargetType> TargetType);
	void RespawnHero();
	void OnPossess();
	void ConditionalMakeDoorChimesNoise(class AOLDoorChimes* DoorChimes);
	void TakeKnockbackDamage(int Damage, class AActor* InstigatedBy, float Knockback, const struct FVector& HitNormal);
	void TakeElectricDamage(int Damage, float Knockback, const struct FVector& HitNormal, class UAkEvent* ElectricSoundEvent);
	void NativeTakeFallingDamage(const struct FVector& fallLocation);
	void NativeTakeDamage(int Damage, class AActor* InstigatedBy, TEnumAsByte<EDamageType> DamageType, const struct FVector& OverrideDamageDirection, bool bNonFatal);
	void NativeDisplayDebug(class UCanvas* Canvas, float* out_YL, float* out_YPos);
	void GetCamera(struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void NativeOnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void NativePostBeginPlay();
	void NativeDestroyed();
	void HandleSeamlessTeleport();
	void ResetAfterTeleport();
	bool IsSprinting();
	bool IsRunning();
	bool TryRun();
	void Walk();
	struct FRotator GetViewRotation();
	struct FVector GetPawnViewLocation();
};


// Class OLGame.OLWorld
// 0x0384 (0x03EC - 0x0068)
class UOLWorld : public UObject
{
public:
	struct FWorldStateData                             CurrentWorldState;                                        // 0x0068(0x0030) (NeedCtorLink)
	float                                              CacheRadius;                                              // 0x0098(0x0004) (Const)
	TArray<class AOLVolumetricFog*>                    CachedVolumetricFogs;                                     // 0x009C(0x0010) (Transient, NeedCtorLink)
	TArray<class ALandscapeWaterActor*>                CachedWaterLandscapeActors;                               // 0x00AC(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLHidingSpot*>                       CachedHidingSpots;                                        // 0x00BC(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLDoor*>                             CachedDoors;                                              // 0x00CC(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLWindow*>                           CachedWindows;                                            // 0x00DC(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLBasementWindow*>                   CachedBasementWindows;                                    // 0x00EC(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLBed*>                              CachedBeds;                                               // 0x00FC(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLPickableObject*>                   CachedPickables;                                          // 0x010C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLLadderMarker*>                     CachedLadders;                                            // 0x011C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLStairsMarker*>                     CachedStairs;                                             // 0x012C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLCrawlMarker*>                      CachedCrawls;                                             // 0x013C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLSqueezeMarker*>                    CachedSqueezes;                                           // 0x014C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLCSA*>                              CachedCSAs;                                               // 0x015C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLRTPCDistanceModifier*>             CachedRTPCDistanceModifiers;                              // 0x016C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLRTPCPlayerLookModifier*>           CachedRTPCPlayerLookModifiers;                            // 0x017C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLCornerMarker*>                     CachedCorners;                                            // 0x018C(0x0010) (Transient, NeedCtorLink)
	TArray<struct FCornerData>                         CachedCornersData;                                        // 0x019C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLRecordingMarker*>                  CachedRecordingMarkers;                                   // 0x01AC(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLPreferredPathMarker*>              CachedPreferredPathMarkers;                               // 0x01BC(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLAIInvestigationVolume*>            CachedInvestigationVolumes;                               // 0x01CC(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLAIInvestigationPoint*>             CachedInvestigationPoints;                                // 0x01DC(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLTripActor*>                        CachedTripActors;                                         // 0x01EC(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLHidingBarrel*>                     CachedHidingBarrels;                                      // 0x01FC(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLWardrobe*>                         CachedWardrobes;                                          // 0x020C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLPhysicsVolume*>                    CachedPhysicsVolume;                                      // 0x021C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLSoundConnector*>                   CachedSoundConnectors;                                    // 0x022C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLSoundEnvironmentVolume*>           CachedSoundEnvVolumes;                                    // 0x023C(0x0010) (Transient, NeedCtorLink)
	TArray<class ALandscapeProxy*>                     CachedWaterLandscapeProxies;                              // 0x024C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLRiverMarker*>                      CachedRiverMarkers;                                       // 0x025C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLPushableSplineMarker*>             CachedPushableSplineMarkers;                              // 0x026C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLRaftLimitSplineMarker*>            CachedRaftLimitMarkers;                                   // 0x027C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLRaftCollisionMarker*>              CachedRaftCollisionMarkers;                               // 0x028C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLPushableObject*>                   CachedPushables;                                          // 0x029C(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLPushableBlockingVolume*>           CachedPushableBlockingVolumes;                            // 0x02AC(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLPushableTriggerVolume*>            CachedPushableTriggerVolumes;                             // 0x02BC(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLDamageBlockingVolume*>             CachedDamageBlockingVolumes;                              // 0x02CC(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLFloatingObjectBase*>               CachedFloatingObjects;                                    // 0x02DC(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLDoorChimes*>                       CachedDoorChimes;                                         // 0x02EC(0x0010) (Transient, NeedCtorLink)
	struct FPointer                                    CachedRaftCollisionMarkersTree;                           // 0x02FC(0x0008) (Const, Native, Transient)
	int                                                CachedRaftCollisionMarkersTreeCRC;                        // 0x0304(0x0004) (Transient)
	TArray<class AOLLedgeMarker*>                      GlobalLedgeMarkers;                                       // 0x0308(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLSlidingSlopeMarker*>               GlobalSlidingSlopes;                                      // 0x0318(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLSlideUnderMarker*>                 GlobalSlideUnderMarkers;                                  // 0x0328(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLBeamMarker*>                       GlobalBeams;                                              // 0x0338(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLHandReactionMarker*>               GlobalHandReactionMarkers;                                // 0x0348(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLLedgeMarker*>                      LocalLedgeMarkers;                                        // 0x0358(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLSlidingSlopeMarker*>               LocalSlidingSlopes;                                       // 0x0368(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLSlideUnderMarker*>                 LocalSlideUnderMarkers;                                   // 0x0378(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLBeamMarker*>                       LocalBeams;                                               // 0x0388(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLHandReactionMarker*>               LocalHandReactionMarkers;                                 // 0x0398(0x0010) (Transient, NeedCtorLink)
	struct FVector                                     CachedObjectsPos;                                         // 0x03A8(0x000C) (Transient)
	TArray<struct FPointer>                            CachedLevelList;                                          // 0x03B4(0x0010) (Native, Transient)
	TArray<class ULevelStreaming*>                     LevelsPendingReattach;                                    // 0x03C4(0x0010) (Transient, NeedCtorLink)
	int                                                CurrentActorIdxToReattach;                                // 0x03D4(0x0004) (Transient)
	unsigned long                                      bForceUpdateLocalCache : 1;                               // 0x03D8(0x0004) (Transient)
	TArray<struct FName>                               ResettedLevelList;                                        // 0x03DC(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLWorld");
		return ptr;
	}

};


// Class OLGame.OLPlayerController
// 0x04B4 (0x10EC - 0x0C38)
class AOLPlayerController : public AUDKPlayerController
{
public:
	class AOLHero*                                     HeroPawn;                                                 // 0x0C38(0x0008)
	class AOLHUD*                                      HUD;                                                      // 0x0C40(0x0008)
	class UOLInventoryManager*                         InventoryManager;                                         // 0x0C48(0x0008)
	class UOLTutorialManager*                          TutorialManager;                                          // 0x0C50(0x0008)
	class UOLSoundEnvironmentManager*                  SoundEnvManager;                                          // 0x0C58(0x0008)
	class UOLFXManager*                                FXManager;                                                // 0x0C60(0x0008)
	class UOLAICoordinator*                            AICoordinator;                                            // 0x0C68(0x0008)
	class UOLSeqAct_SplashScreen*                      ActiveSplashScreen;                                       // 0x0C70(0x0008)
	unsigned long                                      bFlushingStreaming : 1;                                   // 0x0C78(0x0004)
	unsigned long                                      bHasCamcorder : 1;                                        // 0x0C78(0x0004)
	unsigned long                                      bBlockedOnLoading : 1;                                    // 0x0C78(0x0004)
	unsigned long                                      bShowingKismetControlledLoadingScreen : 1;                // 0x0C78(0x0004)
	unsigned long                                      bShowingLoadingOverlay : 1;                               // 0x0C78(0x0004)
	unsigned long                                      bClearWorldStateOnFirstCheckpoint : 1;                    // 0x0C78(0x0004) (Transient)
	unsigned long                                      bProfileSettingsUpdated : 1;                              // 0x0C78(0x0004)
	unsigned long                                      bApplyPawnCheckpointStateOnNextCheckpoint : 1;            // 0x0C78(0x0004) (Transient)
	unsigned long                                      bRunInput : 1;                                            // 0x0C78(0x0004)
	unsigned long                                      bRunHeld : 1;                                             // 0x0C78(0x0004)
	unsigned long                                      bCrouchButtonDown : 1;                                    // 0x0C78(0x0004)
	unsigned long                                      bValidDoorHold : 1;                                       // 0x0C78(0x0004)
	unsigned long                                      bWardrobeValidDoorHold : 1;                               // 0x0C78(0x0004)
	unsigned long                                      bInvalidateLeanInput : 1;                                 // 0x0C78(0x0004)
	unsigned long                                      bInvalidateReleasedUse : 1;                               // 0x0C78(0x0004)
	unsigned long                                      bReloadButtonDown : 1;                                    // 0x0C78(0x0004)
	unsigned long                                      bLeanLeftReleased : 1;                                    // 0x0C78(0x0004)
	unsigned long                                      bLeanRightReleased : 1;                                   // 0x0C78(0x0004)
	unsigned long                                      bLookBackReleased : 1;                                    // 0x0C78(0x0004)
	unsigned long                                      bLeftStickReleased : 1;                                   // 0x0C78(0x0004)
	unsigned long                                      bReloadButtonDownReleased : 1;                            // 0x0C78(0x0004)
	unsigned long                                      bBackOnCamcorderHudRoot : 1;                              // 0x0C78(0x0004)
	unsigned long                                      ResetAllowFocusChange : 1;                                // 0x0C78(0x0004)
	unsigned long                                      bToggleCrouch : 1;                                        // 0x0C78(0x0004)
	unsigned long                                      bForceToggleCrouch : 1;                                   // 0x0C78(0x0004) (Config)
	unsigned long                                      bDeathGripNoFail : 1;                                     // 0x0C78(0x0004)
	unsigned long                                      bIsVideoRecording : 1;                                    // 0x0C78(0x0004)
	unsigned long                                      bIgnoreRecordingTime : 1;                                 // 0x0C78(0x0004)
	unsigned long                                      bPendingInputStyleChangedNotify : 1;                      // 0x0C78(0x0004) (Transient)
	unsigned long                                      bOverriddenMusic : 1;                                     // 0x0C78(0x0004)
	unsigned long                                      bOverrideMusicStateAsMinimum : 1;                         // 0x0C78(0x0004)
	unsigned long                                      bTravellingToCheckpoint : 1;                              // 0x0C78(0x0004)
	unsigned long                                      bTravelCheckPersistent : 1;                               // 0x0C7C(0x0004)
	unsigned long                                      bTravelCheckForceUnload : 1;                              // 0x0C7C(0x0004)
	unsigned long                                      bForceLevelReset : 1;                                     // 0x0C7C(0x0004)
	unsigned long                                      bUsedHidingSpot : 1;                                      // 0x0C7C(0x0004)
	unsigned long                                      bReloadedBatteries : 1;                                   // 0x0C7C(0x0004)
	unsigned long                                      bGameStartedFromChapter : 1;                              // 0x0C7C(0x0004)
	unsigned long                                      bShowCompletePushablePrompt : 1;                          // 0x0C7C(0x0004) (Config)
	unsigned long                                      bBehindView : 1;                                          // 0x0C7C(0x0004)
	unsigned long                                      bDebugFixedCam : 1;                                       // 0x0C7C(0x0004)
	unsigned long                                      bDebugFreeCam : 1;                                        // 0x0C7C(0x0004)
	unsigned long                                      bDebugGhost : 1;                                          // 0x0C7C(0x0004)
	unsigned long                                      bSlowDownFPS : 1;                                         // 0x0C7C(0x0004)
	unsigned long                                      bWasLeftMouseBtnDown : 1;                                 // 0x0C7C(0x0004)
	unsigned long                                      bLeftMouseBtnDown : 1;                                    // 0x0C7C(0x0004)
	unsigned long                                      bWasRightMouseBtnDown : 1;                                // 0x0C7C(0x0004)
	unsigned long                                      bRightMouseBtnDown : 1;                                   // 0x0C7C(0x0004)
	unsigned long                                      bWasShiftBtnDown : 1;                                     // 0x0C7C(0x0004)
	unsigned long                                      bShiftBtnDown : 1;                                        // 0x0C7C(0x0004)
	int                                                NumBatteries;                                             // 0x0C80(0x0004)
	int                                                MaxNumBatteries;                                          // 0x0C84(0x0004)
	int                                                NumBandages;                                              // 0x0C88(0x0004)
	int                                                MaxNumBandages;                                           // 0x0C8C(0x0004)
	int                                                NrmMaxNumBatteries;                                       // 0x0C90(0x0004) (Config)
	int                                                HardMaxNumBatteries;                                      // 0x0C94(0x0004) (Config)
	int                                                NightmareMaxNumBatteries;                                 // 0x0C98(0x0004) (Config)
	int                                                NrmMaxNumBandages;                                        // 0x0C9C(0x0004) (Config)
	int                                                HardMaxNumBandages;                                       // 0x0CA0(0x0004) (Config)
	int                                                NightmareMaxNumBandages;                                  // 0x0CA4(0x0004) (Config)
	int                                                DefaultNumBatteries;                                      // 0x0CA8(0x0004) (Config)
	float                                              LowBatteryWarningThreshold;                               // 0x0CAC(0x0004) (Config)
	float                                              GameOverActivatedTimestamp;                               // 0x0CB0(0x0004)
	float                                              HoldActionDelay;                                          // 0x0CB4(0x0004) (Const)
	float                                              TryExitCrawlTimeStamp;                                    // 0x0CB8(0x0004) (Transient)
	TArray<TEnumAsByte<EPlayerInteractionType>>        AvailableInteractions;                                    // 0x0CBC(0x0010) (NeedCtorLink)
	TArray<TEnumAsByte<EPlayerInteractionType>>        IgnoredInteractions;                                      // 0x0CCC(0x0010) (NeedCtorLink)
	struct FString                                     CSAPrompt;                                                // 0x0CDC(0x0010) (NeedCtorLink)
	struct FString                                     PickupTargetName;                                         // 0x0CEC(0x0010) (NeedCtorLink)
	class UOLProfileSettings*                          ProfileSettings;                                          // 0x0CFC(0x0008)
	float                                              MasterVolume;                                             // 0x0D04(0x0004)
	int                                                RecordingCapturedSinceLastLookAt;                         // 0x0D08(0x0004) (Transient)
	int                                                NumberOfPlayerDeath;                                      // 0x0D0C(0x0004) (Transient)
	struct FDigitalInputs                              Inputs;                                                   // 0x0D10(0x0004)
	unsigned char                                      bLeanInputLeft;                                           // 0x0D14(0x0001) (Input)
	unsigned char                                      bLeanInputRight;                                          // 0x0D15(0x0001) (Input)
	unsigned char                                      bUseButtonDown;                                           // 0x0D16(0x0001) (Input)
	unsigned char                                      bLookbackInput;                                           // 0x0D17(0x0001) (Input)
	TEnumAsByte<EAIMusicState>                         AIMusic;                                                  // 0x0D18(0x0001)
	TEnumAsByte<EAIMusicState>                         OverriddenMusicState;                                     // 0x0D19(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0D1A(0x0002) MISSED OFFSET
	float                                              PureMouseX;                                               // 0x0D1C(0x0004) (Input)
	float                                              AnalogLeanInputLeft;                                      // 0x0D20(0x0004) (Input)
	float                                              AnalogLeanInputRight;                                     // 0x0D24(0x0004) (Input)
	int                                                ZoomInput;                                                // 0x0D28(0x0004)
	float                                              UsePressedDuration;                                       // 0x0D2C(0x0004)
	float                                              CrouchPressedDuration;                                    // 0x0D30(0x0004)
	float                                              ToggleRunActivatedTime;                                   // 0x0D34(0x0004)
	float                                              ReloadPressedDurationForBandage;                          // 0x0D38(0x0004)
	struct FVector2D                                   MouseMoveAccum;                                           // 0x0D3C(0x0008)
	float                                              MouseMoveTimestamp;                                       // 0x0D44(0x0004)
	struct FVector2D                                   LeftStickInitialDirection;                                // 0x0D48(0x0008)
	float                                              LeftStickIntialDirectionTime;                             // 0x0D50(0x0004)
	struct FVector                                     LastPlayerInputIntent;                                    // 0x0D54(0x000C)
	float                                              ViewStabilizationRatio;                                   // 0x0D60(0x0004)
	struct FName                                       RecordingMomentName;                                      // 0x0D64(0x0008)
	TArray<unsigned char>                              RecordingBuffer;                                          // 0x0D6C(0x0010) (NeedCtorLink)
	TArray<unsigned char>                              ThumbnailBuffer;                                          // 0x0D7C(0x0010) (NeedCtorLink)
	struct FThreadSafeCounter                          RecordingWrittenCounter;                                  // 0x0D8C(0x0004) (Const, Native, Transient)
	struct FThreadSafeCounter                          RecordingReadCounter;                                     // 0x0D90(0x0004) (Const, Native, Transient)
	struct FName                                       LastRecordingMomentName;                                  // 0x0D94(0x0008)
	float                                              LastRecordingMomentTime;                                  // 0x0D9C(0x0004)
	TArray<struct FCamcorderShot>                      CamcorderShots;                                           // 0x0DA0(0x0010) (Transient, NeedCtorLink)
	float                                              LastInputStyleChangedTimestamp;                           // 0x0DB0(0x0004) (Transient)
	float                                              MinIntervalForInputChangedNotify;                         // 0x0DB4(0x0004) (Const)
	struct FTouchZoomData                              TouchZoom;                                                // 0x0DB8(0x0014)
	struct FLinearColor                                LightBarColor;                                            // 0x0DCC(0x0010)
	float                                              LightBarPulsePhase;                                       // 0x0DDC(0x0004)
	TArray<struct FName>                               CompletedRecordingMoments;                                // 0x0DE0(0x0010) (NeedCtorLink)
	TArray<struct FName>                               CompletedRecordingMomentGroups;                           // 0x0DF0(0x0010) (Transient, NeedCtorLink)
	TArray<struct FName>                               UnreadRecordingMoments;                                   // 0x0E00(0x0010) (NeedCtorLink)
	class AOLRecordingMarker*                          PendingRecordingMarker;                                   // 0x0E10(0x0008)
	float                                              RecordingCompletedTime;                                   // 0x0E18(0x0004)
	struct FStruggleData                               Struggle;                                                 // 0x0E1C(0x00CC) (Transient, NeedCtorLink)
	float                                              StruggleInputThresholdForWin;                             // 0x0EE8(0x0004) (Config)
	float                                              StruggleShakesThresholdForWin;                            // 0x0EEC(0x0004) (Config)
	float                                              StruggleInputThresholdForWinNoFail;                       // 0x0EF0(0x0004) (Config)
	float                                              StruggleShakesThresholdForWinNoFail;                      // 0x0EF4(0x0004) (Config)
	float                                              AIDistance;                                               // 0x0EF8(0x0004)
	float                                              OverriddenMusicDistance;                                  // 0x0EFC(0x0004)
	float                                              AIChaseMusicTimer;                                        // 0x0F00(0x0004)
	float                                              AIChaseMusicTimeDelay;                                    // 0x0F04(0x0004) (Config)
	struct FName                                       MusicAIStateGroup;                                        // 0x0F08(0x0008) (Const)
	struct FName                                       MusicAIStateNone;                                         // 0x0F10(0x0008) (Const)
	struct FName                                       MusicAIStatePatrol;                                       // 0x0F18(0x0008) (Const)
	struct FName                                       MusicAIStateInvestigate;                                  // 0x0F20(0x0008) (Const)
	struct FName                                       MusicAIStateChase;                                        // 0x0F28(0x0008) (Const)
	struct FName                                       LoadingStateGroup;                                        // 0x0F30(0x0008) (Const)
	struct FName                                       LoadingStateOn;                                           // 0x0F38(0x0008) (Const)
	struct FName                                       LoadingStateOff;                                          // 0x0F40(0x0008) (Const)
	struct FName                                       AIDistanceRTPC;                                           // 0x0F48(0x0008) (Const)
	class UAkEvent*                                    SndResetMixStates;                                        // 0x0F50(0x0008) (Const)
	class UAkEvent*                                    SndStopAllMusic;                                          // 0x0F58(0x0008) (Const)
	float                                              StableLevelsTimestamp;                                    // 0x0F60(0x0004)
	struct FName                                       SpecificLoadingMovie;                                     // 0x0F64(0x0008)
	class UOLSeqAct_PrepareMapTransition*              PreloadingDuringTravelSeqAct;                             // 0x0F6C(0x0008)
	struct AOLPlayerController_FCheckpointRecord       LastCheckpointRecord;                                     // 0x0F74(0x00D4) (NeedCtorLink)
	struct FObjectiveData                              CurrentObjectiveData;                                     // 0x1048(0x0024)
	class UAkEvent*                                    CurrentObjectiveVO;                                       // 0x106C(0x0008)
	int                                                NumUsedBandages;                                          // 0x1074(0x0004)
	float                                              TotalTimeUnderwater;                                      // 0x1078(0x0004)
	float                                              MicrophoneUsedTime;                                       // 0x107C(0x0004)
	float                                              TotalCrawlDistance;                                       // 0x1080(0x0004)
	float                                              TotalPlayTime;                                            // 0x1084(0x0004)
	int                                                EasiestGameDifficulty;                                    // 0x1088(0x0004)
	float                                              LastDeathQTETimestamp;                                    // 0x108C(0x0004)
	int                                                NumberOfDeathQTE;                                         // 0x1090(0x0004)
	struct FRenderingPerformanceOverrides              RenderingOverrides;                                       // 0x1094(0x0004)
	class UClass*                                      MatineeCameraClass;                                       // 0x1098(0x0008)
	struct FVector                                     CalcViewLocation;                                         // 0x10A0(0x000C)
	struct FRotator                                    CalcViewRotation;                                         // 0x10AC(0x000C)
	struct FRotator                                    DebugCamRot;                                              // 0x10B8(0x000C)
	struct FVector                                     DebugCamPos;                                              // 0x10C4(0x000C)
	float                                              DebugFreeCamSpeed;                                        // 0x10D0(0x0004)
	float                                              DebugFreeCamFOV;                                          // 0x10D4(0x0004)
	float                                              SlowDownFactor;                                           // 0x10D8(0x0004)
	TArray<class UCodecMovieOutlast*>                  PendingCodecMovieOutlast;                                 // 0x10DC(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLPlayerController");
		return ptr;
	}


	void UnlockAchievement(TEnumAsByte<EOutlastAchievement> achievement);
	void NotifyDifficultyChanged();
	void UpdateDifficultyBasedValues();
	void CheckForProfileUpdate();
	void UpdateLocalCacheOfProfileSettings(class UOLProfileSettings* EffectiveProfileSettings);
	void ClientSaveAllPlayerData(bool bShouldForce, bool bSkipCacheUpdate);
	void OnProfileWriteComplete(unsigned char LocalUserNum, bool bWasSuccessful);
	void ClearSaveProfileDelegate(int ControllerId, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate);
	void ResetProfile();
	void SaveProfile();
	void OnControllerChanged(int ControllerId, bool bIsConnected);
	void NativeOnControllerChanged(int ControllerId, bool bIsConnected);
	void UnregisterPlayerDataStores();
	void RegisterCustomPlayerDataStores();
	void CheatGiveAllCollectibles();
	bool ShippingCheat_GiveAllCheckpoints();
	void QueueClearWorldState();
	void ClearSavedStates();
	void ClearAllProgress();
	void SaveBeforeQuitting();
	void ClientCommitMapChangeNoOverlay();
	void ClientCommitMapChange();
	void StartNewGameAtCheckpoint(bool bSaveToDisk, struct FString* CheckpointStr);
	void ApplyCheckpointRecord(struct AOLPlayerController_FCheckpointRecord* Record);
	void GetSaveGameNameFromRecord(struct AOLPlayerController_FCheckpointRecord* Record, struct FString* SaveGameName);
	void CreateCheckpointRecord(struct AOLPlayerController_FCheckpointRecord* Record);
	void SetSaveGameName(const struct FString& SaveGameName);
	void GetSaveGameName(struct FString* SaveGameName);
	void NativeGetSaveGameNameFromRecord(struct AOLPlayerController_FCheckpointRecord* Record, struct FString* SaveGameName);
	void NativeApplyCheckpointRecord(struct AOLPlayerController_FCheckpointRecord* Record);
	void NativeGetCurrentCheckpointRecord(struct AOLPlayerController_FCheckpointRecord* Record);
	void StopAllSounds();
	void DrawHUD(class AHUD* H);
	void FullScreenOverlayChanged();
	void ForcePause(bool bPause);
	void ClientSetHUD(class UClass* newHUDType);
	void OnSetMesh(class USeqAct_SetMesh* Action);
	void ClientSetCameraFade(bool _enableFading, const struct FColor& _FadeColor, const struct FVector2D& _FadeAlpha, float _FadeTime, bool _fadeAudio);
	void SetCinematicMode(class USeqAct_ToggleCinematicMode* Action, bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsButtons);
	void GetPlayerViewPoint(struct FVector* POVLocation, struct FRotator* POVRotation);
	float GetFOVAngle();
	void SpawnCamera();
	void SetCameraMode(const struct FName& NewCamMode);
	bool UsingFirstPersonCamera();
	void SetBehindView(bool bNewBehindView);
	void BehindView();
	void NotifyProfileChanged();
	bool CleanTextFilterButtonInput(const struct FName& ButtonName);
	bool IsLookInputIgnored();
	void ToggleCrawl();
	void PrototypeActionE();
	void PrototypeActionD();
	void PrototypeActionC();
	void PrototypeActionB();
	void PrototypeActionA();
	void GammaCalibration();
	void ToggleInventory();
	void ToggleMicrophone();
	void ToggleRun();
	void PressedJump();
	void PressedUseBandage();
	void ReleasedReloadBatteries();
	void PressedReloadBatteries();
	void StopZoom();
	void StartZoomOut();
	void StartZoomIn();
	void ZoomOut();
	void ZoomIn();
	void ToggleCamcorder();
	void ToggleNightVision();
	void ReleasedUseButton();
	void PressedUseButton();
	bool PerformedUseAction();
	void ResetWorldNoCheckpoint();
	void Destroyed();
	void ClientRestart(class APawn* NewPawn);
	void Reset();
	void UnPossess();
	void Possess(class APawn* inPawn, bool bVehicleTransition);
	void PostBeginPlay();
	bool ShowRecordingTime();
	struct FString GetGraphicAPIString();
	bool ShowGraphicAPIString();
	void HideLoadingOverlay();
	void ShowLoadingOverlay();
	void SetVolume(float VolumeLevel);
	bool ApplyKeyBindings(class UOLProfileSettings* UserConfiguredSettings);
	void SetGamma(float GammaValue);
	float GetGamma();
	void NativePlayerMove(float DeltaTime);
};


// Class OLGame.OLCheatManager
// 0x00C8 (0x0170 - 0x00A8)
class UOLCheatManager : public UGameCheatManager
{
public:
	int                                                GameSpeedLevel;                                           // 0x00A8(0x0004)
	unsigned long                                      bCheatsEnabled : 1;                                       // 0x00AC(0x0004) (Config)
	unsigned long                                      bUnlimitedBatteries : 1;                                  // 0x00AC(0x0004) (Config)
	unsigned long                                      bGamepadCheatsEnabled : 1;                                // 0x00AC(0x0004)
	unsigned long                                      bDebugGameplay : 1;                                       // 0x00AC(0x0004)
	unsigned long                                      bDebugSoundEnvironment : 1;                               // 0x00AC(0x0004)
	unsigned long                                      bDebugSoundMeter : 1;                                     // 0x00AC(0x0004)
	unsigned long                                      bDebugGameState : 1;                                      // 0x00AC(0x0004)
	unsigned long                                      bDebugVO : 1;                                             // 0x00AC(0x0004)
	unsigned long                                      bDebugSubtitles : 1;                                      // 0x00AC(0x0004) (Config)
	unsigned long                                      bDebugPerception : 1;                                     // 0x00AC(0x0004)
	unsigned long                                      bDebugCamera : 1;                                         // 0x00AC(0x0004)
	unsigned long                                      bDebugTrajectory : 1;                                     // 0x00AC(0x0004)
	unsigned long                                      bDebugKismet : 1;                                         // 0x00AC(0x0004)
	unsigned long                                      bDebugInvestigation : 1;                                  // 0x00AC(0x0004)
	unsigned long                                      bDebugAIAnims : 1;                                        // 0x00AC(0x0004)
	unsigned long                                      bDebugAIConfig : 1;                                       // 0x00AC(0x0004)
	unsigned long                                      bDebugLineChecks : 1;                                     // 0x00AC(0x0004)
	unsigned long                                      bDrawDebugHero : 1;                                       // 0x00AC(0x0004)
	unsigned long                                      bDrawDebugAI : 1;                                         // 0x00AC(0x0004)
	unsigned long                                      bDebugClearanceChecks : 1;                                // 0x00AC(0x0004)
	unsigned long                                      bEnableNewPhysicsHero : 1;                                // 0x00AC(0x0004)
	unsigned long                                      bEnableNewPhysicsBots : 1;                                // 0x00AC(0x0004)
	unsigned long                                      bSimplifiedPhysicsHero : 1;                               // 0x00AC(0x0004)
	unsigned long                                      bSimplifiedPhysicsBots : 1;                               // 0x00AC(0x0004)
	unsigned long                                      bSimplifiedPhysics : 1;                                   // 0x00AC(0x0004)
	unsigned long                                      bDebugPhysXVolumeView : 1;                                // 0x00AC(0x0004)
	unsigned long                                      bForceShowScreenMessages : 1;                             // 0x00AC(0x0004)
	unsigned long                                      bShowPrecomputedLightVolumes : 1;                         // 0x00AC(0x0004)
	unsigned long                                      bForceFakeLongSubtitles : 1;                              // 0x00AC(0x0004)
	unsigned long                                      bSimulateSlowStreaming : 1;                               // 0x00AC(0x0004)
	unsigned long                                      bMuted : 1;                                               // 0x00AC(0x0004) (Config)
	unsigned long                                      bSuppressAllMessages : 1;                                 // 0x00AC(0x0004) (Config)
	unsigned long                                      bDebugPhysMaterials : 1;                                  // 0x00B0(0x0004) (Config)
	unsigned long                                      bDebugDeathGrip : 1;                                      // 0x00B0(0x0004) (Config)
	unsigned long                                      bPausedForFreeCam : 1;                                    // 0x00B0(0x0004)
	unsigned long                                      bGamepadPressedLS : 1;                                    // 0x00B0(0x0004)
	unsigned long                                      bGamepadPressedRS : 1;                                    // 0x00B0(0x0004)
	unsigned long                                      bGamepadPressedLT : 1;                                    // 0x00B0(0x0004)
	unsigned long                                      bGamepadPressedRT : 1;                                    // 0x00B0(0x0004)
	unsigned long                                      bFakeWriteRecordingFails : 1;                             // 0x00B0(0x0004)
	unsigned long                                      bFakeReadRecordingFails : 1;                              // 0x00B0(0x0004)
	int                                                GamepadCPIdx;                                             // 0x00B4(0x0004)
	int                                                AILogVerbosity;                                           // 0x00B8(0x0004) (Config)
	struct FString                                     DebugSoundEnvFilter;                                      // 0x00BC(0x0010) (NeedCtorLink)
	struct FString                                     DebugKismetFilter;                                        // 0x00CC(0x0010) (NeedCtorLink)
	int                                                DebugKismetPage;                                          // 0x00DC(0x0004)
	float                                              NextSpikeTime;                                            // 0x00E0(0x0004)
	float                                              AutoSpikeDelay;                                           // 0x00E4(0x0004)
	float                                              LastGamepadCheatInputTime;                                // 0x00E8(0x0004)
	TArray<struct FDebugTrajectoryPoint>               DebugTrajectoryPoints;                                    // 0x00EC(0x0010) (NeedCtorLink)
	TArray<struct FDebugClearanceCheck>                DebugClearanceChecks;                                     // 0x00FC(0x0010) (NeedCtorLink)
	TArray<struct FDebugNoiseData>                     DebugNoise;                                               // 0x010C(0x0010) (NeedCtorLink)
	struct FDebugSoundMeterData                        SoundMeterInfo;                                           // 0x011C(0x0030)
	TArray<struct FKismetLogData>                      KismetLog;                                                // 0x014C(0x0010) (NeedCtorLink)
	TArray<struct FLineCheckLogData>                   LineCheckLog;                                             // 0x015C(0x0010) (NeedCtorLink)
	int                                                CurrentFrameId;                                           // 0x016C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLCheatManager");
		return ptr;
	}


	void ToggleFakeLongSubtitles();
	void ToggleFakeRecordingReadFailure();
	void ToggleFakeRecordingWriteFailure();
	void ClearAllDingoRecordings();
	void FakeDingoRecordingRight();
	void DingoTest();
	void ResetTutorialReminderTimers();
	bool IsFakeNotFullyDownloaded();
	void ToggleGameFullyDownloaded();
	void TriggerNotDownloadScreen();
	void FakeControllerDisconnected(bool bDelayedPause);
	void ForceHandsCrucifixion();
	void DecrementDifficultyModeModifier();
	void IncrementDifficultyModeModifier();
	void DecrementDifficultyMode();
	void IncrementDifficultyMode();
	void ToggleCharacterPhysicDebug();
	void TryGeneratePath(float PosX, float PosY, float PosZ, bool bTight, float BufferDist);
	void SetAIVerbosity(int NewVerbosity);
	void KillSelectedEnemy();
	void KillAllEnemiesButSelected();
	void KillAllEnemies();
	void CleanupAfterKillAll();
	void SetLanguage(const struct FString& LanguageCode);
	void ReloadSoundBanks(bool bFrenchVO);
	bool ProcessCheatInput(const struct FName& Key, bool bPressed);
	void StartGamepadCheckpoint();
	void ScrollGamepadCPIdx(bool bForward);
	bool IsViewModeUnlit();
	void ResetProfileProgression();
	void SetLastCheckpointName(const struct FString& CPName);
	void SetLastCheckpointId(int Index);
	void SetFinishedGame(bool hasFinishedGame, bool hasFinishedDLC);
	void OutlastPause();
	void DebugClosestAI();
	void ResetGS();
	void DeactivateGS(const struct FName& gsName);
	void ActivateGS(const struct FName& gsName);
	void DumpGS();
	void DebugPhysMaterials();
	void DebugPerception();
	void OldBotPhysics();
	void NewBotPhysics();
	void OldHeroPhysics();
	void NewHeroPhysics();
	void OldPhysics();
	void newPhysics();
	void ToggleHeroInclusionForSimplifiedPhysics();
	void TogglePhysicsMode();
	void SetSimplifiedPhysics(bool bHero, bool bBots, bool bSimplified);
	void SetNewPhysics(bool bHero, bool bBots);
	void SuppressAllMessages();
	void AIEvents(int NumLines);
	void AILogs(int NumLines);
	void DrawDebug();
	void ToggleMute();
	void SetVolumeThreshold(float NewThreshold);
	void MakeNoise(float NoiseAmount);
	void InflictDamage(float Amount);
	void ResetTutorials();
	void ResetWorldToSavedState();
	void ResetWorldState();
	void ResetPushables();
	void ResetDoors();
	void GammaDown();
	void GammaUp();
	void SetGamma(float newGamma);
	void LoadGame(const struct FString& Filename);
	void SaveGame(const struct FString& Filename);
	void LoseBandages();
	void GiveItem(const struct FString& ItemName);
	void ApplyCP(const struct FString& CPName);
	void cplist();
	void cp(const struct FString& CPName);
	void Checkpoint(const struct FString& CPName);
	void KillFade();
	void ToggleUnlimitedBatteries();
	void LoseAllProfileRecordingMoment();
	void LoseRecordingMoment(const struct FString& moment);
	void GetRecordingMoment(const struct FString& moment);
	void GetAllRecordingMoments();
	void ResetBandageTime();
	void ForceHeroSkin(int Type, int SubType);
	void AddBandage();
	void RechargeNightVision();
	void Ghost();
	void GhostPawn(bool ghosting);
	void FasterGameSpeed();
	void SlowerGameSpeed();
	void NormalGameSpeed();
	void UpdateGameSpeed();
	void SingleFrame();
	void TeleportToFreeCam();
	void ToggleFixedCam();
	void ToggleFreeCamNoPause();
	void ToggleFreeCam();
	void AutoSpike(float Spike, float Delay);
	void Spike(float Spike);
	void BadFPS(float slowdown);
	void DebugAI();
	void ShowHeroDebug();
	void ShowOLProfiler();
	void ShowPerformance();
	void ShowCollisions();
	void ShowPaths();
	void ShowStatLevels();
	void DebugSubtitles();
	void LogSoundEvents();
	void DebugVO();
	void DebugGameState();
	void DebugAIConfig();
	void SlowStreaming();
	void DebugAIAnims();
	void DebugInvestigation();
	void DebugClearance();
	void DebugSoundMeter();
	void ShowPrecomputedLightVolumes();
	void DebugTrajectory();
	void DebugKismet(const struct FString& Filter);
	void DebugCamera();
	void DebugLineChecks();
	void DumpKismetLog(const struct FString& Filter);
	void DebugSoundEnvironment(const struct FString& Filter);
	void DebugGameplay();
	void SaveAllCheckpoints();
	void DeleteAllSaves();
	void KillAll(class UClass* aClass);
	void God();
	void TakeScreenshot();
	void CycleCollisionView();
	void ViewShaderComplexity();
	void ViewDetailLighting();
	void ViewLit();
	void ViewUnlit();
	void ViewWireframe();
	void ToggleGamepadCheats();
	void ToggleCheats();
	void CheatMessage(const struct FString& Message);
	class UOLCheatManager* STATIC_GetCheatManager();
};


// Class OLGame.OLCheckpoint
// 0x0048 (0x03B8 - 0x0370)
class AOLCheckpoint : public APlayerStart
{
public:
	struct FName                                       CheckpointName;                                           // 0x0370(0x0008) (Edit)
	struct FName                                       PersistentLevelName;                                      // 0x0378(0x0008) (Edit)
	struct FGameTime                                   WorldTime;                                                // 0x0380(0x000C) (Edit)
	struct FGameTime                                   SegmentEndTime;                                           // 0x038C(0x000C) (Edit)
	unsigned long                                      bSnapWorldTime : 1;                                       // 0x0398(0x0004) (Edit)
	unsigned long                                      bSpawnCrouched : 1;                                       // 0x0398(0x0004) (Edit)
	unsigned long                                      bSpawnCrawling : 1;                                       // 0x0398(0x0004) (Edit)
	unsigned long                                      bSpawnInLocker : 1;                                       // 0x0398(0x0004) (Edit)
	unsigned long                                      bSpawnInWardrobe : 1;                                     // 0x0398(0x0004) (Edit)
	unsigned long                                      bSpawnInWardrobeLeftSide : 1;                             // 0x0398(0x0004) (Edit)
	unsigned long                                      bSpawnOnRaft : 1;                                         // 0x0398(0x0004) (Edit)
	unsigned long                                      bSpawnOnBrokenRaft : 1;                                   // 0x0398(0x0004) (Edit)
	unsigned long                                      bSpawnLedgeHanging : 1;                                   // 0x0398(0x0004) (Edit)
	unsigned long                                      bSpawnSqueezing : 1;                                      // 0x0398(0x0004) (Edit)
	unsigned long                                      bSpawnInBarrel : 1;                                       // 0x0398(0x0004) (Edit)
	unsigned long                                      bSpawnSwimming : 1;                                       // 0x0398(0x0004) (Edit)
	unsigned long                                      bYoungBlake : 1;                                          // 0x0398(0x0004) (Edit)
	unsigned long                                      bForceGiveBandages : 1;                                   // 0x0398(0x0004) (Edit)
	unsigned long                                      bClearBandages : 1;                                       // 0x0398(0x0004) (Edit)
	unsigned long                                      ParDeathCanIncreaseDifficulty : 1;                        // 0x0398(0x0004)
	unsigned long                                      ParDeathCanLowerDifficulty : 1;                           // 0x0398(0x0004) (Edit)
	int                                                MinimumNumberOfBandageOnSpawn;                            // 0x039C(0x0004) (Edit)
	struct FDynamicDifficulty                          DifficultyData;                                           // 0x03A0(0x0010) (Edit)
	int                                                LowParDeath;                                              // 0x03B0(0x0004)
	int                                                HighParDeath;                                             // 0x03B4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLCheckpoint");
		return ptr;
	}


	void OnPlayerSpawn();
};


// Class OLGame.OLCheckpointList
// 0x0034 (0x027C - 0x0248)
class AOLCheckpointList : public AActor
{
public:
	TArray<struct FName>                               CheckpointList;                                           // 0x0248(0x0010) (Edit, NeedCtorLink)
	TArray<struct FCheckpointRedirectItem>             RenameTable;                                              // 0x0258(0x0010) (Edit, NeedCtorLink)
	TEnumAsByte<EOutlastGameType>                      GameType;                                                 // 0x0268(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0269(0x0003) MISSED OFFSET
	TArray<class AOLCheckpoint*>                       CheckpointObjects;                                        // 0x026C(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLCheckpointList");
		return ptr;
	}


	bool STATIC_Script_IsUnreached(struct FName* TestCheckpoint, struct FName* CurrentCheckpoint);
};


// Class OLGame.OLConsole
// 0x0000 (0x0280 - 0x0280)
class UOLConsole : public UConsole
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLConsole");
		return ptr;
	}


	bool InputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> Event, float AmountDepressed, bool bGamepad);
	void AddCustomCommandsToAutoComplete();
};


// Class OLGame.OLDifficultyConfig
// 0x0000 (0x0068 - 0x0068)
class UOLDifficultyConfig : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLDifficultyConfig");
		return ptr;
	}

};


// Class OLGame.OLDamageActor
// 0x0050 (0x0298 - 0x0248)
class AOLDamageActor : public AActor
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0248(0x0004) (Edit)
	unsigned long                                      bReactToHit : 1;                                          // 0x0248(0x0004) (Edit)
	unsigned long                                      bNonFatal : 1;                                            // 0x0248(0x0004) (Edit)
	unsigned long                                      bInitiallyEnabled : 1;                                    // 0x0248(0x0004) (Transient)
	float                                              Radius;                                                   // 0x024C(0x0004) (Edit)
	struct FIntByDifficulty                            Damage;                                                   // 0x0250(0x0034) (Edit)
	float                                              MinDelayBeforeHits;                                       // 0x0284(0x0004) (Edit)
	float                                              HitStrength;                                              // 0x0288(0x0004) (Edit)
	float                                              LastHitTime;                                              // 0x028C(0x0004) (Transient)
	class UDrawSphereComponent*                        PreviewComp;                                              // 0x0290(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLDamageActor");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class OLGame.OLDLCManager
// 0x0004 (0x0128 - 0x0124)
class UOLDLCManager : public UDownloadableContentManager
{
public:
	unsigned long                                      bDLCInstalled : 1;                                        // 0x0124(0x0004)
	unsigned long                                      bFakeDLCInstalledCooked : 1;                              // 0x0124(0x0004) (Config)
	unsigned long                                      bFakeDLCInstalledLoose : 1;                               // 0x0124(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLDLCManager");
		return ptr;
	}


	bool FindAndInstallDLC();
};


// Class OLGame.OLDoor
// 0x032C (0x0574 - 0x0248)
class AOLDoor : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;                     // 0x0248(0x0008) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;                   // 0x0250(0x0008) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IInterface_CornerOwner;                           // 0x0258(0x0008) (Const, Native, NoExport)
	class UStaticMeshComponent*                        Mesh;                                                     // 0x0260(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        DoorMainMesh;                                             // 0x0268(0x0008) (Edit, ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      DoorSkelMesh;                                             // 0x0270(0x0008) (Edit, ExportObject, Component, EditInline)
	struct FName                                       IdleAnim;                                                 // 0x0278(0x0008) (Edit)
	struct FName                                       BrokenForwardAnim;                                        // 0x0280(0x0008) (Edit)
	struct FName                                       BrokenBackwardAnim;                                       // 0x0288(0x0008) (Edit)
	class UDynamicLightEnvironmentComponent*           DoorMainLightEnvironment;                                 // 0x0290(0x0008) (Edit, ExportObject, Component, EditInline)
	class UOLSoundConnectorComponent*                  SoundConnectorComp;                                       // 0x0298(0x0008) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        LockPartA;                                                // 0x02A0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        LockPartB;                                                // 0x02A8(0x0008) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        LockPartC;                                                // 0x02B0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        PushBar;                                                  // 0x02B8(0x0008) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        DoorChimesRBCollider;                                     // 0x02C0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        BlockingCollision;                                        // 0x02C8(0x0008) (Edit, ExportObject, Component, EditInline)
	float                                              InitialOpenAngle;                                         // 0x02D0(0x0004) (Edit)
	float                                              MaxOpenAngle;                                             // 0x02D4(0x0004) (Edit, EditConst)
	float                                              PlayerOpenedAngle;                                        // 0x02D8(0x0004) (Edit, EditConst)
	unsigned long                                      bReverseDirection : 1;                                    // 0x02DC(0x0004) (Edit)
	unsigned long                                      bHasInteractiveLock : 1;                                  // 0x02DC(0x0004) (Edit)
	unsigned long                                      bLocked : 1;                                              // 0x02DC(0x0004) (Edit)
	unsigned long                                      bFakeBlocked : 1;                                         // 0x02DC(0x0004) (Edit)
	unsigned long                                      bFakeUnlocked : 1;                                        // 0x02DC(0x0004) (Edit)
	unsigned long                                      bFirstTryKnocking : 1;                                    // 0x02DC(0x0004) (Edit)
	unsigned long                                      bNoLockedInteraction : 1;                                 // 0x02DC(0x0004) (Edit)
	unsigned long                                      bAutoClose : 1;                                           // 0x02DC(0x0004) (Edit)
	unsigned long                                      bAutoClosePlayerOnly : 1;                                 // 0x02DC(0x0004) (Edit)
	unsigned long                                      bCantClose : 1;                                           // 0x02DC(0x0004) (Edit)
	unsigned long                                      bNoPushKnob : 1;                                          // 0x02DC(0x0004) (Edit)
	unsigned long                                      bSimplePushToOpen : 1;                                    // 0x02DC(0x0004) (Edit, EditConst)
	unsigned long                                      bHasPushBar : 1;                                          // 0x02DC(0x0004) (Edit, EditConst)
	unsigned long                                      bOneWayDoor : 1;                                          // 0x02DC(0x0004) (Edit, EditConst)
	unsigned long                                      bApplyRulesLive : 1;                                      // 0x02DC(0x0004) (Edit, DuplicateTransient)
	unsigned long                                      bNoSavedState : 1;                                        // 0x02DC(0x0004) (Edit, DuplicateTransient)
	unsigned long                                      bMatineePlayDefaultSounds : 1;                            // 0x02DC(0x0004) (Edit)
	unsigned long                                      bAICanUseDoor : 1;                                        // 0x02DC(0x0004) (Edit)
	unsigned long                                      bDontBreak : 1;                                           // 0x02DC(0x0004) (Edit)
	unsigned long                                      bBashWontBreak : 1;                                       // 0x02DC(0x0004) (Edit)
	unsigned long                                      bAlwaysBreak : 1;                                         // 0x02DC(0x0004) (Edit)
	unsigned long                                      bWaitForTriggerToBreak : 1;                               // 0x02DC(0x0004) (Edit)
	unsigned long                                      bTrimToDoorForInvestigate : 1;                            // 0x02DC(0x0004) (Edit)
	unsigned long                                      bSplitNavMesh : 1;                                        // 0x02DC(0x0004) (Edit)
	unsigned long                                      bAIAlwaysCloses : 1;                                      // 0x02DC(0x0004) (Edit)
	unsigned long                                      bAIClosesOnlyPullSide : 1;                                // 0x02DC(0x0004) (Edit)
	unsigned long                                      bAIClosesOnlyPushSide : 1;                                // 0x02DC(0x0004) (Edit)
	unsigned long                                      bAIUnspawnGate : 1;                                       // 0x02DC(0x0004) (Edit)
	unsigned long                                      bUseObstacleOnClose : 1;                                  // 0x02DC(0x0004) (Edit)
	unsigned long                                      bCollideWithDoorChimes : 1;                               // 0x02DC(0x0004) (Edit)
	unsigned long                                      bSpecialAnimatedDoor : 1;                                 // 0x02DC(0x0004) (Edit)
	unsigned long                                      bBrokenForward : 1;                                       // 0x02DC(0x0004)
	unsigned long                                      bPlayingLockedAnim : 1;                                   // 0x02E0(0x0004) (Transient)
	unsigned long                                      bPlayingBlockedAnim : 1;                                  // 0x02E0(0x0004) (Transient)
	unsigned long                                      bPlayingFrenzyAnim : 1;                                   // 0x02E0(0x0004) (Transient)
	unsigned long                                      bAnimatingLockHandle : 1;                                 // 0x02E0(0x0004) (Transient)
	unsigned long                                      bBreakTriggered : 1;                                      // 0x02E0(0x0004) (Transient)
	unsigned long                                      bBlocked : 1;                                             // 0x02E0(0x0004) (Transient)
	unsigned long                                      bWasInitiallyLocked : 1;                                  // 0x02E0(0x0004) (Transient)
	unsigned long                                      bInstantBreak : 1;                                        // 0x02E0(0x0004) (Transient)
	unsigned long                                      bPreciseCloseTiming : 1;                                  // 0x02E0(0x0004) (Transient)
	unsigned long                                      bWasOpenedByPlayer : 1;                                   // 0x02E0(0x0004) (Transient)
	unsigned long                                      bWasOpenedByPlayerFromInside : 1;                         // 0x02E0(0x0004) (Transient)
	unsigned long                                      bUsingPawnBoneRotation : 1;                               // 0x02E0(0x0004) (Transient)
	unsigned long                                      bKnownLocked : 1;                                         // 0x02E0(0x0004) (Transient)
	unsigned long                                      bPreventKnocking : 1;                                     // 0x02E0(0x0004) (Transient)
	unsigned long                                      bAITraversing : 1;                                        // 0x02E0(0x0004) (Transient)
	unsigned long                                      bMatineeIsLooping : 1;                                    // 0x02E0(0x0004) (Transient)
	unsigned long                                      bObstacleRegistered : 1;                                  // 0x02E0(0x0004)
	unsigned long                                      bPlayingOpeningSound : 1;                                 // 0x02E0(0x0004) (Transient)
	unsigned long                                      bPlayingACS : 1;                                          // 0x02E0(0x0004) (Transient)
	float                                              OpeningSpeed;                                             // 0x02E4(0x0004) (Edit)
	float                                              ClosingSpeed;                                             // 0x02E8(0x0004) (Edit)
	float                                              ExplicitOcclusionFactor;                                  // 0x02EC(0x0004) (Edit)
	float                                              DefaultOcclusionFactor;                                   // 0x02F0(0x0004) (Edit, EditConst)
	float                                              OverrideInteractionSideOffset;                            // 0x02F4(0x0004) (Edit)
	class UStaticMesh*                                 MeshOverrideLeft;                                         // 0x02F8(0x0008)
	class UStaticMesh*                                 MeshOverrideRight;                                        // 0x0300(0x0008)
	class UStaticMesh*                                 MeshOverride;                                             // 0x0308(0x0008) (Edit)
	class USkeletalMesh*                               SkelMeshOverride;                                         // 0x0310(0x0008) (Edit)
	struct FCornerData                                 CornerDoorForward;                                        // 0x0318(0x0038) (Edit)
	struct FCornerData                                 CornerDoorBackward;                                       // 0x0350(0x0038) (Edit)
	class AOLCSA*                                      UnlockingCSA;                                             // 0x0388(0x0008) (Edit)
	TArray<struct FGameFlowDoorRule>                   GameFlowRules;                                            // 0x0390(0x0010) (Edit, DuplicateTransient, NeedCtorLink)
	float                                              LockerOpeningSpeed;                                       // 0x03A0(0x0004) (Const)
	float                                              LockerClosingSpeed;                                       // 0x03A4(0x0004) (Const)
	float                                              StaticOffsetFwdToCenterNormal;                            // 0x03A8(0x0004) (Const)
	float                                              StaticOffsetFwdToCenterLocker;                            // 0x03AC(0x0004) (Const)
	float                                              LockedAnimTotalTime;                                      // 0x03B0(0x0004) (Const)
	float                                              LockedAnimAmplitude;                                      // 0x03B4(0x0004) (Const)
	float                                              BlockedAnimTotalTime;                                     // 0x03B8(0x0004) (Const)
	float                                              BlockedAnimAmplitude;                                     // 0x03BC(0x0004) (Const)
	TEnumAsByte<EOLDoorType>                           DoorType;                                                 // 0x03C0(0x0001) (Edit)
	TEnumAsByte<EDoorMaterial>                         DoorMaterial;                                             // 0x03C1(0x0001)
	TEnumAsByte<EOLDoorMeshType>                       DoorMeshType;                                             // 0x03C2(0x0001) (Edit)
	TEnumAsByte<EDoorState>                            DoorState;                                                // 0x03C3(0x0001) (Transient)
	TEnumAsByte<EDoorBreakState>                       DoorBreakState;                                           // 0x03C4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03C5(0x0003) MISSED OFFSET
	TArray<class UMaterialInstance*>                   MaterialOverrides;                                        // 0x03C8(0x0010) (Edit, NeedCtorLink)
	struct FVector                                     DoorKnobOffset;                                           // 0x03D8(0x000C) (Edit)
	float                                              MatineeAngle;                                             // 0x03E4(0x0004) (Edit)
	float                                              MatineeAdjustToValidAngleSpeed;                           // 0x03E8(0x0004) (Edit)
	float                                              OverrideMatineeStopAngle;                                 // 0x03EC(0x0004) (Edit)
	class UAkEvent*                                    AutomaticMatineeStopSoundEvent;                           // 0x03F0(0x0008) (Edit)
	float                                              PathPointOffset;                                          // 0x03F8(0x0004) (Edit)
	int                                                NumBashesAfterBlocked;                                    // 0x03FC(0x0004) (Edit)
	float                                              PathfindingCostOpen;                                      // 0x0400(0x0004) (Edit)
	float                                              PathfindingCostMustOpen;                                  // 0x0404(0x0004) (Edit)
	float                                              PathfindingCostMustUnlock;                                // 0x0408(0x0004) (Edit)
	float                                              PathfindingCostMustBash;                                  // 0x040C(0x0004) (Edit)
	float                                              PathfindingCostExtraBots;                                 // 0x0410(0x0004) (Edit)
	float                                              AIOpenDoorKnockback;                                      // 0x0414(0x0004) (Edit)
	class UAkEvent*                                    SndLocking;                                               // 0x0418(0x0008) (Edit)
	class UAkEvent*                                    SndUnlocking;                                             // 0x0420(0x0008) (Edit)
	class UAkEvent*                                    BashDoorSnd;                                              // 0x0428(0x0008) (Edit)
	float                                              OpenRatio;                                                // 0x0430(0x0004)
	float                                              TargetOpenRatio;                                          // 0x0434(0x0004) (Transient)
	float                                              CurrentSpeed;                                             // 0x0438(0x0004) (Const)
	float                                              ProceduralAnimElapsedTime;                                // 0x043C(0x0004) (Transient)
	float                                              LockedRatio;                                              // 0x0440(0x0004) (Transient)
	float                                              TargetLockedRatio;                                        // 0x0444(0x0004) (Transient)
	float                                              PreciseCloseDuration;                                     // 0x0448(0x0004) (Transient)
	float                                              PreciseCloseStartTime;                                    // 0x044C(0x0004) (Transient)
	float                                              LastFinishedClosingTime;                                  // 0x0450(0x0004) (Transient)
	float                                              AutoCloseStartTime;                                       // 0x0454(0x0004) (Transient)
	float                                              PawnBoneControlEndTime;                                   // 0x0458(0x0004) (Transient)
	float                                              InitialBoneControlYaw;                                    // 0x045C(0x0004) (Transient)
	float                                              AutoCloseDelay;                                           // 0x0460(0x0004) (Transient)
	float                                              FrenzyAnimationDuration;                                  // 0x0464(0x0004) (Transient)
	float                                              FrenzyAnimationOpeningPct;                                // 0x0468(0x0004) (Transient)
	float                                              FrenzyAnimationOpenedPct;                                 // 0x046C(0x0004) (Transient)
	float                                              FrenzyAnimationMaxAngle;                                  // 0x0470(0x0004) (Transient)
	class USeqAct_Interp*                              DrivingMatinee;                                           // 0x0474(0x0008) (Transient)
	struct FDoorShakeData                              ShakeData;                                                // 0x047C(0x0040)
	struct FDoorShakeData                              BashShakeData;                                            // 0x04BC(0x0040) (Edit)
	class AOLDoor*                                     TwinDoor;                                                 // 0x04FC(0x0008) (Transient)
	class AOLPawn*                                     DoorUser;                                                 // 0x0504(0x0008) (Transient)
	class AOLPawn*                                     DoorInstigator;                                           // 0x050C(0x0008) (Transient)
	float                                              InitialOpeningAngle;                                      // 0x0514(0x0004) (Transient)
	class UOLInvestigationComponent*                   InvestigationComponent;                                   // 0x0518(0x0008) (Edit, ExportObject, Component, EditInline)
	TArray<struct FDoorAttachmentData>                 DoorAttachments;                                          // 0x0520(0x0010) (Transient, NeedCtorLink)
	class AOLDoorChimes*                               LinkedChimes;                                             // 0x0530(0x0008) (Transient)
	float                                              LastChimesAngle;                                          // 0x0538(0x0004) (Transient)
	float                                              LastChimesTime;                                           // 0x053C(0x0004) (Transient)
	struct FVector                                     Edge0Dest;                                                // 0x0540(0x000C)
	struct FVector                                     Edge1Dest;                                                // 0x054C(0x000C)
	struct FGuid                                       DoorGuid;                                                 // 0x0558(0x0010) (Const, EditConst, DuplicateTransient)
	float                                              OpeningIntensity;                                         // 0x0568(0x0004) (Transient)
	struct FName                                       RTPCOpeningDoorIntensity;                                 // 0x056C(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLDoor");
		return ptr;
	}


	void BreakDoor(class AOLPawn* Breaker, bool bReversed, bool bNoSound);
	void BashDoor(bool bReversed);
	bool ShouldBreak(class AOLBot* Bot);
	void InterpolationFinished(class USeqAct_Interp* InterpAction);
	void InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst);
	void StopMatineeAnim(bool bHeroTriggered);
	void StartMatineeAnim(bool bLooping);
	void OnDestroy(class USeqAct_Destroy* Action);
	void SoftDestroy();
	void NotifyHandlesToWait();
	void NotifyHandlesToRepath();
	void ForcePushBlockingHero();
	void FastOpen(class AOLPawn* OpeningPawn);
	bool IsOnPullSide(struct FVector* TestLocation);
	float GetOpenAngle();
	void OnStateChanged();
	void TriggerEvent(TEnumAsByte<EDoorEventType> EventType, class AOLPawn* Triggerer);
	void TriggerBreakDoorCameraShake();
	void StopShaking();
	void StartShaking(const struct FDoorShakeData& ShakeParams, bool bSwitchToBreakingMesh, bool bReversed, bool bFromAI);
	bool IsBroken();
	void UnregisterNavmeshObstacle();
	void RegisterNavMeshObstacle();
	struct FVector ScriptGetCenterLocation();
};


// Class OLGame.OLDoorChimes
// 0x000C (0x02B4 - 0x02A8)
class AOLDoorChimes : public ASkeletalMeshActor
{
public:
	class UAkEvent*                                    SoundEvent;                                               // 0x02A8(0x0008) (Edit)
	float                                              TouchTime;                                                // 0x02B0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLDoorChimes");
		return ptr;
	}


	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PlayChimes();
};


// Class OLGame.OLDoorData
// 0x08A0 (0x0908 - 0x0068)
class UOLDoorData : public UObject
{
public:
	class UPhysicsAsset*                               LeftPhysicsAsset;                                         // 0x0068(0x0008) (Const)
	class UPhysicsAsset*                               RightPhysicsAsset;                                        // 0x0070(0x0008) (Const)
	struct FDoorMeshTypeData                           DoorMeshData[0x13];                                       // 0x0078(0x0068) (NeedCtorLink)
	class UAnimSet*                                    DoorsAnimSet;                                             // 0x0830(0x0008)
	struct FName                                       IdleAnim;                                                 // 0x0838(0x0008)
	struct FName                                       ForwardBrokenAnimation;                                   // 0x0840(0x0008)
	struct FName                                       BackwardBrokenAnimation;                                  // 0x0848(0x0008)
	struct FDoorSoundEvents                            Sounds[0x3];                                              // 0x0850(0x0038)
	class UAkEvent*                                    SndStopOpening;                                           // 0x08F8(0x0008) (Const)
	class UAkEvent*                                    SndLockerBash;                                            // 0x0900(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLDoorData");
		return ptr;
	}

};


// Class OLGame.OLEngine
// 0x0078 (0x0C10 - 0x0B98)
class UOLEngine : public UGameEngine
{
public:
	TArray<struct FSaveFileInfo>                       SaveFiles;                                                // 0x0B98(0x0010) (NeedCtorLink)
	TEnumAsByte<ECheckpointAction>                     PendingCheckpointAction;                                  // 0x0BA8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0BA9(0x0003) MISSED OFFSET
	TArray<unsigned char>                              SaveDataBuffer;                                           // 0x0BAC(0x0010) (NeedCtorLink)
	struct FName                                       SaveGameOriginalCheckpointName;                           // 0x0BBC(0x0008)
	struct FName                                       OverrideCheckpointName;                                   // 0x0BC4(0x0008)
	unsigned long                                      bDisableMotionBlur : 1;                                   // 0x0BCC(0x0004) (Config)
	class UAkEvent*                                    StartupMovieSound;                                        // 0x0BD0(0x0008)
	float                                              NextRefreshDLCTime;                                       // 0x0BD8(0x0004)
	struct FColor                                      Chroma_InactiveColor;                                     // 0x0BDC(0x0004) (Config)
	struct FColor                                      Chroma_BaseColor;                                         // 0x0BE0(0x0004) (Config)
	struct FColor                                      Chroma_BaseMedHealth;                                     // 0x0BE4(0x0004) (Config)
	struct FColor                                      Chroma_Hidden;                                            // 0x0BE8(0x0004) (Config)
	struct FColor                                      Chroma_HiddenMedHealth;                                   // 0x0BEC(0x0004) (Config)
	struct FColor                                      Chroma_Underwater;                                        // 0x0BF0(0x0004) (Config)
	struct FColor                                      Chroma_NV;                                                // 0x0BF4(0x0004) (Config)
	struct FColor                                      Chroma_NVNoBat;                                           // 0x0BF8(0x0004) (Config)
	struct FColor                                      Chroma_NVMedHealth;                                       // 0x0BFC(0x0004) (Config)
	struct FColor                                      Chroma_HurtPulseHigh;                                     // 0x0C00(0x0004) (Config)
	struct FColor                                      Chroma_HurtPulseLow;                                      // 0x0C04(0x0004) (Config)
	struct FColor                                      Chroma_Damage1;                                           // 0x0C08(0x0004) (Config)
	struct FColor                                      Chroma_Damage2;                                           // 0x0C0C(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLEngine");
		return ptr;
	}


	bool UsingFixedSaveLocation();
	void SaveGameImmediate(bool bSaveToDisk, const struct FString& ForceSaveGameName, bool bNewSave, const struct FString& OverrideSaveCheckpointName);
	void InitiateSaveGame(bool bSaveToDisk);
	TEnumAsByte<ELoadGameResult> HasAnyValidSaveGame();
	TEnumAsByte<ELoadGameResult> HasValidSaveGame();
	void RefreshSaveFiles();
	bool IsGameFullyDownloaded();
	bool TryStartDLCGame();
	bool ShouldShowNewDLCGame();
	bool RefreshDLC();
	bool CheckReloadForDLC();
};


// Class OLGame.OLDingoEngine
// 0x0028 (0x0C38 - 0x0C10)
class UOLDingoEngine : public UOLEngine
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                             // 0x0C10(0x0008) (Const, Native, NoExport)
	TArray<unsigned char>                              PendingCallbacks;                                         // 0x0C18(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __DingoUserInitializedCallback__Delegate;                 // 0x0C28(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLDingoEngine");
		return ptr;
	}


	void Dingo_OnPressedContinue(int ControllerId);
	void ReturnToPressStartScreen();
	bool ShouldOpenPressStartScreen();
	bool Dingo_ShowLoginUIAndInitializeUser(const struct FScriptDelegate& Callback);
	bool DingoNative_ShowLoginUIAndInitializeUser();
	bool Dingo_ShouldShowLoginUI(int ControllerId);
	int Dingo_OnInitialPressStart(int ControllerId);
	void Dingo_AllowAllControllersInput();
	void OnDingoUserInitialized(bool bSuccess);
	void Dingo_InitializeUser(const struct FScriptDelegate& Callback);
	void DingoNative_StartInitializeUser();
	void DingoUserInitializedCallback(bool bSuccess);
	void GiveRightForRecording();
	void ClearRecordings();
	bool HasEnoughRightsLeftForRecording();
	bool HasRightsForRecording();
	struct FString Dingo_GetActiveGamertag();
	struct FString Dingo_GetSaveFileIdStr(const struct FString& SaveFileName);
	struct FString Dingo_GetSaveFileIconName(const struct FName& CheckpointName);
	bool Dingo_ShowHelpUI();
	bool Dingo_DeleteSaveGame(const struct FString& SaveFileName);
	bool Dingo_SaveGameImmediateToNewSave();
	bool Dingo_SaveGameImmediate(const struct FString& SaveFileName);
	bool Dingo_StartNewGameWithNewSave(const struct FString& startCP);
	bool Dingo_StartNewGameWithSave(const struct FString& startCP, const struct FString& SaveFileName);
	TEnumAsByte<ELoadGameResult> Dingo_LoadMostRecentSaveFile();
	TEnumAsByte<ELoadGameResult> Dingo_LoadSaveGame(const struct FString& SaveFileName);
	bool IsGameFullyDownloaded();
	TEnumAsByte<ELoadGameResult> HasAnyValidSaveGame();
	TEnumAsByte<ELoadGameResult> HasValidSaveGame();
	void RefreshSaveFiles();
};


// Class OLGame.OLOrbisEngine
// 0x0020 (0x0C30 - 0x0C10)
class UOLOrbisEngine : public UOLEngine
{
public:
	TEnumAsByte<EOrbisDialogType>                      ActiveOrbisDialog;                                        // 0x0C10(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0C11(0x0003) MISSED OFFSET
	unsigned long                                      bPausedForSystemDialog : 1;                               // 0x0C14(0x0004)
	unsigned long                                      PlayGoCheckResult : 1;                                    // 0x0C14(0x0004) (Transient)
	float                                              PlayGoTimeStamp;                                          // 0x0C18(0x0004) (Transient)
	int                                                MaxCheckpointId;                                          // 0x0C1C(0x0004) (Transient)
	struct FScriptDelegate                             __SaveDataDialogDoneCallback__Delegate;                   // 0x0C20(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLOrbisEngine");
		return ptr;
	}


	void SetMaxCheckpointId(int MaxCheckpoint);
	bool IsGameFullyDownloaded();
	bool PS4_LoadMostRecentSaveFile();
	bool PS4_LoadCurrentSaveFile();
	TEnumAsByte<ELoadGameResult> HasAnyValidSaveGame();
	TEnumAsByte<ELoadGameResult> HasValidSaveGame();
	int GetNumberOfSaveGames();
	bool SelectAndLoadGame(const struct FScriptDelegate& Callback);
	bool NativeSelectAndLoadGame();
	void NewSaveLocation(const struct FString& startCP);
	void NativeNewSaveLocation(const struct FString& startCP);
	bool SelectSaveLocation(const struct FString& startCP, const struct FScriptDelegate& Callback);
	bool NativeSelectSaveLocation(const struct FString& startCP);
	void FinishedSaveDataDialog(bool bSuccess);
	void SaveDataDialogDoneCallback(bool bSuccess);
	bool UsingFixedSaveLocation();
};


// Class OLGame.OLWinEngine
// 0x0008 (0x0C18 - 0x0C10)
class UOLWinEngine : public UOLEngine
{
public:
	unsigned long                                      bPendingGraphicalSettingsChange : 1;                      // 0x0C10(0x0004)
	int                                                PendingNewLanguage;                                       // 0x0C14(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLWinEngine");
		return ptr;
	}


	bool UpdateProfileKeyBindingsFromSystem(class UOLProfileSettings* ProfileSettings);
	bool UpdateProfileFromSystemSettings(class UOLProfileSettings* ProfileSettings);
	bool UpdateFullscreenFromSystemSettings(class UOLProfileSettings* ProfileSettings);
	bool ApplySystemSettings(class UOLProfileSettings* ProfileSettings);
	void DebugLoadGame(const struct FString& Filename);
	void DebugSaveGame(const struct FString& Filename);
	void SaveAllCheckpoints();
	void RefreshSaveFiles();
	void DeleteSaveFile(const struct FString& Filename);
	TEnumAsByte<ELoadGameResult> LoadSaveFile(const struct FString& Filename);
	TEnumAsByte<ELoadGameResult> HasAnyValidSaveGame();
	TEnumAsByte<ELoadGameResult> HasValidSaveGame();
};


// Class OLGame.OLFlashLight
// 0x002C (0x0310 - 0x02E4)
class AOLFlashLight : public AInterpActor
{
public:
	class UStaticMeshComponent*                        FlashLightMesh;                                           // 0x02E4(0x0008) (Edit, ExportObject, Component, EditInline)
	class ULensFlareComponent*                         LensFlareEye;                                             // 0x02EC(0x0008) (Edit, ExportObject, Component, EditInline)
	class ULensFlareComponent*                         LensFlareCam;                                             // 0x02F4(0x0008) (Edit, ExportObject, Component, EditInline)
	class USpotLightComponent*                         LightSpotLight;                                           // 0x02FC(0x0008) (Edit, ExportObject, Component, EditInline)
	class AOLEnemyPawn*                                OwnerPawn;                                                // 0x0304(0x0008) (Transient)
	unsigned long                                      bDisabled : 1;                                            // 0x030C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLFlashLight");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void TurnOff(bool bHideMesh);
	void TurnOn();
};


// Class OLGame.OLLantern
// 0x003C (0x034C - 0x0310)
class AOLLantern : public AOLFlashLight
{
public:
	class USkeletalMeshComponent*                      LanternMesh;                                              // 0x0310(0x0008) (Edit, ExportObject, Component, EditInline)
	class USpotLightComponent*                         LightSpotLight2;                                          // 0x0318(0x0008) (Edit, ExportObject, Component, EditInline)
	struct FHandleData                                 Handle;                                                   // 0x0320(0x0018)
	struct FHingeData                                  Hinge;                                                    // 0x0338(0x0004)
	struct FName                                       Light1Socket;                                             // 0x033C(0x0008) (Const)
	struct FName                                       Light2Socket;                                             // 0x0344(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLLantern");
		return ptr;
	}


	void TurnOff(bool bHideMesh);
	void TurnOn();
};


// Class OLGame.OLTorch
// 0x0010 (0x0320 - 0x0310)
class AOLTorch : public AOLFlashLight
{
public:
	class UPointLightComponent*                        TorchPointLight;                                          // 0x0310(0x0008) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    TorchEmitter;                                             // 0x0318(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLTorch");
		return ptr;
	}


	void TurnOff(bool bHideMesh);
	void TurnOn();
};


// Class OLGame.OLFloatingObjectBase
// 0x00A0 (0x02E8 - 0x0248)
class AOLFloatingObjectBase : public AActor
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0248(0x0004) (Edit)
	unsigned long                                      bApplyWaterImpulse : 1;                                   // 0x0248(0x0004) (Edit)
	unsigned long                                      bEnableWorldCollision : 1;                                // 0x0248(0x0004) (Edit)
	unsigned long                                      bInitiallyEnabled : 1;                                    // 0x0248(0x0004) (Transient)
	unsigned long                                      bValidWaterLandscape : 1;                                 // 0x0248(0x0004) (Transient)
	unsigned long                                      bNoRiverAtThisLocation : 1;                               // 0x0248(0x0004) (Transient)
	unsigned long                                      bBlendingOut : 1;                                         // 0x0248(0x0004) (Transient)
	unsigned long                                      bFakingWaterMovement : 1;                                 // 0x0248(0x0004) (Transient)
	struct FBobbingConfigData                          BobbingConfig;                                            // 0x024C(0x0020) (Edit)
	float                                              CurrentEffect;                                            // 0x026C(0x0004) (Edit)
	float                                              YawDriftVelocity;                                         // 0x0270(0x0004) (Edit)
	float                                              SurfacingSpeed;                                           // 0x0274(0x0004) (Edit)
	float                                              WaterImpulseStrength;                                     // 0x0278(0x0004) (Edit)
	float                                              WaterImpulseRadius;                                       // 0x027C(0x0004) (Edit)
	float                                              RepulsionRadius;                                          // 0x0280(0x0004) (Edit)
	struct FVector                                     InitialPos;                                               // 0x0284(0x000C) (Transient)
	struct FRotator                                    InitialRot;                                               // 0x0290(0x000C) (Transient)
	float                                              WaterZ;                                                   // 0x029C(0x0004) (Transient)
	class AOLRiverMarker*                              ActiveRiverMarker;                                        // 0x02A0(0x0008) (Transient)
	float                                              BlendingOutStartedTime;                                   // 0x02A8(0x0004) (Transient)
	class AOLRiverMarker*                              RiverStartMarker;                                         // 0x02AC(0x0008) (Transient)
	float                                              RiverSideRatio;                                           // 0x02B4(0x0004) (Transient)
	struct FVector                                     FakeMovementVelocity;                                     // 0x02B8(0x000C) (Transient)
	float                                              LastCollisionTime;                                        // 0x02C4(0x0004) (Transient)
	struct FVector                                     LastCollisionNormal;                                      // 0x02C8(0x000C) (Transient)
	struct FBobbingData                                Bobbing;                                                  // 0x02D4(0x0014) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLFloatingObjectBase");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class OLGame.OLFloatingSkeletalMesh
// 0x0024 (0x030C - 0x02E8)
class AOLFloatingSkeletalMesh : public AOLFloatingObjectBase
{
public:
	class USkeletalMeshComponent*                      SkeletalMesh;                                             // 0x02E8(0x0008) (Edit, ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x02F0(0x0008) (Edit, ExportObject, Component, EditInline)
	float                                              BaseTranslationZ;                                         // 0x02F8(0x0004) (Edit)
	struct FName                                       IdleAnimName;                                             // 0x02FC(0x0008) (Edit)
	struct FName                                       ImpactAnimName;                                           // 0x0304(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLFloatingSkeletalMesh");
		return ptr;
	}

};


// Class OLGame.OLFloatingStaticMesh
// 0x0014 (0x02FC - 0x02E8)
class AOLFloatingStaticMesh : public AOLFloatingObjectBase
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                               // 0x02E8(0x0008) (Edit, ExportObject, Component, EditInline)
	float                                              BaseTranslationZ;                                         // 0x02F0(0x0004) (Edit)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x02F4(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLFloatingStaticMesh");
		return ptr;
	}

};


// Class OLGame.OLFloorMaterialVolume
// 0x0010 (0x0294 - 0x0284)
class AOLFloorMaterialVolume : public AVolume
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0284(0x0004) (Edit)
	int                                                Priority;                                                 // 0x0288(0x0004) (Edit)
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x028C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLFloorMaterialVolume");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class OLGame.OLFXHolder
// 0x0000 (0x0248 - 0x0248)
class AOLFXHolder : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLFXHolder");
		return ptr;
	}

};


// Class OLGame.OLFXManager
// 0x1658 (0x16C0 - 0x0068)
class UOLFXManager : public UObject
{
public:
	struct FPostProcessSettings                        CamcorderPPSSettings;                                     // 0x0068(0x023C) (NeedCtorLink)
	struct FPostProcessSettings                        NVPPSSettings;                                            // 0x02A4(0x023C) (NeedCtorLink)
	struct FPostProcessSettings                        DeathPPSSettings;                                         // 0x04E0(0x023C) (NeedCtorLink)
	struct FPostProcessSettings                        UnderwaterPPSSettings;                                    // 0x071C(0x023C) (NeedCtorLink)
	struct FPostProcessSettings                        UnderwaterBloodPPSSettings;                               // 0x0958(0x023C) (NeedCtorLink)
	struct FPostProcessSettings                        NoGlassesPPSSettings;                                     // 0x0B94(0x023C) (NeedCtorLink)
	struct FPostProcessSettings                        CamcorderHudPPSSettings;                                  // 0x0DD0(0x023C) (NeedCtorLink)
	struct FPostProcessSettings                        InnerDemonPPSSettings;                                    // 0x100C(0x023C) (NeedCtorLink)
	class UPostProcessChain*                           DefaultPPSChain;                                          // 0x1248(0x0008)
	class UPostProcessChain*                           CamcorderPPSChain;                                        // 0x1250(0x0008)
	class UPostProcessChain*                           CamcorderPPSChainConsole;                                 // 0x1258(0x0008)
	class UPostProcessChain*                           NVPPSChain;                                               // 0x1260(0x0008)
	class UPostProcessChain*                           GammaCalibrationPPSChain;                                 // 0x1268(0x0008)
	TArray<class UMaterialInstanceConstant*>           NVSensitiveMaterials;                                     // 0x1270(0x0010) (NeedCtorLink)
	TArray<class UMaterialInstanceConstant*>           CamSensitiveMaterials;                                    // 0x1280(0x0010) (NeedCtorLink)
	TArray<class UMaterialInstanceConstant*>           TimeSensitiveMaterials;                                   // 0x1290(0x0010) (NeedCtorLink)
	class UMaterialInstanceConstant*                   CameraWaveMaterial;                                       // 0x12A0(0x0008)
	class UOLUberPostProcessEffect*                    CurrentUberPostEffect;                                    // 0x12A8(0x0008)
	class UParticleSystemComponent*                    ElectricSparksParticles;                                  // 0x12B0(0x0008) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    WaterSplashParticles;                                     // 0x12B8(0x0008) (ExportObject, Component, EditInline)
	class UMaterialInstanceConstant*                   BloodMaterial;                                            // 0x12C0(0x0008)
	class AOLFXHolder*                                 FXHolder;                                                 // 0x12C8(0x0008)
	struct FDamageTypeParams                           DamageParams[0xE];                                        // 0x12D0(0x0020)
	class UForceFeedbackWaveform*                      ForceFeedbackWaveformA;                                   // 0x1490(0x0008)
	class UForceFeedbackWaveform*                      ForceFeedbackWaveformB;                                   // 0x1498(0x0008)
	class UForceFeedbackWaveform*                      ForceFeedbackWaveformC;                                   // 0x14A0(0x0008)
	class UForceFeedbackWaveform*                      ForceFeedbackWaveformD;                                   // 0x14A8(0x0008)
	class UForceFeedbackWaveform*                      ForceFeedbackWaveformE;                                   // 0x14B0(0x0008)
	TArray<class AOLInnerDemonEffectActor*>            ActiveInnerDemonEffectActors;                             // 0x14B8(0x0010) (Transient, NeedCtorLink)
	TArray<struct FInnerDemonEffectSensitiveActor>     CachedSensitiveActors;                                    // 0x14C8(0x0010) (Transient, Component, NeedCtorLink)
	struct FHaarpEffectData                            HaarpEffect;                                              // 0x14D8(0x0014)
	TArray<struct FRandomHaarpEffectKey>               HaarpEffectKeys;                                          // 0x14EC(0x0010) (Edit, NeedCtorLink)
	struct FRandomHaarpEffectConfig                    RandomHaarpConfig;                                        // 0x14FC(0x0028)
	struct FDamageColumn                               DamageColumns[0x3];                                       // 0x1524(0x0010)
	float                                              CurrentBleedAmount;                                       // 0x1554(0x0004)
	float                                              DesiredBleedAmount;                                       // 0x1558(0x0004)
	float                                              OverrideBleedAscFactor;                                   // 0x155C(0x0004)
	struct FPPSEffectConfig                            GenericPPSConfig;                                         // 0x1560(0x004C) (Component, NeedCtorLink)
	struct FGenericPPSData                             GenericPPS;                                               // 0x15AC(0x0030)
	struct FName                                       UberPostEffectName;                                       // 0x15DC(0x0008)
	struct FName                                       NVParamName;                                              // 0x15E4(0x0008)
	struct FName                                       NVLightParamName;                                         // 0x15EC(0x0008)
	struct FName                                       CamParamName;                                             // 0x15F4(0x0008)
	struct FName                                       TimeParamName;                                            // 0x15FC(0x0008)
	float                                              CamcorderPPSOpacity;                                      // 0x1604(0x0004)
	float                                              CurrentElectricEffect;                                    // 0x1608(0x0004)
	float                                              LastSetElectricEffect;                                    // 0x160C(0x0004)
	float                                              CurrentHurtEffect;                                        // 0x1610(0x0004)
	float                                              CurrentOutOfBreathEffect;                                 // 0x1614(0x0004)
	unsigned long                                      bShowingHurtEffect : 1;                                   // 0x1618(0x0004)
	unsigned long                                      bShowingElectricityEffect : 1;                            // 0x1618(0x0004)
	TEnumAsByte<EPPSMode>                              CurrentPPSMode;                                           // 0x161C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x161D(0x0003) MISSED OFFSET
	struct FBlurData                                   CurrentBlur;                                              // 0x1620(0x001C)
	struct FBlurData                                   HeatBlur;                                                 // 0x163C(0x001C)
	struct FBlurData                                   GlassesBlur;                                              // 0x1658(0x001C)
	float                                              CamcorderHudRatio;                                        // 0x1674(0x0004) (Transient)
	float                                              OverrideMotionBlurRatio;                                  // 0x1678(0x0004)
	float                                              OverrideMotionBlurAmount;                                 // 0x167C(0x0004)
	float                                              OverrideGrainRatio;                                       // 0x1680(0x0004)
	float                                              OverrideGrainAmount;                                      // 0x1684(0x0004)
	int                                                LastUpdateTimeMinute;                                     // 0x1688(0x0004)
	struct FRandomHaarpEffectConfig                    DefaultSchoolHaarpConfig;                                 // 0x168C(0x0028) (Config)
	float                                              HaarpSmoothFactorAsc;                                     // 0x16B4(0x0004) (Config)
	float                                              HaarpSmoothFactorDsc;                                     // 0x16B8(0x0004) (Config)
	float                                              DoubleVisionIntensity;                                    // 0x16BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLFXManager");
		return ptr;
	}


	void SetFXForEnemyPawn(class AOLEnemyPawn* EnemyPawn);
	void DeactivateNightVisionEffect();
	void ActivateCamcorderEffect();
	void ActivateNightVisionEffect(bool bPowered);
	void SetPPSFromScript(TEnumAsByte<EPPSMode> newPPS);
	class UOLFXManager* STATIC_GetFXManager();
};


// Class OLGame.OLGame
// 0x00F0 (0x0594 - 0x04A4)
class AOLGame : public AUDKGame
{
public:
	class UOLVoiceManager*                             VoiceManager;                                             // 0x04A4(0x0008)
	class UOLWorld*                                    TheWorld;                                                 // 0x04AC(0x0008)
	class UOLUIMessage*                                HintScreen;                                               // 0x04B4(0x0008)
	TEnumAsByte<EDifficultyModeOption>                 DifficultyMode;                                           // 0x04BC(0x0001)
	TEnumAsByte<EDifficultyModeModifier>               DifficultyModeModifier;                                   // 0x04BD(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04BE(0x0002) MISSED OFFSET
	int                                                TemporaryDifficultyModeModifier;                          // 0x04C0(0x0004) (Transient)
	unsigned long                                      bResetProfileOnOpenMainMenu : 1;                          // 0x04C4(0x0004) (Config)
	unsigned long                                      bFreezeMinuteHands : 1;                                   // 0x04C4(0x0004)
	unsigned long                                      bIsPlayingDLC : 1;                                        // 0x04C4(0x0004)
	unsigned long                                      bSoundOnPause : 1;                                        // 0x04C4(0x0004)
	unsigned long                                      bGameplayDataGathering : 1;                               // 0x04C4(0x0004) (Config)
	unsigned long                                      bGameplayDataGatheringLocalOnly : 1;                      // 0x04C4(0x0004) (Config)
	unsigned long                                      bAutoOpenGameplayData : 1;                                // 0x04C4(0x0004) (Config)
	struct FName                                       DefaultMapName;                                           // 0x04C8(0x0008) (Config)
	struct FName                                       DemoMapName;                                              // 0x04D0(0x0008) (Config)
	struct FName                                       DLCInstalledMapName;                                      // 0x04D8(0x0008) (Config)
	TArray<struct FName>                               PersistentMaps;                                           // 0x04E0(0x0010) (Config, NeedCtorLink)
	struct FName                                       CurrentCheckpointName;                                    // 0x04F0(0x0008)
	struct FName                                       PendingCheckpointName;                                    // 0x04F8(0x0008)
	float                                              BaseGameTime;                                             // 0x0500(0x0004)
	float                                              SegmentEndGameTime;                                       // 0x0504(0x0004)
	float                                              CurrentGameTime;                                          // 0x0508(0x0004)
	float                                              CPStartWorldTime;                                         // 0x050C(0x0004)
	int                                                NumberDeathSinceLastCP;                                   // 0x0510(0x0004)
	int                                                NumberDeathConsideredSinceLastCP;                         // 0x0514(0x0004)
	int                                                DelayedShowPauseMenuCount;                                // 0x0518(0x0004)
	int                                                DelayedHidePauseMenuCount;                                // 0x051C(0x0004)
	int                                                DelayedShowPausedPromptCount;                             // 0x0520(0x0004)
	int                                                DelayedHidePausedPromptCount;                             // 0x0524(0x0004)
	class UAkEvent*                                    SndPause;                                                 // 0x0528(0x0008) (Const)
	class UAkEvent*                                    SndUnpause;                                               // 0x0530(0x0008) (Const)
	class UAkEvent*                                    SndPauseNoSound;                                          // 0x0538(0x0008) (Const)
	class UAkEvent*                                    SndUnpauseNoSound;                                        // 0x0540(0x0008) (Const)
	class UAkEvent*                                    SndPauseSFX;                                              // 0x0548(0x0008) (Const)
	class UAkEvent*                                    SndUnpauseSFX;                                            // 0x0550(0x0008) (Const)
	float                                              LastPauseSoundTimestamp;                                  // 0x0558(0x0004)
	float                                              LastUnpauseSoundTimestamp;                                // 0x055C(0x0004)
	class UOLDifficultyConfig*                         DifficultyConfig;                                         // 0x0560(0x0008) (Const)
	struct FName                                       FinalCheckpoint;                                          // 0x0568(0x0008) (Const)
	int                                                GameplayDataGatheringVersion;                             // 0x0570(0x0004) (Config)
	float                                              LastHintTimeStamp;                                        // 0x0574(0x0004)
	int                                                LastHintIndex;                                            // 0x0578(0x0004)
	TArray<struct FChapterDefinition>                  MainChapters;                                             // 0x057C(0x0010) (Const, NeedCtorLink)
	struct FName                                       CPPlayGoSeparator;                                        // 0x058C(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLGame");
		return ptr;
	}


	void CloseHint();
	void HideHint();
	void ShowHint(const struct FString& MessageText);
	void ClearPause();
	bool SetPause(class APlayerController* PC, const struct FScriptDelegate& CanUnpauseDelegate);
	void HandleUnpaused();
	void HandlePaused();
	void SetGameSpeed(float T);
	void TravelToStartupMap();
	void OnTravelToStartupMap();
	void RestartPlayer(class AController* NewPlayer);
	void EvtRestartPlayer(class AController* NewPlayer);
	void UpdateGameType();
	void OnPlayerSpawned(class AController* NewPlayer, class ANavigationPoint* StartPoint);
	class ANavigationPoint* FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName);
	void NewPolish();
	void NewOptim();
	void NewTask();
	void NewBug();
	TEnumAsByte<EDifficultyMode> GetDifficultyMode();
	struct FString GetFirstCheckpoint(TEnumAsByte<EOutlastGameType> GameType);
	class AOLCheckpoint* MatchCheckpoint(const struct FString& PortalName);
	void SetCurrentCheckpoint(const struct FName& CheckpointName);
	void CheckpointReached(const struct FName& CheckpointName);
	bool AllowCheats(class APlayerController* P);
	void GenerateNewHint();
	bool IsDLCInstalled();
	bool IsPlayingDLC();
	bool IsCensored();
	bool IsPlaytest();
	bool IsDemo();
	class UClass* STATIC_SetGameType(const struct FString& MapName, const struct FString& Options, const struct FString& Portal);
};


// Class OLGame.OLGameplayMarker
// 0x0004 (0x024C - 0x0248)
class AOLGameplayMarker : public AActor
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0248(0x0004) (Edit)
	unsigned long                                      bInitiallyEnabled : 1;                                    // 0x0248(0x0004) (Transient)
	unsigned long                                      bExternallyBoundState : 1;                                // 0x0248(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLGameplayMarker");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void PostBeginPlay();
};


// Class OLGame.OLAIVaultMarker
// 0x0058 (0x02A4 - 0x024C)
class AOLAIVaultMarker : public AOLGameplayMarker
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;                     // 0x024C(0x0008) (Const, Native, NoExport)
	float                                              VaultWidth;                                               // 0x0254(0x0004) (Edit)
	int                                                NonChaseCostMultiplier;                                   // 0x0258(0x0004) (Edit)
	float                                              PathfindingCostNormal;                                    // 0x025C(0x0004) (Edit)
	float                                              PathfindingCostChase;                                     // 0x0260(0x0004) (Edit)
	struct FVector                                     EndPointOne;                                              // 0x0264(0x000C)
	struct FVector                                     EndPointTwo;                                              // 0x0270(0x000C)
	struct FGuid                                       NavGuid;                                                  // 0x027C(0x0010) (Const, EditConst, DuplicateTransient)
	class AOLBot*                                      ActiveBot;                                                // 0x028C(0x0008)
	TArray<class AOLBot*>                              Bots;                                                     // 0x0294(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAIVaultMarker");
		return ptr;
	}

};


// Class OLGame.OLAmbushMarker
// 0x0054 (0x02A0 - 0x024C)
class AOLAmbushMarker : public AOLGameplayMarker
{
public:
	struct FName                                       EntryAnimName;                                            // 0x024C(0x0008) (Edit)
	struct FName                                       IdleAnimName;                                             // 0x0254(0x0008) (Edit)
	struct FName                                       ExitAnimName;                                             // 0x025C(0x0008) (Edit)
	class AOLJumpMarker*                               ExitThroughJumpMarker;                                    // 0x0264(0x0008) (Edit)
	float                                              EntryOffsetSide;                                          // 0x026C(0x0004) (Edit)
	float                                              EntryOffsetFwd;                                           // 0x0270(0x0004) (Edit)
	unsigned long                                      bSyncIdleToPosition : 1;                                  // 0x0274(0x0004) (Edit)
	unsigned long                                      bSyncIdleToRotation : 1;                                  // 0x0274(0x0004) (Edit)
	unsigned long                                      bEntryAnimFacesOppositeMarker : 1;                        // 0x0274(0x0004) (Edit)
	unsigned long                                      bExitIfPlayerClose : 1;                                   // 0x0274(0x0004) (Edit)
	unsigned long                                      bHasBeenUsed : 1;                                         // 0x0274(0x0004) (Transient)
	float                                              TriggerDistanceHorz;                                      // 0x0278(0x0004) (Edit)
	float                                              TriggerDistanceDown;                                      // 0x027C(0x0004) (Edit)
	float                                              TriggerDistanceUp;                                        // 0x0280(0x0004) (Edit)
	float                                              MaxAngleToPlayerForExit;                                  // 0x0284(0x0004) (Edit)
	TArray<class UOLBotCondition*>                     ExitConditions;                                           // 0x0288(0x0010) (Edit, ExportObject, NeedCtorLink, EditInline)
	class AOLBot*                                      BotReservation;                                           // 0x0298(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAmbushMarker");
		return ptr;
	}

};


// Class OLGame.OLBed
// 0x0020 (0x026C - 0x024C)
class AOLBed : public AOLGameplayMarker
{
public:
	class UOLInvestigationComponent*                   InvestigationComponent;                                   // 0x024C(0x0008) (Edit, ExportObject, Component, EditInline)
	float                                              ThrowOffsetLeft;                                          // 0x0254(0x0004) (Edit)
	float                                              ThrowOffsetRight;                                         // 0x0258(0x0004) (Edit)
	float                                              FindHiddenPlayerProbability;                              // 0x025C(0x0004) (Edit)
	float                                              DistFwd;                                                  // 0x0260(0x0004) (Const)
	float                                              DistBwd;                                                  // 0x0264(0x0004) (Const)
	float                                              HalfWidth;                                                // 0x0268(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBed");
		return ptr;
	}

};


// Class OLGame.OLCornerMarker
// 0x0048 (0x0294 - 0x024C)
class AOLCornerMarker : public AOLGameplayMarker
{
public:
	struct FCornerData                                 Data;                                                     // 0x024C(0x0038) (Edit, EditInline)
	struct FString                                     BoundStaticMesh;                                          // 0x0284(0x0010) (Edit, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLCornerMarker");
		return ptr;
	}

};


// Class OLGame.OLCSA
// 0x00A0 (0x02EC - 0x024C)
class AOLCSA : public AOLGameplayMarker
{
public:
	unsigned long                                      bAutomatic : 1;                                           // 0x024C(0x0004) (Edit)
	unsigned long                                      bCheckLOS : 1;                                            // 0x024C(0x0004) (Edit)
	unsigned long                                      bConsumeItem : 1;                                         // 0x024C(0x0004) (Edit)
	unsigned long                                      bNoPrompt : 1;                                            // 0x024C(0x0004) (Edit)
	unsigned long                                      bCanReactToHit : 1;                                       // 0x024C(0x0004) (Edit)
	unsigned long                                      bKeepPositionOrientation : 1;                             // 0x024C(0x0004) (Edit)
	unsigned long                                      bClearDynamicDataW : 1;                                   // 0x024C(0x0004) (Edit)
	unsigned long                                      bKeepCameraPitchAfterCompletion : 1;                      // 0x024C(0x0004) (Edit)
	int                                                MaxTriggerCount;                                          // 0x0250(0x0004) (Edit)
	float                                              InteractDistHorz;                                         // 0x0254(0x0004) (Edit)
	float                                              InteractDistVert;                                         // 0x0258(0x0004) (Edit)
	float                                              InteractRadius;                                           // 0x025C(0x0004) (Edit)
	float                                              MaxPlayerAngle;                                           // 0x0260(0x0004) (Edit)
	struct FName                                       RequiredItem;                                             // 0x0264(0x0008) (Edit)
	struct FName                                       AnimName;                                                 // 0x026C(0x0008) (Edit)
	class UAnimSet*                                    SpecificAnimSet;                                          // 0x0274(0x0008) (Edit)
	float                                              AnimStartDistFwd;                                         // 0x027C(0x0004) (Edit)
	float                                              AnimStartDistRight;                                       // 0x0280(0x0004) (Edit)
	class AActor*                                      ReferenceAnimActor;                                       // 0x0284(0x0008) (Edit)
	struct FName                                       ActivationPromptTextId;                                   // 0x028C(0x0008) (Edit)
	struct FName                                       RequiredItemPromptTextId;                                 // 0x0294(0x0008) (Edit)
	class AStaticMeshActor*                            AnimatedProp;                                             // 0x029C(0x0008) (Edit)
	class AActor*                                      GlowingInteractObject;                                    // 0x02A4(0x0008) (Edit)
	class UMaterialInstanceConstant*                   GlowingTemplateMatInst;                                   // 0x02AC(0x0008) (Edit)
	class UMaterialInstanceConstant*                   GlowingClonedMatInst;                                     // 0x02B4(0x0008) (Transient)
	struct FName                                       GlowingParamName;                                         // 0x02BC(0x0008) (Edit)
	float                                              GlowingOnValue;                                           // 0x02C4(0x0004) (Edit)
	float                                              GlowingOffValue;                                          // 0x02C8(0x0004) (Edit)
	struct FColor                                      PromptColor;                                              // 0x02CC(0x0004) (Edit)
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                            // 0x02D0(0x0010) (Edit, DuplicateTransient, NeedCtorLink)
	int                                                TriggerCount;                                             // 0x02E0(0x0004)
	class UDrawSphereComponent*                        PreviewComp;                                              // 0x02E4(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLCSA");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void SetEnabled(bool bNewEnabled);
};


// Class OLGame.OLHandReactionMarker
// 0x001C (0x0268 - 0x024C)
class AOLHandReactionMarker : public AOLGameplayMarker
{
public:
	class UDrawSphereComponent*                        PreviewComp;                                              // 0x024C(0x0008) (ExportObject, Component, EditInline)
	float                                              Radius;                                                   // 0x0254(0x0004)
	struct FString                                     BoundStaticMesh;                                          // 0x0258(0x0010) (Edit, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLHandReactionMarker");
		return ptr;
	}

};


// Class OLGame.OLBranchShieldingMarker
// 0x0060 (0x02C8 - 0x0268)
class AOLBranchShieldingMarker : public AOLHandReactionMarker
{
public:
	float                                              CylinderHeight;                                           // 0x0268(0x0004) (Edit)
	float                                              CylinderRadius;                                           // 0x026C(0x0004) (Edit)
	TArray<class UAkEvent*>                            OnPlayerEnterEvents;                                      // 0x0270(0x0010) (Edit, NeedCtorLink)
	TArray<class UAkEvent*>                            OnPlayerExitEvents;                                       // 0x0280(0x0010) (Edit, NeedCtorLink)
	TArray<class UAkEvent*>                            OnEnterEvents;                                            // 0x0290(0x0010) (Edit, NeedCtorLink)
	TArray<class UAkEvent*>                            OnExitEvents;                                             // 0x02A0(0x0010) (Edit, NeedCtorLink)
	class UDrawCylinderComponent*                      CylinderPreviewComp;                                      // 0x02B0(0x0008) (ExportObject, Component, EditInline)
	class UArrowComponent*                             ArrowPreviewComp;                                         // 0x02B8(0x0008) (ExportObject, Component, EditInline)
	class UObject*                                     SpriteObj;                                                // 0x02C0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBranchShieldingMarker");
		return ptr;
	}

};


// Class OLGame.OLBrightLightMarker
// 0x0014 (0x027C - 0x0268)
class AOLBrightLightMarker : public AOLHandReactionMarker
{
public:
	float                                              ViewHeightLimits;                                         // 0x0268(0x0004) (Edit)
	float                                              ViewRadiusLimits;                                         // 0x026C(0x0004) (Edit)
	float                                              Delay;                                                    // 0x0270(0x0004) (Edit)
	class UDrawCylinderComponent*                      CylinderPreviewComp;                                      // 0x0274(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBrightLightMarker");
		return ptr;
	}

};


// Class OLGame.OLFlySwattingMarker
// 0x0000 (0x0268 - 0x0268)
class AOLFlySwattingMarker : public AOLHandReactionMarker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLFlySwattingMarker");
		return ptr;
	}

};


// Class OLGame.OLHeatMarker
// 0x0004 (0x026C - 0x0268)
class AOLHeatMarker : public AOLHandReactionMarker
{
public:
	unsigned long                                      bNoHandShielding : 1;                                     // 0x0268(0x0004) (Edit)
	unsigned long                                      bNoDamage : 1;                                            // 0x0268(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLHeatMarker");
		return ptr;
	}

};


// Class OLGame.OLHidingSpot
// 0x0014 (0x0260 - 0x024C)
class AOLHidingSpot : public AOLGameplayMarker
{
public:
	class UOLInvestigationComponent*                   InvestigationComponent;                                   // 0x024C(0x0008) (Edit, ExportObject, Component, EditInline)
	class AOLDoor*                                     AssociatedDoor;                                           // 0x0254(0x0008) (Edit)
	float                                              FindHiddenPlayerProbability;                              // 0x025C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLHidingSpot");
		return ptr;
	}

};


// Class OLGame.OLJumpMarker
// 0x005C (0x02A8 - 0x024C)
class AOLJumpMarker : public AOLGameplayMarker
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;                     // 0x024C(0x0008) (Const, Native, NoExport)
	class AOLJumpMarker*                               OtherMarker;                                              // 0x0254(0x0008) (Edit)
	unsigned long                                      bOnBeam : 1;                                              // 0x025C(0x0004) (Edit)
	unsigned long                                      bMaster : 1;                                              // 0x025C(0x0004) (Transient)
	float                                              PathfindingCostNormal;                                    // 0x0260(0x0004) (Edit)
	float                                              PathfindingCostChase;                                     // 0x0264(0x0004) (Edit)
	float                                              OverrideAngle;                                            // 0x0268(0x0004) (Edit)
	float                                              OverrideControlStrength;                                  // 0x026C(0x0004) (Edit)
	float                                              MinHorzDist;                                              // 0x0270(0x0004) (Edit, Const, EditConst)
	float                                              MaxHorzDist;                                              // 0x0274(0x0004) (Edit, Const, EditConst)
	float                                              MinVertDist;                                              // 0x0278(0x0004) (Edit, Const, EditConst)
	float                                              MaxVertDist;                                              // 0x027C(0x0004) (Edit, Const, EditConst)
	struct FGuid                                       NavGuid;                                                  // 0x0280(0x0010) (Const, EditConst, DuplicateTransient)
	class AOLBot*                                      ActiveBot;                                                // 0x0290(0x0008)
	TArray<class AOLBot*>                              Bots;                                                     // 0x0298(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLJumpMarker");
		return ptr;
	}

};


// Class OLGame.OLLadderMarker
// 0x0028 (0x0274 - 0x024C)
class AOLLadderMarker : public AOLGameplayMarker
{
public:
	class AOLLadderMarker*                             OtherMarker;                                              // 0x024C(0x0008) (Edit)
	unsigned long                                      bNoHandle : 1;                                            // 0x0254(0x0004) (Edit)
	unsigned long                                      bNoFailTopEntry : 1;                                      // 0x0254(0x0004) (Edit)
	unsigned long                                      bEnterOnlyIfCrouching : 1;                                // 0x0254(0x0004) (Edit)
	TEnumAsByte<ELadderMaterial>                       LadderType;                                               // 0x0258(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0259(0x0003) MISSED OFFSET
	struct FName                                       SwitchLadderType;                                         // 0x025C(0x0008) (Const)
	struct FName                                       SwitchLadderTypeMetal;                                    // 0x0264(0x0008) (Const)
	struct FName                                       SwitchLadderTypeWood;                                     // 0x026C(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLLadderMarker");
		return ptr;
	}

};


// Class OLGame.OLPreferredPathMarker
// 0x0008 (0x0254 - 0x024C)
class AOLPreferredPathMarker : public AOLGameplayMarker
{
public:
	class AOLPreferredPathMarker*                      Next;                                                     // 0x024C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLPreferredPathMarker");
		return ptr;
	}

};


// Class OLGame.OLRecordingMarker
// 0x0068 (0x02B4 - 0x024C)
class AOLRecordingMarker : public AOLGameplayMarker
{
public:
	float                                              Radius;                                                   // 0x024C(0x0004) (Edit)
	float                                              ExtraWidth;                                               // 0x0250(0x0004) (Edit)
	struct FName                                       MomentName;                                               // 0x0254(0x0008) (Edit)
	unsigned long                                      bRequiresNightVision : 1;                                 // 0x025C(0x0004) (Edit)
	unsigned long                                      bRequiresNotNightVision : 1;                              // 0x025C(0x0004) (Edit)
	unsigned long                                      bRequiresMicrophone : 1;                                  // 0x025C(0x0004) (Edit)
	unsigned long                                      bOnlyInExterior : 1;                                      // 0x025C(0x0004) (Edit)
	unsigned long                                      bMustFaceMarker2D : 1;                                    // 0x025C(0x0004) (Edit)
	unsigned long                                      bMustFaceMarker3D : 1;                                    // 0x025C(0x0004) (Edit)
	unsigned long                                      bPerformLineTrace : 1;                                    // 0x025C(0x0004) (Edit)
	unsigned long                                      bAllowNonContinuousRecording : 1;                         // 0x025C(0x0004) (Edit)
	unsigned long                                      bNoNotification : 1;                                      // 0x025C(0x0004) (Edit)
	unsigned long                                      bInfiniteRecordingTime : 1;                               // 0x025C(0x0004) (Edit)
	unsigned long                                      bInvisibleProgress : 1;                                   // 0x025C(0x0004) (Edit)
	unsigned long                                      bRecorded : 1;                                            // 0x025C(0x0004) (Transient)
	unsigned long                                      bRecording : 1;                                           // 0x025C(0x0004) (Transient)
	float                                              MaxDistance;                                              // 0x0260(0x0004) (Edit)
	float                                              MaxPitch;                                                 // 0x0264(0x0004) (Edit)
	float                                              MinPitch;                                                 // 0x0268(0x0004) (Edit)
	float                                              MaxAngleFromScreenCenter;                                 // 0x026C(0x0004) (Edit)
	float                                              MaxBrokenSightDuration;                                   // 0x0270(0x0004) (Edit)
	float                                              MinRecordingDuration;                                     // 0x0274(0x0004) (Edit)
	float                                              NotificationDelay;                                        // 0x0278(0x0004) (Edit)
	TArray<class AActor*>                              BoostTextureActors;                                       // 0x027C(0x0010) (Edit, NeedCtorLink)
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                            // 0x028C(0x0010) (Edit, DuplicateTransient, NeedCtorLink)
	float                                              StartedRecordingTime;                                     // 0x029C(0x0004) (Transient)
	float                                              AccumulatedRecordingTime;                                 // 0x02A0(0x0004) (Transient)
	float                                              LastInSightTime;                                          // 0x02A4(0x0004) (Transient)
	float                                              AccumulatedPausedRecordingTime;                           // 0x02A8(0x0004) (Transient)
	class UDrawSphereComponent*                        PreviewComp;                                              // 0x02AC(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLRecordingMarker");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class OLGame.OLRTPCDistanceModifier
// 0x003C (0x0288 - 0x024C)
class AOLRTPCDistanceModifier : public AOLGameplayMarker
{
public:
	class AActor*                                      TargetSoundSource;                                        // 0x024C(0x0008) (Edit)
	class UAkEvent*                                    StartEvent;                                               // 0x0254(0x0008) (Edit)
	class UAkEvent*                                    StopEvent;                                                // 0x025C(0x0008) (Edit)
	struct FName                                       DistanceRTPC;                                             // 0x0264(0x0008) (Edit)
	float                                              Range;                                                    // 0x026C(0x0004) (Edit)
	class AOLSplineGameplayMarker*                     LinkedSpline;                                             // 0x0270(0x0008) (Edit)
	float                                              SplineOffset;                                             // 0x0278(0x0004) (Edit)
	unsigned long                                      bPlaying : 1;                                             // 0x027C(0x0004) (Transient)
	class UDrawSphereComponent*                        SpherePreviewComp;                                        // 0x0280(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLRTPCDistanceModifier");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void StopSound();
	void StartSound();
};


// Class OLGame.OLRTPCPlayerLookModifier
// 0x0040 (0x028C - 0x024C)
class AOLRTPCPlayerLookModifier : public AOLGameplayMarker
{
public:
	class AActor*                                      TargetSoundSource;                                        // 0x024C(0x0008) (Edit)
	class UAkEvent*                                    StartEvent;                                               // 0x0254(0x0008) (Edit)
	class UAkEvent*                                    StopEvent;                                                // 0x025C(0x0008) (Edit)
	struct FName                                       AngleRTPC;                                                // 0x0264(0x0008) (Edit)
	float                                              AngleRange;                                               // 0x026C(0x0004) (Edit)
	unsigned long                                      bTestLineOfSight : 1;                                     // 0x0270(0x0004) (Edit)
	unsigned long                                      bPlaying : 1;                                             // 0x0270(0x0004) (Transient)
	unsigned long                                      LastPlayerLookRTPCTraceClear : 1;                         // 0x0270(0x0004) (Transient)
	float                                              LineOfSightTimeslice;                                     // 0x0274(0x0004) (Edit)
	TArray<class AVolume*>                             ActivationVolumes;                                        // 0x0278(0x0010) (Edit, NeedCtorLink)
	float                                              LastPlayerLookRTPCTraceTime;                              // 0x0288(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLRTPCPlayerLookModifier");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void StopSound();
	void StartSound();
};


// Class OLGame.OLSplineGameplayMarker
// 0x0030 (0x027C - 0x024C)
class AOLSplineGameplayMarker : public AOLGameplayMarker
{
public:
	TArray<class AOLSplineGameplayMarker*>             NextMarkers;                                              // 0x024C(0x0010) (Edit, NeedCtorLink)
	TArray<class AOLSplineGameplayMarker*>             Prev;                                                     // 0x025C(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      bSoftAngles : 1;                                          // 0x026C(0x0004) (Edit)
	unsigned long                                      bFlat : 1;                                                // 0x026C(0x0004) (Edit)
	unsigned long                                      bEndsFlat : 1;                                            // 0x026C(0x0004) (Edit)
	unsigned long                                      bOverrideOrientation : 1;                                 // 0x026C(0x0004) (Edit)
	unsigned long                                      bHermiteInterpolation : 1;                                // 0x026C(0x0004) (Edit)
	unsigned long                                      bHasValidCachedSegmentLength : 1;                         // 0x026C(0x0004) (Transient)
	unsigned long                                      bHasValidCachedSegmentLength2D : 1;                       // 0x026C(0x0004) (Transient)
	unsigned long                                      bDisableNextMarkers : 1;                                  // 0x026C(0x0004) (Transient)
	unsigned long                                      bDisablePreviousMarkers : 1;                              // 0x026C(0x0004) (Transient)
	float                                              OverrideStrength;                                         // 0x0270(0x0004) (Edit)
	float                                              CachedSegmentLength;                                      // 0x0274(0x0004) (Transient)
	float                                              CachedSegmentLength2D;                                    // 0x0278(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSplineGameplayMarker");
		return ptr;
	}

};


// Class OLGame.OLBeamMarker
// 0x003C (0x02B8 - 0x027C)
class AOLBeamMarker : public AOLSplineGameplayMarker
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;                     // 0x027C(0x0008) (Const, Native, NoExport)
	float                                              BeamWidth;                                                // 0x0284(0x0004) (Edit)
	unsigned long                                      bNPCCanUse : 1;                                           // 0x0288(0x0004) (Edit)
	float                                              PathfindingCostMultiplier;                                // 0x028C(0x0004) (Edit)
	struct FGuid                                       NavGuid;                                                  // 0x0290(0x0010) (Const, EditConst, DuplicateTransient)
	struct FVector                                     StartNavmeshPoint;                                        // 0x02A0(0x000C)
	struct FVector                                     EndNavmeshPoint;                                          // 0x02AC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBeamMarker");
		return ptr;
	}

};


// Class OLGame.OLCrawlMarker
// 0x007C (0x02F8 - 0x027C)
class AOLCrawlMarker : public AOLSplineGameplayMarker
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;                     // 0x027C(0x0008) (Const, Native, NoExport)
	unsigned long                                      bPlayerCanUse : 1;                                        // 0x0284(0x0004) (Edit)
	unsigned long                                      bNPCCanUse : 1;                                           // 0x0284(0x0004) (Edit)
	unsigned long                                      bNPCExitOnly : 1;                                         // 0x0284(0x0004) (Edit)
	unsigned long                                      bNPCNoExit : 1;                                           // 0x0284(0x0004) (Edit)
	unsigned long                                      bNPCExitIgnoreCollisionChecks : 1;                        // 0x0284(0x0004) (Edit)
	unsigned long                                      bPlayerNoExit : 1;                                        // 0x0284(0x0004) (Edit)
	unsigned long                                      bPlayerOneWayFwd : 1;                                     // 0x0284(0x0004) (Edit)
	unsigned long                                      bPlayerOneWayBwd : 1;                                     // 0x0284(0x0004) (Edit)
	unsigned long                                      bNoLookback : 1;                                          // 0x0284(0x0004) (Edit)
	unsigned long                                      bAirvent : 1;                                             // 0x0284(0x0004) (Edit)
	unsigned long                                      bScramble : 1;                                            // 0x0284(0x0004) (Edit)
	unsigned long                                      bNPCCrouch : 1;                                           // 0x0284(0x0004) (Edit)
	unsigned long                                      bBotsCanInvestigate : 1;                                  // 0x0284(0x0004) (Edit)
	unsigned long                                      bPlayerIntersection : 1;                                  // 0x0284(0x0004) (Transient)
	class UOLInvestigationComponent*                   InvestigationComponent;                                   // 0x0288(0x0008) (Edit, ExportObject, Component, EditInline)
	float                                              PathfindingCostMultiplier;                                // 0x0290(0x0004) (Edit)
	float                                              NavmeshDistOutside;                                       // 0x0294(0x0004) (Const)
	struct FGuid                                       NavGuid;                                                  // 0x0298(0x0010) (Const, EditConst, DuplicateTransient)
	struct FVector                                     StartNavmeshPoint;                                        // 0x02A8(0x000C)
	struct FVector                                     EndNavmeshPoint;                                          // 0x02B4(0x000C)
	class AOLBasementWindow*                           ConnectedBasementWindow;                                  // 0x02C0(0x0008) (Transient)
	class AOLCrawlMarker*                              TwinCrawlSpline;                                          // 0x02C8(0x0008) (Transient)
	TArray<class AOLCrawlMarker*>                      IntersectionMarkers;                                      // 0x02D0(0x0010) (Transient, NeedCtorLink)
	class UTexture2D*                                  NormalSpriteTexture;                                      // 0x02E0(0x0008)
	class UTexture2D*                                  EnemyOnlySpriteTexture;                                   // 0x02E8(0x0008)
	class USpriteComponent*                            SpriteComp;                                               // 0x02F0(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLCrawlMarker");
		return ptr;
	}

};


// Class OLGame.OLLedgeMarker
// 0x0060 (0x02DC - 0x027C)
class AOLLedgeMarker : public AOLSplineGameplayMarker
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;                     // 0x027C(0x0008) (Const, Native, NoExport)
	float                                              PathOffset;                                               // 0x0284(0x0004) (Edit)
	unsigned long                                      AICanVault : 1;                                           // 0x0288(0x0004) (Edit)
	unsigned long                                      AICanOnlyDropDown : 1;                                    // 0x0288(0x0004) (Edit)
	unsigned long                                      bCanLedgeWalk : 1;                                        // 0x0288(0x0004) (Edit)
	unsigned long                                      bCanLedgeHang : 1;                                        // 0x0288(0x0004) (Edit)
	unsigned long                                      bCanEnterAnywhere : 1;                                    // 0x0288(0x0004) (Edit)
	unsigned long                                      bCanClimbUp : 1;                                          // 0x0288(0x0004) (Edit)
	unsigned long                                      bCanDropDown : 1;                                         // 0x0288(0x0004) (Edit)
	unsigned long                                      bCanSlide : 1;                                            // 0x0288(0x0004) (Edit)
	unsigned long                                      bBeamLedge : 1;                                           // 0x0288(0x0004) (Edit)
	unsigned long                                      bBeamLedgeEasyGrab : 1;                                   // 0x0288(0x0004) (Edit)
	unsigned long                                      bAutomaticClimb : 1;                                      // 0x0288(0x0004) (Edit)
	unsigned long                                      bAutomaticDrop : 1;                                       // 0x0288(0x0004) (Edit)
	unsigned long                                      bAllowLowJumpOver : 1;                                    // 0x0288(0x0004) (Edit)
	unsigned long                                      bNoPushFromLedge : 1;                                     // 0x0288(0x0004) (Edit)
	unsigned long                                      bClimbFar : 1;                                            // 0x0288(0x0004) (Edit)
	unsigned long                                      bForceWalkingInteraction : 1;                             // 0x0288(0x0004) (Edit)
	unsigned long                                      bForceRunningInteraction : 1;                             // 0x0288(0x0004) (Edit)
	unsigned long                                      bNoAutoLink : 1;                                          // 0x0288(0x0004) (Edit)
	unsigned long                                      bLeftFacingLedgeWalk : 1;                                 // 0x0288(0x0004) (Edit)
	unsigned long                                      bRightFacingLedgeWalk : 1;                                // 0x0288(0x0004) (Edit)
	unsigned long                                      bBoundToWindow : 1;                                       // 0x0288(0x0004) (Transient)
	float                                              PathfindingCostNormal;                                    // 0x028C(0x0004) (Edit)
	float                                              PathfindingCostChase;                                     // 0x0290(0x0004) (Edit)
	struct FName                                       MaterialTypeOverride;                                     // 0x0294(0x0008) (Edit)
	struct FVector                                     TopPoint;                                                 // 0x029C(0x000C)
	struct FVector                                     BottomPoint;                                              // 0x02A8(0x000C)
	struct FGuid                                       NavGuid;                                                  // 0x02B4(0x0010) (Const, EditConst, DuplicateTransient)
	class AOLBot*                                      ActiveBot;                                                // 0x02C4(0x0008)
	TArray<class AOLBot*>                              Bots;                                                     // 0x02CC(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLLedgeMarker");
		return ptr;
	}

};


// Class OLGame.OLPushableSplineMarker
// 0x0000 (0x027C - 0x027C)
class AOLPushableSplineMarker : public AOLSplineGameplayMarker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLPushableSplineMarker");
		return ptr;
	}

};


// Class OLGame.OLRaftCollisionMarker
// 0x0004 (0x0280 - 0x027C)
class AOLRaftCollisionMarker : public AOLSplineGameplayMarker
{
public:
	unsigned long                                      bFlipSide : 1;                                            // 0x027C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLRaftCollisionMarker");
		return ptr;
	}

};


// Class OLGame.OLRaftLimitSplineMarker
// 0x0004 (0x0280 - 0x027C)
class AOLRaftLimitSplineMarker : public AOLSplineGameplayMarker
{
public:
	unsigned long                                      bFlipSide : 1;                                            // 0x027C(0x0004) (Edit)
	unsigned long                                      bAllowsBeingOutside : 1;                                  // 0x027C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLRaftLimitSplineMarker");
		return ptr;
	}

};


// Class OLGame.OLRiverMarker
// 0x0024 (0x02A0 - 0x027C)
class AOLRiverMarker : public AOLSplineGameplayMarker
{
public:
	float                                              Width;                                                    // 0x027C(0x0004) (Deprecated)
	float                                              LeftWidth;                                                // 0x0280(0x0004) (Edit)
	float                                              RightWidth;                                               // 0x0284(0x0004) (Edit)
	float                                              Speed;                                                    // 0x0288(0x0004) (Edit)
	float                                              RotationInputRatio;                                       // 0x028C(0x0004) (Edit)
	float                                              FacingRotationRatio;                                      // 0x0290(0x0004) (Edit)
	float                                              RaftValueBumpinessRatio;                                  // 0x0294(0x0004) (Edit)
	float                                              RaftTimeBumpinessRatio;                                   // 0x0298(0x0004) (Edit)
	unsigned long                                      bUsePlayerRelativeDirection : 1;                          // 0x029C(0x0004) (Edit)
	unsigned long                                      bUseAsRail : 1;                                           // 0x029C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLRiverMarker");
		return ptr;
	}

};


// Class OLGame.OLSlideUnderMarker
// 0x0004 (0x0280 - 0x027C)
class AOLSlideUnderMarker : public AOLSplineGameplayMarker
{
public:
	unsigned long                                      bForceCrawlStance : 1;                                    // 0x027C(0x0004) (Edit)
	unsigned long                                      bIgnoreExitClearance : 1;                                 // 0x027C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSlideUnderMarker");
		return ptr;
	}

};


// Class OLGame.OLSlidingSlopeMarker
// 0x0024 (0x02A0 - 0x027C)
class AOLSlidingSlopeMarker : public AOLSplineGameplayMarker
{
public:
	unsigned long                                      bPlayOnce : 1;                                            // 0x027C(0x0004) (Edit)
	unsigned long                                      bAllowsSlideEntry : 1;                                    // 0x027C(0x0004) (Edit)
	unsigned long                                      bOverrideSlideSpeed : 1;                                  // 0x027C(0x0004) (Edit)
	unsigned long                                      bLandingOnly : 1;                                         // 0x027C(0x0004) (Edit)
	unsigned long                                      bLowerCameraOnLanding : 1;                                // 0x027C(0x0004) (Edit)
	unsigned long                                      bAutoRaiseCameraAfterLanding : 1;                         // 0x027C(0x0004) (Edit)
	unsigned long                                      bAlreadyUsed : 1;                                         // 0x027C(0x0004) (Transient)
	float                                              Width;                                                    // 0x0280(0x0004) (Edit)
	float                                              SlideSpeedMultiplier;                                     // 0x0284(0x0004) (Edit)
	TEnumAsByte<ESlidingSlopeSlideType>                SlideType;                                                // 0x0288(0x0001) (Edit)
	TEnumAsByte<ESlopeLanding>                         LandingType;                                              // 0x0289(0x0001) (Edit)
	TEnumAsByte<ESlopeMaterial>                        GroundMaterial;                                           // 0x028A(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x028B(0x0001) MISSED OFFSET
	float                                              HobbleTime;                                               // 0x028C(0x0004) (Edit)
	TArray<struct FGameFlowRuleSlidingSlope>           GameFlowRules;                                            // 0x0290(0x0010) (Edit, DuplicateTransient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSlidingSlopeMarker");
		return ptr;
	}

};


// Class OLGame.OLSqueezeMarker
// 0x0005 (0x0281 - 0x027C)
class AOLSqueezeMarker : public AOLSplineGameplayMarker
{
public:
	unsigned long                                      bCanLookLeft : 1;                                         // 0x027C(0x0004) (Edit)
	unsigned long                                      bCanLookRight : 1;                                        // 0x027C(0x0004) (Edit)
	unsigned long                                      bNoHands : 1;                                             // 0x027C(0x0004) (Edit)
	unsigned long                                      bDeadEnd : 1;                                             // 0x027C(0x0004) (Edit)
	unsigned long                                      bExtraPushRightOnExit : 1;                                // 0x027C(0x0004) (Edit)
	unsigned long                                      bExtraPushLeftOnExit : 1;                                 // 0x027C(0x0004) (Edit)
	TEnumAsByte<ESqueezeAnimType>                      AnimType;                                                 // 0x0280(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSqueezeMarker");
		return ptr;
	}

};


// Class OLGame.OLStairsMarker
// 0x0010 (0x025C - 0x024C)
class AOLStairsMarker : public AOLGameplayMarker
{
public:
	float                                              StairsWidth;                                              // 0x024C(0x0004) (Edit)
	class AOLStairsMarker*                             OtherMarker;                                              // 0x0250(0x0008) (Edit)
	unsigned long                                      bInvalid : 1;                                             // 0x0258(0x0004) (Transient)
	unsigned long                                      bConfirmedValid : 1;                                      // 0x0258(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLStairsMarker");
		return ptr;
	}

};


// Class OLGame.OLGameplayStaticMeshActor
// 0x0007 (0x025C - 0x0255)
class AOLGameplayStaticMeshActor : public AStaticMeshActor
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0255(0x0003) MISSED OFFSET
	unsigned long                                      bEnabled : 1;                                             // 0x0258(0x0004) (Edit)
	unsigned long                                      bInitiallyEnabled : 1;                                    // 0x0258(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLGameplayStaticMeshActor");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class OLGame.OLTripActor
// 0x0020 (0x027C - 0x025C)
class AOLTripActor : public AOLGameplayStaticMeshActor
{
public:
	float                                              Radius;                                                   // 0x025C(0x0004) (Edit)
	float                                              Height;                                                   // 0x0260(0x0004) (Edit)
	class UAkEvent*                                    SoundEvent;                                               // 0x0264(0x0008) (Edit)
	class UDrawCylinderComponent*                      CylinderPreviewComp;                                      // 0x026C(0x0008) (ExportObject, Component, EditInline)
	class USpriteComponent*                            SpriteComp;                                               // 0x0274(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLTripActor");
		return ptr;
	}

};


// Class OLGame.OLGameplayVolume
// 0x0004 (0x0288 - 0x0284)
class AOLGameplayVolume : public AVolume
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0284(0x0004) (Edit)
	unsigned long                                      bInitiallyEnabled : 1;                                    // 0x0284(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLGameplayVolume");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class OLGame.OLAIVisionObstructionVolume
// 0x0000 (0x0288 - 0x0288)
class AOLAIVisionObstructionVolume : public AOLGameplayVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAIVisionObstructionVolume");
		return ptr;
	}

};


// Class OLGame.OLBushesVolume
// 0x0010 (0x0298 - 0x0288)
class AOLBushesVolume : public AOLGameplayVolume
{
public:
	TEnumAsByte<EBushHidingStance>                     HidingStance;                                             // 0x0288(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0289(0x0003) MISSED OFFSET
	unsigned long                                      bOnlyAffectsHero : 1;                                     // 0x028C(0x0004) (Edit)
	unsigned long                                      bInactiveIfBothInside : 1;                                // 0x028C(0x0004) (Edit)
	float                                              VisualDisturbanceMultiplier;                              // 0x0290(0x0004) (Edit)
	float                                              AudioDisturbanceMultiplier;                               // 0x0294(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBushesVolume");
		return ptr;
	}

};


// Class OLGame.OLCameraLimitsVolume
// 0x0010 (0x0298 - 0x0288)
class AOLCameraLimitsVolume : public AOLGameplayVolume
{
public:
	float                                              MinYaw;                                                   // 0x0288(0x0004) (Edit)
	float                                              MaxYaw;                                                   // 0x028C(0x0004) (Edit)
	float                                              MinPitch;                                                 // 0x0290(0x0004) (Edit)
	float                                              MaxPitch;                                                 // 0x0294(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLCameraLimitsVolume");
		return ptr;
	}

};


// Class OLGame.OLDamageBlockingVolume
// 0x0008 (0x0290 - 0x0288)
class AOLDamageBlockingVolume : public AOLGameplayVolume
{
public:
	int                                                TouchDamage;                                              // 0x0288(0x0004) (Edit)
	float                                              Knockback;                                                // 0x028C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLDamageBlockingVolume");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class OLGame.OLDarknessVolume
// 0x0004 (0x028C - 0x0288)
class AOLDarknessVolume : public AOLGameplayVolume
{
public:
	unsigned long                                      bDark : 1;                                                // 0x0288(0x0004) (Edit)
	unsigned long                                      bOnlyDarkWhenCrouched : 1;                                // 0x0288(0x0004) (Edit)
	unsigned long                                      bInitiallyDark : 1;                                       // 0x0288(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLDarknessVolume");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class OLGame.OLElectrifiedVolume
// 0x0010 (0x0298 - 0x0288)
class AOLElectrifiedVolume : public AOLGameplayVolume
{
public:
	int                                                TouchDamage;                                              // 0x0288(0x0004) (Edit)
	float                                              Knockback;                                                // 0x028C(0x0004) (Edit)
	class UAkEvent*                                    SoundEvent;                                               // 0x0290(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLElectrifiedVolume");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class OLGame.OLMartaStreetVolume
// 0x0024 (0x02AC - 0x0288)
class AOLMartaStreetVolume : public AOLGameplayVolume
{
public:
	TArray<struct FVolumeConnection>                   Connections;                                              // 0x0288(0x0010) (Edit, DuplicateTransient, NeedCtorLink)
	TArray<class AActor*>                              SpawnPoints;                                              // 0x0298(0x0010) (Edit, DuplicateTransient, NeedCtorLink)
	float                                              LastHeroVisitedTime;                                      // 0x02A8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLMartaStreetVolume");
		return ptr;
	}

};


// Class OLGame.OLPhysicsVolume
// 0x004C (0x02D4 - 0x0288)
class AOLPhysicsVolume : public AOLGameplayVolume
{
public:
	unsigned long                                      bAllowCrawl : 1;                                          // 0x0288(0x0004) (Edit)
	unsigned long                                      bAllowCrouch : 1;                                         // 0x0288(0x0004) (Edit)
	unsigned long                                      bAllowStand : 1;                                          // 0x0288(0x0004) (Edit)
	unsigned long                                      bDisableRun : 1;                                          // 0x0288(0x0004) (Edit)
	unsigned long                                      bDisableSprint : 1;                                       // 0x0288(0x0004) (Edit)
	unsigned long                                      bDisableJump : 1;                                         // 0x0288(0x0004) (Edit)
	unsigned long                                      bNoAnimOnLand : 1;                                        // 0x0288(0x0004) (Edit)
	unsigned long                                      bNoDamageOnLand : 1;                                      // 0x0288(0x0004) (Edit)
	unsigned long                                      bNoDieOnLand : 1;                                         // 0x0288(0x0004) (Edit)
	unsigned long                                      bKill : 1;                                                // 0x0288(0x0004) (Edit)
	unsigned long                                      bEasyJump : 1;                                            // 0x0288(0x0004) (Edit)
	unsigned long                                      bStrongWind : 1;                                          // 0x0288(0x0004) (Edit)
	unsigned long                                      bIsWater : 1;                                             // 0x0288(0x0004) (Edit)
	unsigned long                                      bOverrideWaterWalkHeight : 1;                             // 0x0288(0x0004) (Edit)
	unsigned long                                      bCustomLanding : 1;                                       // 0x0288(0x0004) (Edit)
	unsigned long                                      bDoCustomLandingOnce : 1;                                 // 0x0288(0x0004) (Edit)
	unsigned long                                      bFixedCustomLandingPosition : 1;                          // 0x0288(0x0004) (Edit)
	unsigned long                                      bUsedForLanding : 1;                                      // 0x0288(0x0004) (Transient)
	float                                              WindGlobalIntensity;                                      // 0x028C(0x0004) (Edit)
	class AActor*                                      WindDirectionReference;                                   // 0x0290(0x0008) (Edit)
	float                                              WindMaxPlayerVelInfluence;                                // 0x0298(0x0004) (Edit)
	float                                              WindMinBurstDelay;                                        // 0x029C(0x0004) (Edit)
	float                                              WindMaxBurstDelay;                                        // 0x02A0(0x0004) (Edit)
	float                                              WindMinBurstDuration;                                     // 0x02A4(0x0004) (Edit)
	float                                              WindMaxBurstDuration;                                     // 0x02A8(0x0004) (Edit)
	float                                              WindMinBurstIntensity;                                    // 0x02AC(0x0004) (Edit)
	float                                              WindMaxBurstIntensity;                                    // 0x02B0(0x0004) (Edit)
	float                                              OverridenWaterWalkHeight;                                 // 0x02B4(0x0004) (Edit)
	struct FVector                                     ZoneVelocity;                                             // 0x02B8(0x000C) (Edit)
	float                                              CustomLandingHeight;                                      // 0x02C4(0x0004) (Edit)
	TEnumAsByte<ECustomLandingType>                    CustomLandingType;                                        // 0x02C8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02C9(0x0003) MISSED OFFSET
	class AActor*                                      CustomLandingRefPosition;                                 // 0x02CC(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLPhysicsVolume");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void UpdateCollisionState();
};


// Class OLGame.OLPushableBlockingVolume
// 0x0010 (0x0298 - 0x0288)
class AOLPushableBlockingVolume : public AOLGameplayVolume
{
public:
	TArray<class AOLPushableObject*>                   IgnoredPushable;                                          // 0x0288(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLPushableBlockingVolume");
		return ptr;
	}

};


// Class OLGame.OLPushableTriggerVolume
// 0x0014 (0x029C - 0x0288)
class AOLPushableTriggerVolume : public AOLGameplayVolume
{
public:
	unsigned long                                      bPushableFullyInside : 1;                                 // 0x0288(0x0004) (Edit)
	TArray<class AOLPushableObject*>                   PushablesTouching;                                        // 0x028C(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLPushableTriggerVolume");
		return ptr;
	}

};


// Class OLGame.OLSlopedGroundVolume
// 0x000C (0x0294 - 0x0288)
class AOLSlopedGroundVolume : public AOLGameplayVolume
{
public:
	float                                              MaxWalkingSlope;                                          // 0x0288(0x0004) (Edit)
	float                                              Delay;                                                    // 0x028C(0x0004) (Edit)
	unsigned long                                      bNoSlidingSound : 1;                                      // 0x0290(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSlopedGroundVolume");
		return ptr;
	}

};


// Class OLGame.OLSoundObstructionVolume
// 0x0000 (0x0288 - 0x0288)
class AOLSoundObstructionVolume : public AOLGameplayVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSoundObstructionVolume");
		return ptr;
	}

};


// Class OLGame.OLSpeedLimitVolume
// 0x0008 (0x0290 - 0x0288)
class AOLSpeedLimitVolume : public AOLGameplayVolume
{
public:
	unsigned long                                      bApplyToHero : 1;                                         // 0x0288(0x0004) (Edit)
	unsigned long                                      bApplyToBots : 1;                                         // 0x0288(0x0004) (Edit)
	float                                              MaxSpeed;                                                 // 0x028C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSpeedLimitVolume");
		return ptr;
	}

};


// Class OLGame.OLGameStateList
// 0x0010 (0x0258 - 0x0248)
class AOLGameStateList : public AActor
{
public:
	TArray<struct FOLGameState>                        GameStateList;                                            // 0x0248(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLGameStateList");
		return ptr;
	}


	void STATIC_ResetAllGameState();
	void STATIC_DumpGameState();
};


// Class OLGame.OLGameViewportClient
// 0x0000 (0x01C0 - 0x01C0)
class UOLGameViewportClient : public UUDKGameViewportClient
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLGameViewportClient");
		return ptr;
	}


	void DrawTransition(class UCanvas* Canvas);
};


// Class OLGame.OLHidingBarrel
// 0x010C (0x0354 - 0x0248)
class AOLHidingBarrel : public AActor
{
public:
	unsigned long                                      bHasCover : 1;                                            // 0x0248(0x0004) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x0248(0x0004) (Edit)
	unsigned long                                      bInitiallyEnabled : 1;                                    // 0x0248(0x0004) (Transient)
	unsigned long                                      bBotsCanInvestigate : 1;                                  // 0x0248(0x0004) (Edit)
	unsigned long                                      bHeroInteracting : 1;                                     // 0x0248(0x0004) (Transient)
	unsigned long                                      bBaseTransformSet : 1;                                    // 0x0248(0x0004) (Transient)
	class UStaticMeshComponent*                        Mesh;                                                     // 0x024C(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        MainMesh;                                                 // 0x0254(0x0008) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        CoverMesh;                                                // 0x025C(0x0008) (Edit, ExportObject, Component, EditInline)
	class UFluidSurfaceComponent*                      SurfaceComponent;                                         // 0x0264(0x0008) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        WaterVolumeComponent;                                     // 0x026C(0x0008) (Edit, ExportObject, Component, EditInline)
	TEnumAsByte<EBarrelMaterialType>                   BarrelType;                                               // 0x0274(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0275(0x0003) MISSED OFFSET
	class UOLInvestigationComponent*                   InvestigationComponent;                                   // 0x0278(0x0008) (Edit, ExportObject, Component, EditInline)
	float                                              FindHiddenPlayerProbability;                              // 0x0280(0x0004) (Edit)
	TArray<float>                                      StumpEnterGrabAngles;                                     // 0x0284(0x0010) (Const, NeedCtorLink)
	TArray<float>                                      BarrelEnterGrabAngles;                                    // 0x0294(0x0010) (Const, NeedCtorLink)
	class UDrawCylinderComponent*                      CylinderPreviewComp;                                      // 0x02A4(0x0008) (ExportObject, Component, EditInline)
	class USpriteComponent*                            SpriteComp;                                               // 0x02AC(0x0008) (ExportObject, Component, EditInline)
	struct FRotator                                    BaseRotation;                                             // 0x02B4(0x000C) (Transient)
	struct FVector                                     BaseLocation;                                             // 0x02C0(0x000C) (Transient)
	struct FRotator                                    BaseCoverRotation;                                        // 0x02CC(0x000C) (Transient)
	class AActor*                                      WaterDisturbanceActor;                                    // 0x02D8(0x0008) (Transient)
	float                                              WaterDisturbanceTimeLeft;                                 // 0x02E0(0x0004) (Transient)
	class UMaterialInstance*                           EmptyBarrelMaterialInstance;                              // 0x02E4(0x0008) (Const)
	class UMaterialInstance*                           WaterFilledBarrelMaterialInstance;                        // 0x02EC(0x0008) (Const)
	class UMaterialInstance*                           WaterSurfaceMaterial;                                     // 0x02F4(0x0008) (Const)
	class UMaterialInstance*                           BloodSurfaceMaterial;                                     // 0x02FC(0x0008) (Const)
	class UStaticMesh*                                 NormalBarrelMesh;                                         // 0x0304(0x0008) (Const)
	class UStaticMesh*                                 TreeStumpMesh;                                            // 0x030C(0x0008) (Const)
	class UStaticMesh*                                 WaterVolumeMesh;                                          // 0x0314(0x0008) (Const)
	class UStaticMesh*                                 BloodVolumeMesh;                                          // 0x031C(0x0008) (Const)
	float                                              ClearanceZOffset;                                         // 0x0324(0x0004) (Const)
	float                                              ClearanceStartDist;                                       // 0x0328(0x0004) (Const)
	float                                              ClearanceEndDist;                                         // 0x032C(0x0004) (Const)
	float                                              ClearanceMinWidth;                                        // 0x0330(0x0004) (Const)
	int                                                LastClearanceCheckEntryCount;                             // 0x0334(0x0004) (Transient)
	struct FVector                                     LastClearanceCheckPos;                                    // 0x0338(0x000C) (Transient)
	TArray<int>                                        ClearedAngles;                                            // 0x0344(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLHidingBarrel");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void TriggerEvent(TEnumAsByte<EBarrelEventType> EventType, class AOLPawn* Triggerer);
};


// Class OLGame.OLHints
// 0x0028 (0x0090 - 0x0068)
class UOLHints : public UObject
{
public:
	struct FOLHintList                                 DefaultHints;                                             // 0x0068(0x0018) (Config, NeedCtorLink)
	TArray<struct FOLHintList>                         SpecificCheckpointList;                                   // 0x0080(0x0010) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLHints");
		return ptr;
	}

};


// Class OLGame.OLHUD
// 0x0240 (0x0918 - 0x06D8)
class AOLHUD : public AUDKHUD
{
public:
	class AOLBot*                                      CurrentDebugBot;                                          // 0x06D8(0x0008)
	unsigned long                                      bGammaCalibrationOpen : 1;                                // 0x06E0(0x0004)
	unsigned long                                      bSplashScreenOpen : 1;                                    // 0x06E0(0x0004)
	unsigned long                                      bSplashScreenReady : 1;                                   // 0x06E0(0x0004)
	unsigned long                                      bGameOver : 1;                                            // 0x06E0(0x0004)
	unsigned long                                      bShowCrosshair : 1;                                       // 0x06E0(0x0004) (Config)
	unsigned long                                      bCrosshairDesired : 1;                                    // 0x06E0(0x0004)
	unsigned long                                      bAlwaysShowPrompts : 1;                                   // 0x06E0(0x0004)
	unsigned long                                      bPromptGoBackToMainMenu : 1;                              // 0x06E0(0x0004)
	unsigned long                                      bShowSubtitles : 1;                                       // 0x06E0(0x0004) (Config)
	unsigned long                                      bForcePS4UI : 1;                                          // 0x06E0(0x0004) (Config)
	unsigned long                                      bLastUntranslatedMessageWasGamepad : 1;                   // 0x06E0(0x0004)
	unsigned long                                      bLostFocus : 1;                                           // 0x06E0(0x0004)
	TEnumAsByte<EPPSMode>                              PreGammaPPSMode;                                          // 0x06E4(0x0001)
	TEnumAsByte<EHUDMessagePriority>                   CurrentMessagePriority;                                   // 0x06E5(0x0001)
	TEnumAsByte<EHUDMessageType>                       CurrentMessageType;                                       // 0x06E6(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x06E7(0x0001) MISSED OFFSET
	float                                              SplashScreenActivatedTimestamp;                           // 0x06E8(0x0004)
	float                                              CrosshairOpacity;                                         // 0x06EC(0x0004)
	float                                              LastCrosshairUpdateRealTime;                              // 0x06F0(0x0004)
	float                                              InteractionCrosshairPct;                                  // 0x06F4(0x0004)
	float                                              NewObjectiveTimestamp;                                    // 0x06F8(0x0004)
	struct FVector                                     NewObjectiveHeroPos;                                      // 0x06FC(0x000C)
	float                                              NewObjectiveZoneRadius;                                   // 0x0708(0x0004) (Config)
	float                                              ShowInventoryTimestamp;                                   // 0x070C(0x0004)
	float                                              LastCamCycleTime;                                         // 0x0710(0x0004)
	float                                              LatestRecordingTimer;                                     // 0x0714(0x0004)
	float                                              LatestDocumentTimer;                                      // 0x0718(0x0004)
	float                                              NewObjectiveTimer;                                        // 0x071C(0x0004)
	float                                              LatestCheckpointTimer;                                    // 0x0720(0x0004)
	float                                              RecordingTimeSeconds;                                     // 0x0724(0x0004)
	struct FString                                     PromptMessageString;                                      // 0x0728(0x0010) (NeedCtorLink)
	float                                              SubtitleMaxDistance;                                      // 0x0738(0x0004) (Const)
	float                                              SubtitleMaxDistanceOccluded;                              // 0x073C(0x0004) (Const)
	float                                              SubtitleOcclusionThreshold;                               // 0x0740(0x0004) (Const)
	float                                              SubtitleObstructionThreshold;                             // 0x0744(0x0004) (Const)
	TArray<struct FSubtitleData>                       SubtitleQueue;                                            // 0x0748(0x0010) (NeedCtorLink)
	struct FString                                     CurrentSubtitle;                                          // 0x0758(0x0010) (NeedCtorLink)
	struct FColor                                      SubtitleColors[0x8];                                      // 0x0768(0x0004)
	float                                              MinSubtitleShowTime;                                      // 0x0788(0x0004) (Config)
	class UTexture2D*                                  InventoryBackgoundImg;                                    // 0x078C(0x0008)
	class UTexture2D*                                  NormalCrosshairImage;                                     // 0x0794(0x0008)
	class UTexture2D*                                  InteractionCrosshairImage;                                // 0x079C(0x0008)
	class UTexture2D*                                  SplashScreenImage;                                        // 0x07A4(0x0008)
	class UTexture2D*                                  GameOverImage;                                            // 0x07AC(0x0008)
	class UTexture2D*                                  GameOverImageDemo;                                        // 0x07B4(0x0008)
	class UFont*                                       SmallFont;                                                // 0x07BC(0x0008)
	class UFont*                                       MediumFont;                                               // 0x07C4(0x0008)
	class UFont*                                       LargeFont;                                                // 0x07CC(0x0008)
	class UFont*                                       HugeFont;                                                 // 0x07D4(0x0008)
	class UOLCamcorderHud*                             CamcorderHUDRT;                                           // 0x07DC(0x0008)
	class UOLCamcorderHud*                             CamcorderHUDFullscreen;                                   // 0x07E4(0x0008)
	class UOLMainHud*                                  MainHUD;                                                  // 0x07EC(0x0008)
	class UOLCamcorderFilesHud*                        CamcorderFilesHud;                                        // 0x07F4(0x0008)
	class UTextureRenderTarget2D*                      CamcorderScreenRT;                                        // 0x07FC(0x0008)
	class UOLPickableDocument*                         PickableDocument;                                         // 0x0804(0x0008)
	class UTextureRenderTarget2D*                      PickableDocumentRT;                                       // 0x080C(0x0008)
	class UMaterialInstanceConstant*                   TransparentScreenMaterial;                                // 0x0814(0x0008) (Const)
	class UMaterial*                                   OpaqueScreenMaterial;                                     // 0x081C(0x0008) (Const)
	int                                                ScreenMaterialIndex;                                      // 0x0824(0x0004) (Const)
	class UTexture2D*                                  DarknessOnImage;                                          // 0x0828(0x0008)
	class UTexture2D*                                  FlashlightOnImage;                                        // 0x0830(0x0008)
	class UTexture2D*                                  DarknessOffImage;                                         // 0x0838(0x0008)
	class UTexture2D*                                  DisturbanceBarImage;                                      // 0x0840(0x0008)
	class UTexture2D*                                  DisturbanceReactionThresholdImage;                        // 0x0848(0x0008)
	class UTexture2D*                                  DisturbanceChaseThresholdImage;                           // 0x0850(0x0008)
	class UAkEvent*                                    SoundEventSelect;                                         // 0x0858(0x0008)
	class UAkEvent*                                    SoundEventEnter;                                          // 0x0860(0x0008)
	class UOLUIFrontEnd*                               MenuManager;                                              // 0x0868(0x0008)
	class UOLUIMessage*                                ObjectiveScreen;                                          // 0x0870(0x0008)
	class UOLUIMessage*                                MessageScreen;                                            // 0x0878(0x0008)
	class UOLUIMessage*                                SubtitleScreen;                                           // 0x0880(0x0008)
	struct FString                                     CurrentObjectiveText;                                     // 0x0888(0x0010) (NeedCtorLink)
	struct FString                                     CurrentMessageText;                                       // 0x0898(0x0010) (NeedCtorLink)
	struct FString                                     LastUntranslatedMessageText;                              // 0x08A8(0x0010) (NeedCtorLink)
	struct FString                                     CachedTranslatedMessageText;                              // 0x08B8(0x0010) (NeedCtorLink)
	TArray<struct FGenericMessage>                     GenericMessages;                                          // 0x08C8(0x0010) (NeedCtorLink)
	float                                              ReloadPromptDuration;                                     // 0x08D8(0x0004) (Config)
	float                                              BandagePromptDuration;                                    // 0x08DC(0x0004) (Config)
	float                                              CurrentReloadMessageOnScreenDuration;                     // 0x08E0(0x0004) (Transient)
	float                                              CurrentBandageMessageOnScreenDuration;                    // 0x08E4(0x0004) (Transient)
	struct FString                                     SubtitlesString;                                          // 0x08E8(0x0010) (Transient, NeedCtorLink)
	TArray<struct FSubtitleColorOverrideData>          SubtitleColorOverrides;                                   // 0x08F8(0x0010) (Config, NeedCtorLink)
	struct FScriptDelegate                             __CanUnpauseInPauseMenu__Delegate;                        // 0x0908(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLHUD");
		return ptr;
	}


	void SetLargeImageSize(int imageWidth, int imageHeight, int X, int Y);
	void Tick(float DeltaSeconds);
	void NotifyAltEnter();
	void GamepadConfigChanged();
	void OnLostFocusPause(bool bEnable);
	void ShowHUDMessages();
	void HideHUDMessages();
	bool ShowingSubtitle();
	void HideSubtitle();
	void SetSubtitleHeight(bool High);
	void ShowSubtitle(const struct FString& MessageText);
	void HideObjective();
	void ShowObjective(const struct FString& ObjectiveText);
	void HideMessage();
	void ShowMessage(TEnumAsByte<EHUDMessageType> MessageType, TEnumAsByte<EHUDMessagePriority> MessagePriority, const struct FString& MessageText);
	void ResetMessageScreenForResize();
	void SetCleanTextData(const struct FString& TextName, const struct FString& Title, const struct FString& Text);
	void SetPausedPromptMessage(const struct FString& Messsage, bool bBackToMainMenu);
	void ShowMenuType(TEnumAsByte<EMenuType> MenuType);
	void ShowPausedPromptMenu();
	void PostSoundEventEnter();
	void PostSoundEventSelect();
	void MuteSelectSound(float MuteTime);
	bool CanShowSubMenu(TEnumAsByte<EMenuType> MenuType);
	void HideMenu();
	void ShowMenu();
	void ShowMainMenu();
	void ReturnToPressStartMenu();
	void ClosePauseMenu();
	void SimulateBackInput();
	void ReloadMenu();
	void InputTypeChanged();
	void SetPCQTELabels(const struct FString& upStr, const struct FString& leftStr, const struct FString& downStr, const struct FString& rightStr);
	void CleanReadPreviousPage();
	void CleanReadNextPage();
	void CloseCleanTextMenu();
	bool IsAMenuOpen();
	bool IsInCleanTextMenu();
	bool IsInCreditsMenu();
	bool IsOnMainMenuScreen();
	bool IsMainMenuOpen();
	bool IsInPausedPromptMenu();
	bool IsInPauseMenu();
	bool CanUnpauseInPauseMenu();
	void ShowDebugInfo(float* out_YL, float* out_YPos);
	bool ShouldDisplayDebugMessages();
	void DebugNextAI();
	void DebugPrevAI();
	void NotifyGameSaved();
	void SetGammaCalibrationActive(bool bActive);
	bool ShowingFullScreenOverlay();
	void Draw();
};


// Class OLGame.OLInnerDemonDecal
// 0x0004 (0x025C - 0x0258)
class AOLInnerDemonDecal : public ADecalActorBase
{
public:
	float                                              Intensity;                                                // 0x0258(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLInnerDemonDecal");
		return ptr;
	}

};


// Class OLGame.OLInnerDemonEffectActor
// 0x0048 (0x0290 - 0x0248)
class AOLInnerDemonEffectActor : public AActor
{
public:
	class UParticleSystemComponent*                    InnerDemonParticleEmitter;                                // 0x0248(0x0008) (ExportObject, Component, EditInline)
	class UDrawSphereComponent*                        PreviewComp;                                              // 0x0250(0x0008) (ExportObject, Component, EditInline)
	class AOLEnemyInnerDemon*                          BoundInnerDemon;                                          // 0x0258(0x0008) (Transient)
	unsigned long                                      bSpawnedAsProxy : 1;                                      // 0x0260(0x0004) (Transient)
	unsigned long                                      bFadingOutEffects : 1;                                    // 0x0260(0x0004) (Transient)
	float                                              FadeOutStartTime;                                         // 0x0264(0x0004) (Transient)
	struct FInnerDemonEffectsData                      InnerDemonEffects;                                        // 0x0268(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLInnerDemonEffectActor");
		return ptr;
	}

};


// Class OLGame.OLInnerDemonSensitiveMesh
// 0x000F (0x0264 - 0x0255)
class AOLInnerDemonSensitiveMesh : public AStaticMeshActor
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0255(0x0003) MISSED OFFSET
	class UStaticMeshComponent*                        FootStepMesh;                                             // 0x0258(0x0008) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      bFixLightingAutomatically : 1;                            // 0x0260(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLInnerDemonSensitiveMesh");
		return ptr;
	}

};


// Class OLGame.OLInteractiveSkeletalFoliageActor
// 0x0064 (0x02D8 - 0x0274)
class AOLInteractiveSkeletalFoliageActor : public AInteractiveSkeletalFoliageActor
{
public:
	int                                                Priority;                                                 // 0x0274(0x0004) (Edit)
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x0278(0x0008) (Edit, Const)
	TArray<class UAkEvent*>                            OnPlayerEnterEvents;                                      // 0x0280(0x0010) (Edit, NeedCtorLink)
	TArray<class UAkEvent*>                            OnPlayerExitEvents;                                       // 0x0290(0x0010) (Edit, NeedCtorLink)
	TArray<class UAkEvent*>                            OnEnterEvents;                                            // 0x02A0(0x0010) (Edit, NeedCtorLink)
	TArray<class UAkEvent*>                            OnExitEvents;                                             // 0x02B0(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bOverrideHandShielding : 1;                               // 0x02C0(0x0004) (Edit)
	unsigned long                                      bOverrideHandShieldingValue : 1;                          // 0x02C0(0x0004) (Edit)
	unsigned long                                      bEyeInteraction : 1;                                      // 0x02C0(0x0004) (Edit)
	unsigned long                                      bPushedAway : 1;                                          // 0x02C0(0x0004) (Transient)
	float                                              PushedAwayActiveTimeLeft;                                 // 0x02C4(0x0004) (Transient)
	TArray<class AActor*>                              FoliageTouchingActors;                                    // 0x02C8(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLInteractiveSkeletalFoliageActor");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class OLGame.OLInterpTrackHeroLink
// 0x0000 (0x00C8 - 0x00C8)
class UOLInterpTrackHeroLink : public UInterpTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLInterpTrackHeroLink");
		return ptr;
	}

};


// Class OLGame.OLInterpTrackInstHeroLink
// 0x0000 (0x0068 - 0x0068)
class UOLInterpTrackInstHeroLink : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLInterpTrackInstHeroLink");
		return ptr;
	}

};


// Class OLGame.OLInterpTrackInstPPSEffectParam
// 0x0008 (0x0070 - 0x0068)
class UOLInterpTrackInstPPSEffectParam : public UInterpTrackInst
{
public:
	float                                              PreviousParamValue;                                       // 0x0068(0x0004)
	unsigned long                                      PreviousEffectShown : 1;                                  // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLInterpTrackInstPPSEffectParam");
		return ptr;
	}

};


// Class OLGame.OLInterpTrackPPSEffectParam
// 0x0019 (0x00F9 - 0x00E0)
class UOLInterpTrackPPSEffectParam : public UInterpTrackFloatBase
{
public:
	class UMaterialInstanceConstant*                   EffectMaterial;                                           // 0x00E0(0x0008) (Edit)
	struct FName                                       ParamName;                                                // 0x00E8(0x0008) (Edit)
	struct FName                                       EffectName;                                               // 0x00F0(0x0008) (Edit)
	TEnumAsByte<ETrackPropertyType>                    PropertyType;                                             // 0x00F8(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLInterpTrackPPSEffectParam");
		return ptr;
	}

};


// Class OLGame.OLInventoryManager
// 0x0038 (0x00A0 - 0x0068)
class UOLInventoryManager : public UObject
{
public:
	TArray<struct FName>                               OwnedInventory;                                           // 0x0068(0x0010) (NeedCtorLink)
	TArray<struct FVector>                             CollectedBatteryLocs;                                     // 0x0078(0x0010) (NeedCtorLink)
	TArray<struct FVector>                             CollectedBandageLocs;                                     // 0x0088(0x0010) (NeedCtorLink)
	class AOLCollectiblePickup*                        LastClosestPickup;                                        // 0x0098(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLInventoryManager");
		return ptr;
	}

};


// Class OLGame.OLInvestigationComponent
// 0x0027 (0x00B4 - 0x008D)
class UOLInvestigationComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	float                                              WeightOverride;                                           // 0x0090(0x0004) (Edit)
	float                                              SearchDistance;                                           // 0x0094(0x0004) (Edit)
	unsigned long                                      bOnlyRelevantIfAlreadyInVolume : 1;                       // 0x0098(0x0004) (Edit)
	unsigned long                                      bAlwaysRelevantIfAlreadyInVolume : 1;                     // 0x0098(0x0004) (Edit)
	float                                              MinDelayBetweenInvestigations;                            // 0x009C(0x0004) (Edit)
	class AOLAIInvestigationVolume*                    InvVolume;                                                // 0x00A0(0x0008) (Transient)
	class AOLBot*                                      InvestigatingBot;                                         // 0x00A8(0x0008) (Transient)
	float                                              LastTimeInvestigated;                                     // 0x00B0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLInvestigationComponent");
		return ptr;
	}

};


// Class OLGame.OLLeashMarker
// 0x0028 (0x0270 - 0x0248)
class AOLLeashMarker : public AActor
{
public:
	TEnumAsByte<ELeashType>                            Type;                                                     // 0x0248(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0249(0x0003) MISSED OFFSET
	unsigned long                                      bCylindrical : 1;                                         // 0x024C(0x0004) (Edit)
	float                                              CylinderRadius;                                           // 0x0250(0x0004) (Edit)
	float                                              BoxWidth;                                                 // 0x0254(0x0004) (Edit)
	float                                              BoxLength;                                                // 0x0258(0x0004) (Edit)
	float                                              DebugDrawHeight;                                          // 0x025C(0x0004) (Edit)
	class UDrawCylinderComponent*                      CylinderPreviewComp;                                      // 0x0260(0x0008) (ExportObject, Component, EditInline)
	class UDrawBoxComponent*                           BoxPreviewComp;                                           // 0x0268(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLLeashMarker");
		return ptr;
	}

};


// Class OLGame.OLLensFlareSource
// 0x0010 (0x0258 - 0x0248)
class AOLLensFlareSource : public AActor
{
public:
	class ULensFlareComponent*                         EyeComponent;                                             // 0x0248(0x0008) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class ULensFlareComponent*                         CameraComponent;                                          // 0x0250(0x0008) (Edit, Const, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLLensFlareSource");
		return ptr;
	}

};


// Class OLGame.OLMainHud
// 0x0034 (0x0220 - 0x01EC)
class UOLMainHud : public UGFxMoviePlayer
{
public:
	class AOLHUD*                                      HUD;                                                      // 0x01EC(0x0008)
	struct FString                                     SavingMessageText;                                        // 0x01F4(0x0010) (Const, Localized, NeedCtorLink)
	struct FMainHudObjects                             Objects;                                                  // 0x0204(0x0018)
	struct FMainHudState                               HudState;                                                 // 0x021C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLMainHud");
		return ptr;
	}


	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
};


// Class OLGame.OLObjectives
// 0x0010 (0x0078 - 0x0068)
class UOLObjectives : public UObject
{
public:
	TArray<struct FObjectiveData>                      Objectives;                                               // 0x0068(0x0010) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLObjectives");
		return ptr;
	}

};


// Class OLGame.OLPickableDocument
// 0x0018 (0x0204 - 0x01EC)
class UOLPickableDocument : public UGFxMoviePlayer
{
public:
	class UGFxObject*                                  Title;                                                    // 0x01EC(0x0008) (Transient)
	class UGFxObject*                                  Text;                                                     // 0x01F4(0x0008) (Transient)
	class UGFxObject*                                  PageNumber;                                               // 0x01FC(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLPickableDocument");
		return ptr;
	}


	bool RefreshUI();
	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
};


// Class OLGame.OLPickableObject
// 0x0058 (0x02A0 - 0x0248)
class AOLPickableObject : public AActor
{
public:
	class UStaticMeshComponent*                        PickupMesh;                                               // 0x0248(0x0008) (Edit, ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           PickupLightEnvironment;                                   // 0x0250(0x0008) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      bUsed : 1;                                                // 0x0258(0x0004)
	unsigned long                                      bTakeSnapshot : 1;                                        // 0x0258(0x0004)
	unsigned long                                      bPickupOnNotify : 1;                                      // 0x0258(0x0004)
	unsigned long                                      bDropDownNotify : 1;                                      // 0x0258(0x0004)
	unsigned long                                      bDisabled : 1;                                            // 0x0258(0x0004) (Transient)
	unsigned long                                      bSeen : 1;                                                // 0x0258(0x0004) (Transient)
	struct FVector                                     AttachPositionOffset;                                     // 0x025C(0x000C) (Edit)
	struct FRotator                                    AttachRotationOffset;                                     // 0x0268(0x000C) (Edit)
	float                                              MaxHorzPickupDist;                                        // 0x0274(0x0004) (Edit)
	struct FVector                                     PickedUpLocation;                                         // 0x0278(0x000C) (Transient)
	struct FRotator                                    PickedUpRotation;                                         // 0x0284(0x000C) (Transient)
	struct FLinearColor                                InitialDynamicMaterialData;                               // 0x0290(0x0010) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLPickableObject");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class OLGame.OLBandagesPickupFactory
// 0x0000 (0x02A0 - 0x02A0)
class AOLBandagesPickupFactory : public AOLPickableObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBandagesPickupFactory");
		return ptr;
	}

};


// Class OLGame.OLBatteriesPickupFactory
// 0x0024 (0x02C4 - 0x02A0)
class AOLBatteriesPickupFactory : public AOLPickableObject
{
public:
	int                                                NumBatteries;                                             // 0x02A0(0x0004) (Edit)
	class UStaticMesh*                                 Mesh1;                                                    // 0x02A4(0x0008) (Edit)
	class UStaticMesh*                                 Mesh2;                                                    // 0x02AC(0x0008) (Edit)
	class UStaticMesh*                                 Mesh3;                                                    // 0x02B4(0x0008) (Edit)
	class UStaticMesh*                                 Mesh4;                                                    // 0x02BC(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBatteriesPickupFactory");
		return ptr;
	}

};


// Class OLGame.OLCollectiblePickup
// 0x0040 (0x02E0 - 0x02A0)
class AOLCollectiblePickup : public AOLPickableObject
{
public:
	struct FName                                       CollectibleName;                                          // 0x02A0(0x0008) (Edit)
	TEnumAsByte<ECollectibleType>                      CollectibleType;                                          // 0x02A8(0x0001) (Edit)
	TEnumAsByte<EPickupNightVisionState>               PickupNightVisionState;                                   // 0x02A9(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x02AA(0x0002) MISSED OFFSET
	TArray<class UMaterialInstance*>                   MaterialOverrides;                                        // 0x02AC(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bIsGameplayItem : 1;                                      // 0x02BC(0x0004) (Edit)
	unsigned long                                      bNoRecording : 1;                                         // 0x02BC(0x0004) (Edit)
	unsigned long                                      bOnlyPickupOnce : 1;                                      // 0x02BC(0x0004) (Edit)
	unsigned long                                      bReactionOnPutDown : 1;                                   // 0x02BC(0x0004) (Edit)
	unsigned long                                      bOverrideDarkLigthValue : 1;                              // 0x02BC(0x0004) (Edit)
	class UAkEvent*                                    GameplayPickupSound;                                      // 0x02C0(0x0008) (Edit)
	class UAkEvent*                                    OverrideSndReactionOnPutDown;                             // 0x02C8(0x0008) (Edit)
	float                                              OverriddenDarkLigthBrightnessEV;                          // 0x02D0(0x0004) (Edit)
	float                                              OverriddenDarkLigthRadius;                                // 0x02D4(0x0004) (Edit)
	class USwfMovie*                                   MovieInfo;                                                // 0x02D8(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLCollectiblePickup");
		return ptr;
	}


	void PostBeginPlay();
	bool ShouldShowCollectible();
};


// Class OLGame.OLGameplayItemPickup
// 0x0020 (0x02C0 - 0x02A0)
class AOLGameplayItemPickup : public AOLPickableObject
{
public:
	struct FName                                       ItemName;                                                 // 0x02A0(0x0008) (Edit)
	TArray<struct FGameFlowRulePickup>                 GameFlowRules;                                            // 0x02A8(0x0010) (Edit, DuplicateTransient, NeedCtorLink)
	class UAkEvent*                                    PickupSound;                                              // 0x02B8(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLGameplayItemPickup");
		return ptr;
	}

};


// Class OLGame.OLPlayerInput
// 0x00B1 (0x0629 - 0x0578)
class UOLPlayerInput : public UUDKPlayerInput
{
public:
	TArray<struct FKeyBind>                            GPBindingsA;                                              // 0x0578(0x0010) (Config, NeedCtorLink)
	TArray<struct FKeyBind>                            GPBindingsB;                                              // 0x0588(0x0010) (Config, NeedCtorLink)
	TArray<struct FKeyBind>                            GPBindingsC;                                              // 0x0598(0x0010) (Config, NeedCtorLink)
	TArray<struct FKeyBind>                            GPBindingsD;                                              // 0x05A8(0x0010) (Config, NeedCtorLink)
	TArray<struct FKeyBind>                            GPBindingsE;                                              // 0x05B8(0x0010) (Config, NeedCtorLink)
	struct FString                                     StrafeCommand;                                            // 0x05C8(0x0010) (Config, NeedCtorLink)
	struct FString                                     MoveCommand;                                              // 0x05D8(0x0010) (Config, NeedCtorLink)
	struct FString                                     LookXCommand;                                             // 0x05E8(0x0010) (Config, NeedCtorLink)
	struct FString                                     LookYCommand;                                             // 0x05F8(0x0010) (Config, NeedCtorLink)
	struct FString                                     SouthpawMoveCommand;                                      // 0x0608(0x0010) (Config, NeedCtorLink)
	struct FString                                     SouthpawLookYCommand;                                     // 0x0618(0x0010) (Config, NeedCtorLink)
	TEnumAsByte<EGamepadBindingsType>                  GamepadConfig;                                            // 0x0628(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLPlayerInput");
		return ptr;
	}


	bool IsKeyPressed(const struct FName& Key);
	void UnBindNoSave(const struct FString& Command);
	void PreProcessInput(float DeltaTime);
	void StopLeanRight();
	void StopLeanLeft();
	void StartLeanRight();
	void StartLeanLeft();
	void StopRun();
	void ChangeCamCorderHudDisplay();
	void NativeChangeCamCorderHudDisplay();
	void StartRun();
	void StartRunNative();
	void ToggleDuck();
	void UnDuck();
	void Duck();
	void ResetInput();
};


// Class OLGame.OLProfileSettings
// 0x0000 (0x00CC - 0x00CC)
class UOLProfileSettings : public UUDKProfileSettings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLProfileSettings");
		return ptr;
	}


	void AutoDetectPerformanceSettings();
	void MatchMonitorResolution(bool bLimitForPerformance);
	void SetLanguageFromSteam();
	void SetToDefaults();
	bool GetProfileSettingResolutions(int ProfileSettingId, TArray<struct FName>* ResolutionNames, TArray<struct FIntPoint>* Resolutions);
	bool GetProfileSettingValues(int ProfileSettingId, TArray<struct FName>* Values);
	float GetGammaSetting();
};


// Class OLGame.OLPushableObject
// 0x0284 (0x04CC - 0x0248)
class AOLPushableObject : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;                   // 0x0248(0x0008) (Const, Native, NoExport)
	unsigned long                                      bEnabled : 1;                                             // 0x0250(0x0004) (Edit)
	unsigned long                                      bAutoBuildCenter : 1;                                     // 0x0250(0x0004) (Edit)
	unsigned long                                      bCanPushBack : 1;                                         // 0x0250(0x0004) (Edit)
	unsigned long                                      bCanPullBack : 1;                                         // 0x0250(0x0004) (Edit)
	unsigned long                                      bCanPushFwd : 1;                                          // 0x0250(0x0004) (Edit)
	unsigned long                                      bCanPullFwd : 1;                                          // 0x0250(0x0004) (Edit)
	unsigned long                                      bCanPushRight : 1;                                        // 0x0250(0x0004) (Edit)
	unsigned long                                      bCanPullRight : 1;                                        // 0x0250(0x0004) (Edit)
	unsigned long                                      bCanPushLeft : 1;                                         // 0x0250(0x0004) (Edit)
	unsigned long                                      bCanPullLeft : 1;                                         // 0x0250(0x0004) (Edit)
	unsigned long                                      bConstantMovementSpeed : 1;                               // 0x0250(0x0004) (Edit)
	unsigned long                                      bAutoReset : 1;                                           // 0x0250(0x0004) (Edit)
	unsigned long                                      bNoResetWhenMaxReached : 1;                               // 0x0250(0x0004) (Edit)
	unsigned long                                      bDamageStopsPushing : 1;                                  // 0x0250(0x0004) (Edit)
	unsigned long                                      bOverrideDefaultCameraOrientation : 1;                    // 0x0250(0x0004) (Edit)
	unsigned long                                      bCustomInteraction : 1;                                   // 0x0250(0x0004) (Edit)
	unsigned long                                      bOverrideSoundMaterial : 1;                               // 0x0250(0x0004)
	unsigned long                                      bApplyRulesLive : 1;                                      // 0x0250(0x0004) (Edit, DuplicateTransient)
	unsigned long                                      bNoSavedState : 1;                                        // 0x0250(0x0004) (Edit, DuplicateTransient)
	unsigned long                                      bInitiallyEnabled : 1;                                    // 0x0250(0x0004) (Transient)
	unsigned long                                      bPhysicsActive : 1;                                       // 0x0250(0x0004) (Transient)
	unsigned long                                      bPlayerLocked : 1;                                        // 0x0250(0x0004) (Transient)
	unsigned long                                      bPushActive : 1;                                          // 0x0250(0x0004) (Transient)
	unsigned long                                      bPushSoundActive : 1;                                     // 0x0250(0x0004) (Transient)
	unsigned long                                      bPushing : 1;                                             // 0x0250(0x0004) (Transient)
	unsigned long                                      bNoDecel : 1;                                             // 0x0250(0x0004) (Transient)
	unsigned long                                      bNoActivatePhysics : 1;                                   // 0x0250(0x0004) (Transient)
	unsigned long                                      bProgressiveReset : 1;                                    // 0x0250(0x0004) (Transient)
	unsigned long                                      bAlignmentInitialized : 1;                                // 0x0250(0x0004) (Transient)
	unsigned long                                      bOnSpline : 1;                                            // 0x0250(0x0004) (Transient)
	unsigned long                                      bSplineDescInitialized : 1;                               // 0x0250(0x0004) (Transient, DuplicateTransient)
	unsigned long                                      bLastForceRBUpdate : 1;                                   // 0x0250(0x0004) (Transient)
	float                                              InteractDist;                                             // 0x0254(0x0004) (Edit)
	float                                              ContactHeight;                                            // 0x0258(0x0004) (Edit)
	struct FVector                                     CenterOffset;                                             // 0x025C(0x000C) (Edit)
	float                                              Width;                                                    // 0x0268(0x0004) (Edit)
	float                                              Depth;                                                    // 0x026C(0x0004) (Edit)
	float                                              MaxBackDist;                                              // 0x0270(0x0004) (Edit)
	float                                              MaxFwdDist;                                               // 0x0274(0x0004) (Edit)
	float                                              MaxRightDist;                                             // 0x0278(0x0004) (Edit)
	float                                              MaxLeftDist;                                              // 0x027C(0x0004) (Edit)
	TEnumAsByte<EPushObjectType>                       ForwardPushType;                                          // 0x0280(0x0001) (Edit)
	TEnumAsByte<EPushObjectType>                       BackwardPushType;                                         // 0x0281(0x0001) (Edit)
	TEnumAsByte<EPushObjectType>                       RightwardPushType;                                        // 0x0282(0x0001) (Edit)
	TEnumAsByte<EPushObjectType>                       LeftwardPushType;                                         // 0x0283(0x0001) (Edit)
	TEnumAsByte<EPushableMaterial>                     PushableType;                                             // 0x0284(0x0001) (Edit)
	TEnumAsByte<EPushSideType>                         CustomInteractionPushSide;                                // 0x0285(0x0001) (Edit)
	TEnumAsByte<EPushableMaterial>                     OverrideSoundMaterial;                                    // 0x0286(0x0001) (Edit)
	TEnumAsByte<EPushSideType>                         ActionSide;                                               // 0x0287(0x0001) (Transient)
	class AOLDoor*                                     LinkedDoor;                                               // 0x0288(0x0008) (Edit)
	class AOLPushableSplineMarker*                     LinkedSpline;                                             // 0x0290(0x0008) (Edit)
	float                                              SplineInitialDisplacement;                                // 0x0298(0x0004) (Edit)
	float                                              DesiredSpeed;                                             // 0x029C(0x0004) (Transient)
	float                                              MaxSpeed;                                                 // 0x02A0(0x0004) (Edit)
	float                                              MaxSideSpeed;                                             // 0x02A4(0x0004) (Edit)
	float                                              ResetSpeed;                                               // 0x02A8(0x0004) (Edit)
	float                                              DefaultCameraOrientation;                                 // 0x02AC(0x0004) (Edit)
	struct FVector                                     LastUncollidedPosition;                                   // 0x02B0(0x000C) (Transient)
	struct FVector                                     LastUncollidedDisplacement;                               // 0x02BC(0x000C) (Transient)
	TArray<struct FAlignmentData>                      Alignments;                                               // 0x02C8(0x0010) (Edit, NeedCtorLink)
	struct FName                                       PushablePromptNameId;                                     // 0x02D8(0x0008) (Edit)
	struct FName                                       PushablePromptNameGamepadId;                              // 0x02E0(0x0008) (Edit)
	struct FVector                                     CustomInteractionLocation;                                // 0x02E8(0x000C) (Edit)
	struct FVector                                     CustomInteractionDirection;                               // 0x02F4(0x000C) (Edit)
	struct FVector                                     AnimationOffset;                                          // 0x0300(0x000C) (Edit)
	float                                              AnimationYawRotationOffset;                               // 0x030C(0x0004) (Edit)
	struct FPushablePhysicsConfig                      SplinePhysics;                                            // 0x0310(0x000C) (Edit)
	class UStaticMeshComponent*                        Mesh;                                                     // 0x031C(0x0008) (Edit, ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      SkelMesh;                                                 // 0x0324(0x0008) (Edit, ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      MineCartWheels;                                           // 0x032C(0x0008) (ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x0334(0x0008) (Edit, ExportObject, Component, EditInline)
	class AOLPushableObject*                           LinkedPushable;                                           // 0x033C(0x0008) (Edit)
	float                                              ExtraNavmeshSpacing;                                      // 0x0344(0x0004) (Edit)
	struct FGuid                                       StateGUID;                                                // 0x0348(0x0010) (Const, EditConst, DuplicateTransient)
	TArray<struct FGameFlowPushableRule>               GameFlowRules;                                            // 0x0358(0x0010) (Edit, DuplicateTransient, NeedCtorLink)
	float                                              PushActiveStartTimestamp;                                 // 0x0368(0x0004) (Transient)
	struct FVector                                     CurrentDisplacement;                                      // 0x036C(0x000C) (Transient)
	struct FVector                                     CurrentVelocity;                                          // 0x0378(0x000C) (Transient)
	float                                              CurrentPhase;                                             // 0x0384(0x0004) (Transient)
	float                                              LastPlayerDamageTime;                                     // 0x0388(0x0004) (Transient)
	struct FVector                                     BaseLocation;                                             // 0x038C(0x000C) (Transient)
	struct FVector                                     LastNavmeshLocation;                                      // 0x0398(0x000C) (Transient)
	float                                              PushModulatorValue;                                       // 0x03A4(0x0004) (Transient)
	float                                              TempMaxBackDist;                                          // 0x03A8(0x0004) (Transient)
	float                                              TempMaxFwdDist;                                           // 0x03AC(0x0004) (Transient)
	float                                              ProgressiveResetSpeed;                                    // 0x03B0(0x0004) (Transient)
	float                                              ProgressiveResetOriginalX;                                // 0x03B4(0x0004) (Transient)
	float                                              ProgressiveResetStartTime;                                // 0x03B8(0x0004) (Transient)
	float                                              DesiredZ;                                                 // 0x03BC(0x0004) (Transient)
	struct FRotator                                    DesiredRotation;                                          // 0x03C0(0x000C) (Transient)
	float                                              BlockableHitSoundTimestamp;                               // 0x03CC(0x0004) (Transient)
	struct FSplinePositionDescriptor                   BaseSplinePosDesc;                                        // 0x03D0(0x0010) (Transient, DuplicateTransient)
	class AOLPushableSplineMarker*                     InitialLinkedSpline;                                      // 0x03E0(0x0008) (Transient)
	float                                              InitialLinkedSplineDisplacement;                          // 0x03E8(0x0004) (Transient)
	class AOLPushableObject*                           OldLinkedPushable;                                        // 0x03EC(0x0008) (Transient)
	TArray<struct FPushableAttachmentData>             PushableAttachments;                                      // 0x03F4(0x0010) (Transient, NeedCtorLink)
	float                                              AccelApproachCoeff;                                       // 0x0404(0x0004) (Const)
	float                                              DecelApproachCoeff;                                       // 0x0408(0x0004) (Const)
	class UAkEvent*                                    SndStartPushing;                                          // 0x040C(0x0008) (Const)
	class UAkEvent*                                    SndStopPushing;                                           // 0x0414(0x0008) (Const)
	class UAkEvent*                                    SndMineCartStart;                                         // 0x041C(0x0008) (Const)
	class UAkEvent*                                    SndMineCartStop;                                          // 0x0424(0x0008) (Const)
	class UAkEvent*                                    SndPushableHitBlocking;                                   // 0x042C(0x0008) (Const)
	class UAkEvent*                                    SndPlayerHitBlocking;                                     // 0x0434(0x0008) (Const)
	struct FName                                       RTPCPushingSpeed;                                         // 0x043C(0x0008) (Const)
	struct FName                                       RTPCMineCartSpeed;                                        // 0x0444(0x0008) (Const)
	struct FName                                       SwitchPushableType;                                       // 0x044C(0x0008) (Const)
	struct FName                                       SwitchPushableTypeMetal;                                  // 0x0454(0x0008) (Const)
	struct FName                                       SwitchPushableTypeWood;                                   // 0x045C(0x0008) (Const)
	struct FName                                       SwitchPushableTypeWoodenCart;                             // 0x0464(0x0008) (Const)
	struct FName                                       SwitchPushableTypeBarnDoor;                               // 0x046C(0x0008) (Const)
	struct FName                                       SwitchPushableTypeRollingCart;                            // 0x0474(0x0008) (Const)
	struct FName                                       SwitchPushableTypeBigBucket;                              // 0x047C(0x0008) (Const)
	class UStaticMesh*                                 MineCartMesh;                                             // 0x0484(0x0008) (Const)
	class USkeletalMesh*                               WoodenCartMesh;                                           // 0x048C(0x0008) (Const)
	class UStaticMesh*                                 BarnDoorMesh;                                             // 0x0494(0x0008) (Const)
	TArray<struct FAlignmentData>                      WoodenCartAlignment;                                      // 0x049C(0x0010) (Const, NeedCtorLink)
	class UStaticMesh*                                 RollingCartMesh;                                          // 0x04AC(0x0008) (Const)
	struct FName                                       BonePivot1Name;                                           // 0x04B4(0x0008) (Const)
	struct FName                                       BonePivot2Name;                                           // 0x04BC(0x0008) (Const)
	struct FName                                       LinkedPushablePropertyName;                               // 0x04C4(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLPushableObject");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void OnTeleport(class USeqAct_Teleport* Action);
	void PostOnTeleport();
	void PreOnTeleport();
};


// Class OLGame.OLRecordingUtils
// 0x0000 (0x0068 - 0x0068)
class UOLRecordingUtils : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLRecordingUtils");
		return ptr;
	}


	void STATIC_ShowCleanText(unsigned char Type, int Index, int SortingType);
	void STATIC_CleanMemory();
	void STATIC_ConditionalResetMovieOverrideDuration(unsigned char Type, int Index, int SortingType, TArray<class UTexture*>* Textures);
	bool STATIC_HasMovieEnded();
	void STATIC_StopMovieTexture(bool bPause, class UAkEvent* loopStop, TArray<class UTexture*>* Textures);
	void STATIC_PlayMovieTexture(class UAkEvent* LoopStart, TArray<class UTexture*>* Textures);
	void STATIC_ResizeFullSizeImage(class UGFxMoviePlayer* menu, unsigned char Type, int Index, int SortingType, TArray<class UTexture*>* Textures);
	void STATIC_PlayMovieVO(class UAkEvent* VO);
	void STATIC_StopMovieVO(class UAkEvent* VO);
	class UAkEvent* STATIC_LoadMovieLoopStop(unsigned char Type, int Index, int SortingType);
	class UAkEvent* STATIC_LoadMovieLoopStart(unsigned char Type, int Index, int SortingType);
	class UAkEvent* STATIC_LoadMovieVO(unsigned char Type, int Index, int SortingType);
	class UTexture* STATIC_GetFullSizeRecordingTexture(unsigned char Type, int Index, int SortingType, TArray<class UTexture*>* Textures);
	class UTexture* STATIC_GetRecordingTexture(unsigned char Type, int Index, int SortingType);
	class UTexture* STATIC_GetCategoryTexture(unsigned char Type, int SortingType);
	TArray<struct FString> STATIC_GetRecordings(unsigned char Type, int Section);
	TArray<struct FString> STATIC_GetRecordingSections(unsigned char Type);
	struct FString STATIC_GetPathName(class UObject* Obj);
	bool STATIC_HasRecordings();
	bool STATIC_IsVideoRecording(unsigned char Type, int Index, int SortingType);
};


// Class OLGame.OLSeqAct_ActivateGameState
// 0x000C (0x0164 - 0x0158)
class UOLSeqAct_ActivateGameState : public USequenceAction
{
public:
	struct FName                                       GameStateName;                                            // 0x0158(0x0008) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0160(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ActivateGameState");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIDestroy
// 0x0014 (0x016C - 0x0158)
class UOLSeqAct_AIDestroy : public USequenceAction
{
public:
	unsigned long                                      bKillEveryone : 1;                                        // 0x0158(0x0004) (Edit)
	TArray<class UOLBotCondition*>                     Conditions;                                               // 0x015C(0x0010) (Edit, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIDestroy");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AISpawn
// 0x0020 (0x01EC - 0x01CC)
class UOLSeqAct_AISpawn : public USeqAct_ActorFactory
{
public:
	class AActor*                                      SpawnPoint;                                               // 0x01CC(0x0008)
	float                                              SuccessReadyTime;                                         // 0x01D4(0x0004) (Transient)
	unsigned long                                      bSpawnSuccess : 1;                                        // 0x01D8(0x0004) (Transient)
	unsigned long                                      bSpawnFailure : 1;                                        // 0x01D8(0x0004) (Transient)
	unsigned long                                      bCommentsUpToDate : 1;                                    // 0x01D8(0x0004) (Transient)
	TArray<struct FString>                             MultiLineComments;                                        // 0x01DC(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AISpawn");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_ChangeDynamicDifficulty
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_ChangeDynamicDifficulty : public USequenceAction
{
public:
	TEnumAsByte<EDynamicDifficultyIncreaseType>        DifficultyChange;                                         // 0x0158(0x0001) (Edit)
	TEnumAsByte<EDifficultyModeModifier>               ForcedDifficultyModifier;                                 // 0x0159(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x015A(0x0002) MISSED OFFSET
	unsigned long                                      bForceToDifficultyModifier : 1;                           // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ChangeDynamicDifficulty");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Checkpoint
// 0x000C (0x0164 - 0x0158)
class UOLSeqAct_Checkpoint : public USequenceAction
{
public:
	struct FName                                       CheckpointName;                                           // 0x0158(0x0008) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0160(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Checkpoint");
		return ptr;
	}


	void Activated();
};


// Class OLGame.OLSeqAct_SelectByDeathCount
// 0x0005 (0x015D - 0x0158)
class UOLSeqAct_SelectByDeathCount : public USequenceAction
{
public:
	int                                                NumberOfScenarios;                                        // 0x0158(0x0004) (Edit)
	TEnumAsByte<EDeathCountLoopMode>                   LoopMode;                                                 // 0x015C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_SelectByDeathCount");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_UpdateDifficulty
// 0x0010 (0x0168 - 0x0158)
class UOLSeqAct_UpdateDifficulty : public USequenceAction
{
public:
	struct FDynamicDifficulty                          DifficultyData;                                           // 0x0158(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_UpdateDifficulty");
		return ptr;
	}

};


// Class OLGame.OLSoundConnector
// 0x0024 (0x026C - 0x0248)
class AOLSoundConnector : public AActor
{
public:
	class UDrawSphereComponent*                        SpherePreviewComp;                                        // 0x0248(0x0008) (ExportObject, Component, EditInline)
	class UDrawBoxComponent*                           BoxPreviewComp;                                           // 0x0250(0x0008) (ExportObject, Component, EditInline)
	class UDrawBoxComponent*                           VolumeConnectorBoxPreviewComp;                            // 0x0258(0x0008) (ExportObject, Component, EditInline)
	class UOLSoundConnectorComponent*                  SoundConnectorComp;                                       // 0x0260(0x0008) (Edit, ExportObject, Component, EditInline)
	float                                              OcclusionFactor;                                          // 0x0268(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSoundConnector");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class OLGame.OLSoundConnectorComponent
// 0x0037 (0x00C4 - 0x008D)
class UOLSoundConnectorComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	unsigned long                                      bEnabled : 1;                                             // 0x0090(0x0004) (Edit)
	unsigned long                                      bSpherical : 1;                                           // 0x0090(0x0004) (Edit)
	unsigned long                                      bShowVolumeConnectorBox : 1;                              // 0x0090(0x0004) (Edit)
	unsigned long                                      bAllowSourceVirtualization : 1;                           // 0x0090(0x0004) (Edit)
	unsigned long                                      bInitializedDualSidedConnections : 1;                     // 0x0090(0x0004) (Transient)
	float                                              SphereRadius;                                             // 0x0094(0x0004) (Edit)
	float                                              BoxWidth;                                                 // 0x0098(0x0004) (Edit)
	float                                              BoxHeight;                                                // 0x009C(0x0004) (Edit)
	struct FVector                                     VolumeConnectorExtent;                                    // 0x00A0(0x000C)
	TArray<class AOLSoundEnvironmentVolume*>           ConnectedVolumes;                                         // 0x00AC(0x0010) (Transient, NeedCtorLink)
	class AOLSoundEnvironmentVolume*                   SurroundingVolume;                                        // 0x00BC(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSoundConnectorComponent");
		return ptr;
	}

};


// Class OLGame.OLSoundEmitter
// 0x0100 (0x0168 - 0x0068)
class UOLSoundEmitter : public UObject
{
public:
	class AActor*                                      Actor;                                                    // 0x0068(0x0008)
	unsigned long                                      bActive : 1;                                              // 0x0070(0x0004)
	unsigned long                                      bDirty : 1;                                               // 0x0070(0x0004)
	unsigned long                                      bDynamic : 1;                                             // 0x0070(0x0004)
	unsigned long                                      bSourceIsHeroControlled : 1;                              // 0x0070(0x0004)
	unsigned long                                      bAllowVirtualization : 1;                                 // 0x0070(0x0004)
	unsigned long                                      bForceHighFidelityDynamicUpdate : 1;                      // 0x0070(0x0004)
	unsigned long                                      bModifyPerceivedSoundLevels : 1;                          // 0x0070(0x0004)
	unsigned long                                      bConnectedToListener : 1;                                 // 0x0070(0x0004)
	unsigned long                                      bValidCachedVirtNode : 1;                                 // 0x0070(0x0004)
	unsigned long                                      bValidCachedBackupVirtMode : 1;                           // 0x0070(0x0004)
	unsigned long                                      bVirtualized : 1;                                         // 0x0070(0x0004)
	unsigned long                                      bInMultiPositionGroup : 1;                                // 0x0070(0x0004)
	unsigned long                                      bGroupMaster : 1;                                         // 0x0070(0x0004)
	float                                              MaxPathingDistance;                                       // 0x0074(0x0004)
	float                                              MaxAudibleRange;                                          // 0x0078(0x0004)
	TArray<struct FSoundEnvVolumeData>                 SoundEnvironments;                                        // 0x007C(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              CurrentOcclusion;                                         // 0x008C(0x0004)
	float                                              TargetOcclusion;                                          // 0x0090(0x0004)
	float                                              CurrentObstruction;                                       // 0x0094(0x0004)
	float                                              TargetObstruction;                                        // 0x0098(0x0004)
	float                                              NextObstructionCheckTime;                                 // 0x009C(0x0004)
	float                                              NextOcclusionCheckTime;                                   // 0x00A0(0x0004)
	float                                              LastObstructionCheckTime;                                 // 0x00A4(0x0004)
	float                                              LastOcclusionCheckTime;                                   // 0x00A8(0x0004)
	float                                              AngleFromListener;                                        // 0x00AC(0x0004)
	float                                              LastActivatedTime;                                        // 0x00B0(0x0004)
	struct FVector                                     BaseLocation;                                             // 0x00B4(0x000C)
	struct FVirtualizationNode                         CachedVirtualizationNode;                                 // 0x00C0(0x0014) (Component)
	struct FVirtualizationNode                         CachedBackupVirtNode;                                     // 0x00D4(0x0014) (Component)
	float                                              CachedBaseWeight0;                                        // 0x00E8(0x0004)
	float                                              CachedBaseWeight1;                                        // 0x00EC(0x0004)
	struct FVector                                     VirtualizedLocation;                                      // 0x00F0(0x000C)
	TEnumAsByte<EmitterUpdateDetail>                   UpdateDetail;                                             // 0x00FC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00FD(0x0003) MISSED OFFSET
	struct FString                                     GroupEventName;                                           // 0x0100(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FAuxBusInfo>                         ReverbBusInfos;                                           // 0x0110(0x0010) (AlwaysInit, NeedCtorLink)
	struct FEmitterDebugInfo                           DebugInfo;                                                // 0x0120(0x0048) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSoundEmitter");
		return ptr;
	}

};


// Class OLGame.OLSoundEmittingMeshActor
// 0x0017 (0x026C - 0x0255)
class AOLSoundEmittingMeshActor : public AStaticMeshActor
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0255(0x0003) MISSED OFFSET
	class UAkEvent*                                    PlayEvent;                                                // 0x0258(0x0008) (Edit)
	unsigned long                                      bAllowVirtualization : 1;                                 // 0x0260(0x0004) (Edit)
	unsigned long                                      bEnableMultiPosition : 1;                                 // 0x0260(0x0004) (Edit)
	unsigned long                                      bPlaying : 1;                                             // 0x0260(0x0004) (Transient)
	float                                              MaxPathingDistance;                                       // 0x0264(0x0004) (Edit)
	float                                              MaximumAudibleRange;                                      // 0x0268(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSoundEmittingMeshActor");
		return ptr;
	}

};


// Class OLGame.OLSoundEnvironment
// 0x0020 (0x0088 - 0x0068)
class UOLSoundEnvironment : public UObject
{
public:
	struct FString                                     ReverbEnvironmentType;                                    // 0x0068(0x0010) (Edit, NeedCtorLink)
	float                                              OcclusionFactor;                                          // 0x0078(0x0004) (Edit)
	float                                              ObstructionFactor;                                        // 0x007C(0x0004) (Edit)
	class UAkBank*                                     RequiredBank;                                             // 0x0080(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSoundEnvironment");
		return ptr;
	}

};


// Class OLGame.OLSoundEnvironmentManager
// 0x0158 (0x01C0 - 0x0068)
class UOLSoundEnvironmentManager : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x0068(0x0008) (Const, Native, NoExport)
	TArray<class AOLSoundEnvironmentVolume*>           ListenerVolumes;                                          // 0x0070(0x0010) (Transient, NeedCtorLink)
	TArray<class AOLSoundEnvironmentVolume*>           AllVolumes;                                               // 0x0080(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      bUpdateAllVolumesNeeded : 1;                              // 0x0090(0x0004)
	unsigned long                                      bLevelsHaveBeenRemoved : 1;                               // 0x0090(0x0004)
	unsigned long                                      bForceUpdateVolumesDuringTransition : 1;                  // 0x0090(0x0004)
	unsigned long                                      bPendingDestroy : 1;                                      // 0x0090(0x0004)
	unsigned long                                      bEnableSoundVirtualization : 1;                           // 0x0090(0x0004) (Config)
	TArray<class UOLSoundEmitter*>                     ActiveSources;                                            // 0x0094(0x0010) (NeedCtorLink)
	TArray<struct FMultiPositionGroup>                 ActiveGroups;                                             // 0x00A4(0x0010) (NeedCtorLink)
	float                                              CurrentSoundPowerLeft;                                    // 0x00B4(0x0004)
	float                                              CurrentSoundPowerRight;                                   // 0x00B8(0x0004)
	float                                              CurrentMicrophoneMinFocusPower;                           // 0x00BC(0x0004)
	float                                              NextMicrophoneMinPowerRandomizeTime;                      // 0x00C0(0x0004)
	class UOLSoundEnvironment*                         DefaultSoundEnvironment;                                  // 0x00C4(0x0008)
	class UAkEvent*                                    EvtResetAllBuses;                                         // 0x00CC(0x0008)
	struct FName                                       FadeRTPC;                                                 // 0x00D4(0x0008) (Const)
	struct FString                                     ExteriorRTPC;                                             // 0x00DC(0x0010) (Const, NeedCtorLink)
	float                                              OcclusionApproachCoeff;                                   // 0x00EC(0x0004) (Config)
	float                                              ObstructionApproachCoeff;                                 // 0x00F0(0x0004) (Config)
	float                                              FreePathingDist;                                          // 0x00F4(0x0004) (Config)
	float                                              LockerOcclusion;                                          // 0x00F8(0x0004) (Config)
	float                                              BarrelOcclusion;                                          // 0x00FC(0x0004) (Config)
	float                                              WardrobeOcclusion;                                        // 0x0100(0x0004) (Config)
	struct FString                                     LockerReverbEnvironment;                                  // 0x0104(0x0010) (Config, NeedCtorLink)
	struct FString                                     BarrelReverbEnvironment;                                  // 0x0114(0x0010) (Config, NeedCtorLink)
	struct FString                                     WardrobeReverbEnvironment;                                // 0x0124(0x0010) (Config, NeedCtorLink)
	struct FHQOcclusionSettingsData                    HighQualityOcclusionSettings;                             // 0x0134(0x0028) (Config)
	float                                              SoundMeterMaxPower;                                       // 0x015C(0x0004) (Config)
	float                                              SoundMeterUpdateInterval;                                 // 0x0160(0x0004) (Config)
	float                                              MicrophoneFocusAngleInner;                                // 0x0164(0x0004) (Config)
	float                                              MicrophoneFocusAngleInnerZoomedIn;                        // 0x0168(0x0004) (Config)
	float                                              MicrophoneFocusAngleOuter;                                // 0x016C(0x0004) (Config)
	float                                              MicrophoneFocusAngleOuterZoomedIn;                        // 0x0170(0x0004) (Config)
	float                                              MicrophoneFactorCenter;                                   // 0x0174(0x0004) (Config)
	float                                              MicrophoneFactorCenterZoomedIn;                           // 0x0178(0x0004) (Config)
	float                                              MicrophoneFactorInner;                                    // 0x017C(0x0004) (Config)
	float                                              MicrophoneFactorInnerZoomedIn;                            // 0x0180(0x0004) (Config)
	float                                              MicrophoneFactorOuter;                                    // 0x0184(0x0004) (Config)
	float                                              MicrophoneFactorOuterZoomedIn;                            // 0x0188(0x0004) (Config)
	float                                              MicrophoneInnerCurveExp;                                  // 0x018C(0x0004) (Config)
	float                                              MicrophoneOcclusionMultiplier;                            // 0x0190(0x0004) (Config)
	float                                              MicrophoneObstructionMultiplier;                          // 0x0194(0x0004) (Config)
	float                                              MicrophonePerceivedFocusAngle;                            // 0x0198(0x0004) (Config)
	float                                              MicrophonePerceivedFocusAngleZoomedIn;                    // 0x019C(0x0004) (Config)
	float                                              MicrophonePerceivedDeadZone;                              // 0x01A0(0x0004) (Config)
	float                                              MicrophonePerceivedDeadZoneZoomedIn;                      // 0x01A4(0x0004) (Config)
	float                                              MicrophonePerceivedMinPower;                              // 0x01A8(0x0004) (Config)
	float                                              MicrophonePerceivedMaxPower;                              // 0x01AC(0x0004) (Config)
	float                                              MicrophonePerceivedFocusPowerMult;                        // 0x01B0(0x0004) (Config)
	float                                              MicrophonePerceivedFocusMaxDist;                          // 0x01B4(0x0004) (Config)
	float                                              MicrophonePerceivedFocusMaxDistZoomedIn;                  // 0x01B8(0x0004) (Config)
	float                                              MicrophonePerceivedMinPowerRandomizeInterval;             // 0x01BC(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSoundEnvironmentManager");
		return ptr;
	}


	class UOLSoundEnvironmentManager* STATIC_GetSoundEnvManager();
	void Cleanup();
};


// Class OLGame.OLSoundEnvironmentVolume
// 0x006C (0x02F0 - 0x0284)
class AOLSoundEnvironmentVolume : public AVolume
{
public:
	class UOLSoundEnvironment*                         SoundEnvironment;                                         // 0x0284(0x0008) (Edit)
	TArray<class UAkEvent*>                            OnEnterEvents;                                            // 0x028C(0x0010) (Edit, NeedCtorLink)
	TArray<class UAkEvent*>                            OnExitEvents;                                             // 0x029C(0x0010) (Edit, NeedCtorLink)
	TArray<class UAkEvent*>                            AlwaysCallOnExitEvents;                                   // 0x02AC(0x0010) (Edit, NeedCtorLink)
	class UAkEvent*                                    AmbianceCrossFadeStartEvent;                              // 0x02BC(0x0008) (Edit)
	class UAkEvent*                                    AmbianceCrossFadeStopEvent;                               // 0x02C4(0x0008) (Edit)
	float                                              FadeDistance;                                             // 0x02CC(0x0004) (Edit)
	TEnumAsByte<EVolumePriority>                       Priority;                                                 // 0x02D0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02D1(0x0003) MISSED OFFSET
	unsigned long                                      bExteriorEnvironment : 1;                                 // 0x02D4(0x0004) (Edit)
	unsigned long                                      bInitialized : 1;                                         // 0x02D4(0x0004) (Transient)
	float                                              ObstructionRatioInSameVolume;                             // 0x02D8(0x0004) (Edit)
	float                                              MaxHighQualityObstructionFactor;                          // 0x02DC(0x0004) (Edit)
	TArray<class UOLSoundConnectorComponent*>          Connections;                                              // 0x02E0(0x0010) (ExportObject, Transient, Component, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSoundEnvironmentVolume");
		return ptr;
	}


	void PostBeginPlay();
};


// Class OLGame.OLThrowable
// 0x00BC (0x0428 - 0x036C)
class AOLThrowable : public AKActorSpawnable
{
public:
	TEnumAsByte<EThrowableState>                       ThrowableState;                                           // 0x036C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x036D(0x0003) MISSED OFFSET
	float                                              LaunchTime;                                               // 0x0370(0x0004)
	float                                              StoppedTime;                                              // 0x0374(0x0004)
	unsigned long                                      bHasHitHero : 1;                                          // 0x0378(0x0004)
	struct FRotator                                    RotationVel;                                              // 0x037C(0x000C)
	struct FThrowableSettings                          Settings;                                                 // 0x0388(0x004C)
	struct FThrowablePreciseTravelData                 PreciseTravel;                                            // 0x03D4(0x0034)
	struct FVector                                     LastWaterCheckPosition;                                   // 0x0408(0x000C) (Transient)
	class ALandscapeProxy*                             ActiveWaterLandscape;                                     // 0x0414(0x0008) (Transient)
	class ULandscapeHeightfieldCollisionComponent*     LastWaterLandscapeCollidingComponent;                     // 0x041C(0x0008) (ExportObject, Transient, Component, EditInline)
	float                                              SurfaceHeight;                                            // 0x0424(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLThrowable");
		return ptr;
	}

};


// Class OLGame.OLUberPostProcessEffect
// 0x0144 (0x0384 - 0x0240)
class UOLUberPostProcessEffect : public UUberPostProcessEffect
{
public:
	unsigned long                                      bInnerDemonEffectEnabled : 1;                             // 0x0240(0x0004) (Edit)
	unsigned long                                      bEnableWaveEffect : 1;                                    // 0x0240(0x0004) (Edit)
	unsigned long                                      bCameraGlassShattered : 1;                                // 0x0240(0x0004) (Edit)
	struct FVector                                     InnerDemonPosition;                                       // 0x0244(0x000C) (Edit)
	float                                              InnerDemonDeformationIntensity;                           // 0x0250(0x0004) (Edit)
	float                                              UnderwaterBlur;                                           // 0x0254(0x0004) (Edit)
	float                                              VignetteIntensity;                                        // 0x0258(0x0004) (Edit)
	float                                              GrainBrightness;                                          // 0x025C(0x0004) (Edit)
	float                                              GrainOpacity;                                             // 0x0260(0x0004) (Edit)
	float                                              GrainScale;                                               // 0x0264(0x0004) (Edit)
	class UTexture2D*                                  GrainTexture;                                             // 0x0268(0x0008)
	struct FLinearColor                                HurtColor;                                                // 0x0270(0x0010) (Edit)
	float                                              HurtRadius;                                               // 0x0280(0x0004) (Edit)
	float                                              HurtAmount;                                               // 0x0284(0x0004) (Edit)
	float                                              HurtExp;                                                  // 0x0288(0x0004) (Edit)
	float                                              HurtTimeScale;                                            // 0x028C(0x0004) (Edit)
	float                                              HurtScale;                                                // 0x0290(0x0004) (Edit)
	struct FVector                                     ChromaScale;                                              // 0x0294(0x000C) (Edit)
	float                                              OutOfBreathIntensity;                                     // 0x02A0(0x0004) (Edit)
	class UTexture2D*                                  HearthBeatTexture;                                        // 0x02A4(0x0008)
	float                                              BloodHit1Amount;                                          // 0x02AC(0x0004) (Edit)
	float                                              BloodHit2Amount;                                          // 0x02B0(0x0004) (Edit)
	float                                              BloodHit3Amount;                                          // 0x02B4(0x0004) (Edit)
	float                                              BloodHit1Angle;                                           // 0x02B8(0x0004) (Edit)
	float                                              BloodHit2Angle;                                           // 0x02BC(0x0004) (Edit)
	float                                              BloodHit3Angle;                                           // 0x02C0(0x0004) (Edit)
	float                                              BloodAmount;                                              // 0x02C4(0x0004) (Edit)
	struct FLinearColor                                BloodColor;                                               // 0x02C8(0x0010) (Edit)
	class UTexture2D*                                  BloodHit1Texture;                                         // 0x02D8(0x0008)
	class UTexture2D*                                  BloodHit2Texture;                                         // 0x02E0(0x0008)
	float                                              WaveIntensity;                                            // 0x02E8(0x0004) (Edit)
	class UTexture2D*                                  WaveFrequencyTexture;                                     // 0x02EC(0x0008)
	class UTexture2D*                                  CoordWaveTexture;                                         // 0x02F4(0x0008)
	float                                              DoubleVisionIntensity;                                    // 0x02FC(0x0004) (Edit)
	TEnumAsByte<ECameraMode>                           CameraMode;                                               // 0x0300(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0301(0x0003) MISSED OFFSET
	float                                              CameraColorEffect;                                        // 0x0304(0x0004) (Edit)
	float                                              CameraScale;                                              // 0x0308(0x0004) (Edit)
	struct FLinearColor                                CameraColor;                                              // 0x030C(0x0010) (Edit)
	float                                              CameraGlassLightIntensity;                                // 0x031C(0x0004) (Edit)
	struct FLinearColor                                CameraGlassLightColor;                                    // 0x0320(0x0010) (Edit)
	class UTexture2D*                                  CameraGlassDiffuse;                                       // 0x0330(0x0008)
	class UTexture2D*                                  CameraGlassNormal;                                        // 0x0338(0x0008)
	class UTextureCube*                                CameraGlassCubeMap;                                       // 0x0340(0x0008)
	struct FEyeAdaptationSettings                      EyeSettings;                                              // 0x0348(0x0014)
	struct FEyeAdaptationSettings                      CameraSettings;                                           // 0x035C(0x0014)
	struct FEyeAdaptationSettings                      NightVisionSettings;                                      // 0x0370(0x0014)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUberPostProcessEffect");
		return ptr;
	}

};


// Class OLGame.OLUtils
// 0x0000 (0x0068 - 0x0068)
class UOLUtils : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUtils");
		return ptr;
	}


	void STATIC_TriggerSoundEvent(class UAkEvent* SoundEvent);
	bool STATIC_ShouldSubtitlesBeHigh();
	bool STATIC_IsKeyBoundToCommand(const struct FName& Key, const struct FString& Command);
	bool STATIC_HasValidMovie(class UGFxObject* GFxObject);
	float STATIC_ElapsedRealTime(float Time);
	float STATIC_ElapsedTime(float Time);
	float STATIC_GetRealTimeSeconds();
	float STATIC_GetWorldTimeSeconds();
	class UTexture2D* STATIC_LoadTexture(const struct FString& Path, class UObject* Owner);
	int STATIC_GetChapterIndex(const struct FName& CheckpointName);
	struct FString STATIC_GetChapterName(const struct FName& CheckpointName);
	struct FString STATIC_GetCheckpointName(int Index);
	int STATIC_GetCheckpointIndexFromString(const struct FString& CheckpointName);
	int STATIC_GetCheckpointIndex(const struct FName& CheckpointName);
	class UOLOrbisEngine* STATIC_GetOrbisEngine();
	class UOLDingoEngine* STATIC_GetDingoEngine();
	class UOLWinEngine* STATIC_GetWinEngine();
	class UOLEngine* STATIC_GetOLEngine();
	class AOLGame* STATIC_GetOLGame();
	class UOLWorld* STATIC_GetOLWorld();
	class UOLDifficultyConfig* STATIC_GetDifficultyConfig();
	class UOLAICoordinator* STATIC_GetAICoordinator();
	class AOLHero* STATIC_GetHero();
	class AOLPlayerController* STATIC_GetOLPC();
	bool STATIC_IsBindableKey(const struct FName& ButtonName);
	bool STATIC_IsInMainMenu();
	bool STATIC_IsPlayingDLC();
	bool STATIC_IsDLCInstalled();
	bool STATIC_IsDingoController();
	bool STATIC_IsPS4Controller();
	bool STATIC_IsUsingGamepad();
	bool STATIC_IsConsole();
	bool STATIC_IsDingo();
	bool STATIC_IsPS4();
};


// Class OLGame.OLVoiceManager
// 0x0148 (0x01B0 - 0x0068)
class UOLVoiceManager : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x0068(0x0008) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IInterface_AkEventHandler;                        // 0x0070(0x0008) (Const, Native, NoExport)
	TArray<struct FString>                             VOPackagePathFilters;                                     // 0x0078(0x0010) (Config, NeedCtorLink)
	TArray<struct FLineQueue>                          LineQueues;                                               // 0x0088(0x0010) (NeedCtorLink)
	TArray<struct FQueueTimer>                         Timers;                                                   // 0x0098(0x0010) (NeedCtorLink)
	TArray<struct FEndOfEventInfo>                     EndOfEventCallbacksToProcess;                             // 0x00A8(0x0010) (NeedCtorLink)
	TArray<struct FMarkerInfo>                         MarkerCallbacksToProcess;                                 // 0x00B8(0x0010) (NeedCtorLink)
	TArray<struct FPlayedVOInfo>                       PlayedVOs;                                                // 0x00C8(0x0010) (NeedCtorLink)
	float                                              LastVOContextTriggeredTime[0x21];                         // 0x00D8(0x0004)
	float                                              LastVOTriggeredTime;                                      // 0x015C(0x0004)
	struct FPointer                                    CriticalSection;                                          // 0x0160(0x0008) (Native)
	TArray<struct FVOEventData>                        VOEventLog;                                               // 0x0168(0x0010) (NeedCtorLink)
	TArray<struct FDialogueData>                       Dialogues;                                                // 0x0178(0x0010) (NeedCtorLink)
	struct FPointer                                    EndOfDialogEventQueueSection;                             // 0x0188(0x0008) (Native)
	TArray<int>                                        EndOfDialogPlayingID;                                     // 0x0190(0x0010) (NeedCtorLink)
	struct FString                                     TransientVOPrefix;                                        // 0x01A0(0x0010) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLVoiceManager");
		return ptr;
	}

};


// Class OLGame.OLVolumetricFog
// 0x0000 (0x0250 - 0x0250)
class AOLVolumetricFog : public AVolumetricFog
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLVolumetricFog");
		return ptr;
	}

};


// Class OLGame.OLVolumetricFogComponent
// 0x0014 (0x01AC - 0x0198)
class UOLVolumetricFogComponent : public UVolumetricFogComponent
{
public:
	float                                              FlashLightsVolumetricsIntensity;                          // 0x0198(0x0004) (Edit)
	float                                              LanternVolumetricsIntensity;                              // 0x019C(0x0004) (Edit)
	float                                              TorchVolumetricsIntensity;                                // 0x01A0(0x0004) (Edit)
	float                                              ArrowVolumetricsIntensity;                                // 0x01A4(0x0004) (Edit)
	float                                              HeroLightVolumetricsIntensity;                            // 0x01A8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLVolumetricFogComponent");
		return ptr;
	}

};


// Class OLGame.OLWardrobe
// 0x00D0 (0x0318 - 0x0248)
class AOLWardrobe : public AActor
{
public:
	TArray<class UMaterialInstance*>                   MaterialOverrides;                                        // 0x0248(0x0010) (Edit, NeedCtorLink)
	float                                              DoorHeight;                                               // 0x0258(0x0004) (Edit, EditConst)
	float                                              DoorWidth;                                                // 0x025C(0x0004) (Edit, EditConst)
	float                                              HeightOffset;                                             // 0x0260(0x0004) (EditConst)
	float                                              DoorClosededAngle;                                        // 0x0264(0x0004) (EditConst)
	float                                              DoorOpenedAngle;                                          // 0x0268(0x0004) (EditConst)
	float                                              InsideLeftDoorDesiredAngle;                               // 0x026C(0x0004) (Edit)
	float                                              InsideRightDoorDesiredAngle;                              // 0x0270(0x0004) (Edit)
	float                                              DoorRotationSpeed;                                        // 0x0274(0x0004) (Edit)
	float                                              LockedAnimAmplitude;                                      // 0x0278(0x0004) (Edit, EditConst)
	float                                              LockedAnimTotalTime;                                      // 0x027C(0x0004) (Edit, EditConst)
	unsigned long                                      bInsideLeftDoorEnabled : 1;                               // 0x0280(0x0004) (Edit)
	unsigned long                                      bInsideRightDoorEnabled : 1;                              // 0x0280(0x0004) (Edit)
	unsigned long                                      bBotsCanInvestigate : 1;                                  // 0x0280(0x0004) (Edit)
	unsigned long                                      bWasInitiallyInsideLeftDoorEnabled : 1;                   // 0x0280(0x0004)
	unsigned long                                      bWasInitiallyInsideRightDoorEnabled : 1;                  // 0x0280(0x0004)
	unsigned long                                      bPlayingLockedAnim : 1;                                   // 0x0280(0x0004) (Transient)
	TArray<struct FCornerData>                         Corners;                                                  // 0x0284(0x0010) (Edit, NeedCtorLink)
	float                                              InitialInsideLeftDoorDesiredAngle;                        // 0x0294(0x0004)
	float                                              InitialInsideRightDoorDesiredAngle;                       // 0x0298(0x0004)
	float                                              OpeningIntensity;                                         // 0x029C(0x0004) (Transient)
	float                                              LastYaw;                                                  // 0x02A0(0x0004) (Transient)
	class UAkEvent*                                    SndOpening;                                               // 0x02A4(0x0008) (Edit)
	class UAkEvent*                                    SndClosing;                                               // 0x02AC(0x0008) (Edit)
	class UAkEvent*                                    SndLocked;                                                // 0x02B4(0x0008) (Edit)
	class UAkEvent*                                    SndStartOpening;                                          // 0x02BC(0x0008) (Edit)
	class UAkEvent*                                    SndStopOpening;                                           // 0x02C4(0x0008) (Edit)
	struct FString                                     RTPCNameOpeningDoorIntensity;                             // 0x02CC(0x0010) (Const, NeedCtorLink)
	class UStaticMeshComponent*                        FrameMesh;                                                // 0x02DC(0x0008) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        InsideLeftDoorMesh;                                       // 0x02E4(0x0008) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        InsideRightDoorMesh;                                      // 0x02EC(0x0008) (Edit, ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           WardrobeLightEnvironment;                                 // 0x02F4(0x0008) (Edit, ExportObject, Component, EditInline)
	class UOLInvestigationComponent*                   InvestigationComponent;                                   // 0x02FC(0x0008) (Edit, ExportObject, Component, EditInline)
	float                                              FindHiddenPlayerProbability;                              // 0x0304(0x0004) (Edit)
	class AOLPawn*                                     DoorUser;                                                 // 0x0308(0x0008) (Transient)
	int                                                InteractingDoorIndex;                                     // 0x0310(0x0004) (Transient)
	float                                              ProceduralAnimElapsedTime;                                // 0x0314(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLWardrobe");
		return ptr;
	}


	void TriggerEvent(TEnumAsByte<EWardrobeDoorEventType> EventType, class AOLPawn* Triggerer);
};


// Class OLGame.OLWindow
// 0x01B8 (0x0400 - 0x0248)
class AOLWindow : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;                     // 0x0248(0x0008) (Const, Native, NoExport)
	unsigned long                                      bDisabled : 1;                                            // 0x0250(0x0004) (Edit)
	unsigned long                                      bNoInteraction : 1;                                       // 0x0250(0x0004) (Edit)
	unsigned long                                      bBotsCanInvestigate : 1;                                  // 0x0250(0x0004) (Edit)
	unsigned long                                      bApplyRulesLive : 1;                                      // 0x0250(0x0004) (Edit, DuplicateTransient)
	unsigned long                                      bNoSavedState : 1;                                        // 0x0250(0x0004) (Edit, DuplicateTransient)
	unsigned long                                      bAICanUseWindow : 1;                                      // 0x0250(0x0004) (Edit)
	unsigned long                                      bAITraversing : 1;                                        // 0x0250(0x0004) (Transient)
	unsigned long                                      bWasOpenedByPlayer : 1;                                   // 0x0250(0x0004) (Transient)
	unsigned long                                      bWasOpenedByPlayerFromInside : 1;                         // 0x0250(0x0004) (Transient)
	unsigned long                                      bInteractiveControl : 1;                                  // 0x0250(0x0004) (Transient)
	unsigned long                                      bPlayingACS : 1;                                          // 0x0250(0x0004) (Transient)
	TEnumAsByte<EWindowInitialState>                   InitialWindowState;                                       // 0x0254(0x0001) (Edit)
	TEnumAsByte<EOLWindowType>                         WindowType;                                               // 0x0255(0x0001) (Edit)
	TEnumAsByte<EWindowState>                          WindowState;                                              // 0x0256(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0257(0x0001) MISSED OFFSET
	float                                              ExplicitOcclusionFactor;                                  // 0x0258(0x0004) (Edit)
	float                                              DefaultOcclusionFactor;                                   // 0x025C(0x0004) (Edit, EditConst)
	float                                              ProceduralMoveSpeed;                                      // 0x0260(0x0004) (Edit)
	float                                              MaxOpenClearance;                                         // 0x0264(0x0004) (Edit)
	float                                              HeightFromFloor;                                          // 0x0268(0x0004) (Edit)
	float                                              HeightToHandle;                                           // 0x026C(0x0004) (Edit)
	float                                              LedgeWidth;                                               // 0x0270(0x0004) (Edit)
	float                                              TotalGlassHeight;                                         // 0x0274(0x0004) (Edit)
	TArray<class UMaterialInstance*>                   MaterialOverrides;                                        // 0x0278(0x0010) (Edit, NeedCtorLink)
	class UAkEvent*                                    SndOpening;                                               // 0x0288(0x0008) (Edit)
	class UAkEvent*                                    SndPartialOpening;                                        // 0x0290(0x0008) (Edit)
	class UAkEvent*                                    SndClosing;                                               // 0x0298(0x0008) (Edit)
	class UAkEvent*                                    SndBreaking;                                              // 0x02A0(0x0008) (Edit)
	TArray<struct FGameFlowWindowRule>                 GameFlowRules;                                            // 0x02A8(0x0010) (Edit, DuplicateTransient, NeedCtorLink)
	class AOLLedgeMarker*                              Ledge1;                                                   // 0x02B8(0x0008) (Edit)
	class AOLLedgeMarker*                              Ledge2;                                                   // 0x02C0(0x0008) (Edit)
	class UStaticMeshComponent*                        MovingWindowMesh;                                         // 0x02C8(0x0008) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    BreakingTileParticles;                                    // 0x02D0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    BreakingWindowParticles;                                  // 0x02D8(0x0008) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        ArrowBrkFrame;                                            // 0x02E0(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        DynTileTL;                                                // 0x02E8(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        DynTileTR;                                                // 0x02F0(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        DynTileBL;                                                // 0x02F8(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        DynTileBR;                                                // 0x0300(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        StatTileTL;                                               // 0x0308(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        StatTileTR;                                               // 0x0310(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        StatTileBL;                                               // 0x0318(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        StatTileBR;                                               // 0x0320(0x0008) (ExportObject, Component, EditInline)
	class UStaticMesh*                                 MovingBreakableMesh;                                      // 0x0328(0x0008) (Const)
	class UStaticMesh*                                 StaticBrokenTileTL;                                       // 0x0330(0x0008) (Const)
	class UStaticMesh*                                 StaticBrokenTileTR;                                       // 0x0338(0x0008) (Const)
	class UStaticMesh*                                 StaticBrokenTileBL;                                       // 0x0340(0x0008) (Const)
	class UStaticMesh*                                 StaticBrokenTileBR;                                       // 0x0348(0x0008) (Const)
	class UStaticMesh*                                 MovingBrokenTileTL;                                       // 0x0350(0x0008) (Const)
	class UStaticMesh*                                 MovingBrokenTileTR;                                       // 0x0358(0x0008) (Const)
	class UStaticMesh*                                 MovingBrokenTileBL;                                       // 0x0360(0x0008) (Const)
	class UStaticMesh*                                 MovingBrokenTileBR;                                       // 0x0368(0x0008) (Const)
	class UStaticMesh*                                 BrokenMesh;                                               // 0x0370(0x0008) (Edit)
	class UStaticMesh*                                 OriginalMesh;                                             // 0x0378(0x0008) (Transient)
	class UDynamicLightEnvironmentComponent*           WindowLightEnvironment;                                   // 0x0380(0x0008) (Edit, ExportObject, Component, EditInline)
	class UOLSoundConnectorComponent*                  SoundConnectorComp;                                       // 0x0388(0x0008) (Edit, ExportObject, Component, EditInline)
	float                                              PathPointOffset;                                          // 0x0390(0x0004) (Edit)
	float                                              AIBashThroughKnockbackForce;                              // 0x0394(0x0004) (Edit)
	float                                              PathfindingCostOpen;                                      // 0x0398(0x0004) (Edit)
	float                                              PathfindingCostClosedOpenable;                            // 0x039C(0x0004) (Edit)
	float                                              PathfindingCostClosedMustBreak;                           // 0x03A0(0x0004) (Edit)
	float                                              PathfindingCostExtraBots;                                 // 0x03A4(0x0004) (Edit)
	class UOLInvestigationComponent*                   InvestigationComponent;                                   // 0x03A8(0x0008) (Edit, ExportObject, Component, EditInline)
	float                                              OpenRatio;                                                // 0x03B0(0x0004) (Transient)
	float                                              TargetOpenRatio;                                          // 0x03B4(0x0004) (Transient)
	float                                              LastFinishedClosingTime;                                  // 0x03B8(0x0004) (Transient)
	float                                              SingleUseProceduralMoveSpeed;                             // 0x03BC(0x0004) (Transient)
	float                                              InteractionInitialRatio;                                  // 0x03C0(0x0004) (Transient)
	float                                              InteractiveLastDeltaZ;                                    // 0x03C4(0x0004) (Transient)
	float                                              LastBrokenTileParticlesTime;                              // 0x03C8(0x0004) (Transient)
	class AOLPawn*                                     WindowUser;                                               // 0x03CC(0x0008) (Transient)
	float                                              PartiallyOpenRatio;                                       // 0x03D4(0x0004) (Const)
	struct FVector                                     EdgeDestInside;                                           // 0x03D8(0x000C)
	struct FVector                                     EdgeDestOutside;                                          // 0x03E4(0x000C)
	struct FGuid                                       WindowGuid;                                               // 0x03F0(0x0010) (Const, EditConst, DuplicateTransient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLWindow");
		return ptr;
	}


	void OnDestroy(class USeqAct_Destroy* Action);
	void SoftDestroy();
	void ScriptOpenWindow(class AOLPawn* Triggerer);
	void ScriptBreakWindow(class AOLPawn* Triggerer);
};


// Class OLGame.OLAIAnimMapping
// 0x0040 (0x00A8 - 0x0068)
class UOLAIAnimMapping : public UObject
{
public:
	struct FAIAnimMapping                              Mappings;                                                 // 0x0068(0x0040) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAIAnimMapping");
		return ptr;
	}

};


// Class OLGame.OLAIConfig
// 0x12BC (0x1324 - 0x0068)
class UOLAIConfig : public UObject
{
public:
	struct FString                                     Description;                                              // 0x0068(0x0010) (Edit, NeedCtorLink)
	class UOLAIConfig*                                 Parent;                                                   // 0x0078(0x0008) (Edit)
	struct FAIConfigData                               Config;                                                   // 0x0080(0x12A4) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAIConfig");
		return ptr;
	}

};


// Class OLGame.OLEnemyPawn
// 0x4F30 (0xB5B0 - 0x6680)
class AOLEnemyPawn : public AOLPawn
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;                   // 0x6680(0x0008) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;                     // 0x6688(0x0008) (Const, Native, NoExport)
	class UClass*                                      NPCController;                                            // 0x6690(0x0008) (Edit)
	class AOLBot*                                      Bot;                                                      // 0x6698(0x0008)
	class USkeletalMeshComponent*                      HeadMesh;                                                 // 0x66A0(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        WeaponMesh;                                               // 0x66A8(0x0008) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      AnimatedWeaponMesh;                                       // 0x66B0(0x0008) (ExportObject, Component, EditInline)
	struct FWeaponData                                 Weapon;                                                   // 0x66B8(0x0018)
	struct FWeaponTypeData                             Weapons[0x7];                                             // 0x66D0(0x0014)
	class AOLFlashLight*                               FlashlightActor;                                          // 0x675C(0x0008)
	struct FFlashlightData                             Flashlight;                                               // 0x6764(0x005C)
	class UClass*                                      FlashlightClass;                                          // 0x67C0(0x0008) (Const)
	unsigned long                                      bNavMeshRegistered : 1;                                   // 0x67C8(0x0004) (Transient)
	unsigned long                                      bMovingToIntermediateLocation : 1;                        // 0x67C8(0x0004)
	unsigned long                                      bHasPreferredPath : 1;                                    // 0x67C8(0x0004)
	unsigned long                                      bCastShadowInNV : 1;                                      // 0x67C8(0x0004)
	unsigned long                                      bEnableZAnchor : 1;                                       // 0x67C8(0x0004)
	unsigned long                                      bLeftAnim : 1;                                            // 0x67C8(0x0004)
	unsigned long                                      bBackAnim : 1;                                            // 0x67C8(0x0004)
	unsigned long                                      bInPlaceAnim : 1;                                         // 0x67C8(0x0004)
	unsigned long                                      bFreezePoseActive : 1;                                    // 0x67C8(0x0004)
	unsigned long                                      bAnticipatingAttack : 1;                                  // 0x67C8(0x0004)
	unsigned long                                      bContinuousSoundPlaying : 1;                              // 0x67C8(0x0004)
	unsigned long                                      bContinuousSoundPlayingChase : 1;                         // 0x67C8(0x0004)
	unsigned long                                      bDrawSteeringDebug : 1;                                   // 0x67C8(0x0004) (Config)
	unsigned long                                      bUseAvoidSystem : 1;                                      // 0x67C8(0x0004) (Const)
	unsigned long                                      bAttachWeaponToBone : 1;                                  // 0x67C8(0x0004) (Const)
	unsigned long                                      bAutomaticDoorBash : 1;                                   // 0x67C8(0x0004) (Const)
	unsigned long                                      bInvertVisionBone : 1;                                    // 0x67C8(0x0004) (Const)
	struct FVector                                     LastNavMeshCheckLocation;                                 // 0x67CC(0x000C) (Transient)
	float                                              LastNavMeshObstacleRegisterTime;                          // 0x67D8(0x0004) (Transient)
	float                                              NavMeshObstacleRegistrationTime;                          // 0x67DC(0x0004) (Edit)
	struct FVector                                     CurrentMovePathStart;                                     // 0x67E0(0x000C)
	TArray<struct FVector>                             CurrentMovePath;                                          // 0x67EC(0x0010) (NeedCtorLink)
	int                                                CurrentMovePathIdx;                                       // 0x67FC(0x0004)
	struct FVector                                     LastMovePathPoint;                                        // 0x6800(0x000C)
	TArray<class AOLStairsMarker*>                     StairsOnPath;                                             // 0x680C(0x0010) (NeedCtorLink)
	class AActor*                                      FocusTarget;                                              // 0x681C(0x0008)
	struct FCatmullRomPathData                         CRPath;                                                   // 0x6824(0x002C) (NeedCtorLink)
	TArray<struct FVector>                             MovingTestPoints;                                         // 0x6850(0x0010) (NeedCtorLink)
	float                                              MovingTestTimer;                                          // 0x6860(0x0004)
	int                                                NumMovingTestPoints;                                      // 0x6864(0x0004) (Const)
	float                                              MovingTestLength;                                         // 0x6868(0x0004) (Const)
	struct FLocoModeParameters                         LocoModeParams[0xF];                                      // 0x686C(0x0040)
	TEnumAsByte<EAILocoMode>                           LocoMode;                                                 // 0x6C2C(0x0001)
	TEnumAsByte<ERotationMode>                         RotationMode;                                             // 0x6C2D(0x0001)
	TEnumAsByte<EEnemyAnimStyle>                       AnimStyle;                                                // 0x6C2E(0x0001)
	TEnumAsByte<EAttackSide>                           AttackSide;                                               // 0x6C2F(0x0001)
	TEnumAsByte<EFacialAnimSource>                     FacialAnimSource;                                         // 0x6C30(0x0001)
	TEnumAsByte<EFacialSystemState>                    FacialSystemState;                                        // 0x6C31(0x0001)
	TEnumAsByte<EMultiplicityConfig>                   DefaultMultiplicity;                                      // 0x6C32(0x0001) (Const)
	unsigned char                                      UnknownData00[0x1];                                       // 0x6C33(0x0001) MISSED OFFSET
	struct FVector                                     TargetVelocity;                                           // 0x6C34(0x000C)
	float                                              TargetYaw;                                                // 0x6C40(0x0004)
	float                                              ForcedTransitionVelocity;                                 // 0x6C44(0x0004)
	struct FVector                                     CurrentRepulsion;                                         // 0x6C48(0x000C) (Transient)
	struct FVector                                     BaseVelocity;                                             // 0x6C54(0x000C)
	struct FVector                                     BaseTargetVelocity;                                       // 0x6C60(0x000C)
	float                                              InstantTargetSpeed;                                       // 0x6C6C(0x0004)
	struct FVector                                     PreferredPathAnchor;                                      // 0x6C70(0x000C)
	struct FVector                                     PreferredPathDirection;                                   // 0x6C7C(0x000C)
	class AOLPreferredPathMarker*                      PreferredPath;                                            // 0x6C88(0x0008)
	float                                              GroundSpeedTarget;                                        // 0x6C90(0x0004)
	float                                              LastAnticipatedTurnTime;                                  // 0x6C94(0x0004)
	struct FTurningMoveData                            TurningMove;                                              // 0x6C98(0x002C)
	struct FStartTransitionData                        AnimatedStart;                                            // 0x6CC4(0x0010)
	struct FStopTransitionData                         AnimatedStop;                                             // 0x6CD4(0x0018)
	struct FStairsData                                 Stairs;                                                   // 0x6CEC(0x0024)
	struct FEnemySplineData                            Spline;                                                   // 0x6D10(0x0010)
	struct FEnemyCrawlData                             Crawl;                                                    // 0x6D20(0x008C)
	struct FEnemyBeamData                              Beam;                                                     // 0x6DAC(0x0008)
	struct FEnemyJumpData                              Jump;                                                     // 0x6DB4(0x0028)
	struct FEnemyPairedWalkData                        PairedWalk;                                               // 0x6DDC(0x006C)
	struct FEnemyRandomSpeedData                       RandomSpeed;                                              // 0x6E48(0x000C)
	TArray<class UAnimSet*>                            AnimSetsArmed;                                            // 0x6E54(0x0010) (NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSetsFlashlight;                                       // 0x6E64(0x0010) (NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSetsArmedFlashlight;                                  // 0x6E74(0x0010) (NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSetsAlert;                                            // 0x6E84(0x0010) (NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSetsAlertArmed;                                       // 0x6E94(0x0010) (NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSetsAlertFlashlight;                                  // 0x6EA4(0x0010) (NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSetsAlertArmedFlashlight;                             // 0x6EB4(0x0010) (NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSetsArmedPartial;                                     // 0x6EC4(0x0010) (NeedCtorLink)
	TArray<class UAnimSet*>                            ClassSpecificAnimSets;                                    // 0x6ED4(0x0010) (NeedCtorLink)
	TArray<class UAnimSet*>                            SpawnerAnimSets;                                          // 0x6EE4(0x0010) (NeedCtorLink)
	struct FEnemyAnimNodes                             AnimNodes;                                                // 0x6EF4(0x0130)
	int                                                AnimLODLevel;                                             // 0x7024(0x0004)
	float                                              FallingDeathZ;                                            // 0x7028(0x0004) (Const)
	float                                              MeshZAnchor;                                              // 0x702C(0x0004)
	struct FVector                                     MeshOffset2D;                                             // 0x7030(0x000C)
	float                                              MeshPitchOffset;                                          // 0x703C(0x0004)
	float                                              MeshYawOffset;                                            // 0x7040(0x0004)
	float                                              MeshRollOffset;                                           // 0x7044(0x0004)
	float                                              LastTryAdjustSizeTime;                                    // 0x7048(0x0004)
	float                                              LastTryAdjustSizeHeight;                                  // 0x704C(0x0004)
	float                                              LastTryAdjustSizeRadius;                                  // 0x7050(0x0004)
	struct FVector                                     LastTryAdjustSizeLocation;                                // 0x7054(0x000C)
	struct FFollowGroundData                           FollowGround;                                             // 0x7060(0x001C)
	struct FTurnOnSpotData                             TurnOnSpot;                                               // 0x707C(0x0010)
	float                                              SpecialMoveBlendAlpha;                                    // 0x708C(0x0004)
	float                                              SpecialMoveRate;                                          // 0x7090(0x0004)
	float                                              SpecialMoveStalledTimestamp;                              // 0x7094(0x0004)
	float                                              DoorAnimPlayRate;                                         // 0x7098(0x0004)
	float                                              SmoothedDemonicYaw;                                       // 0x709C(0x0004)
	int                                                NbFreezePoseGlitches;                                     // 0x70A0(0x0004)
	float                                              FreezePoseGlitchNextStartTime;                            // 0x70A4(0x0004)
	float                                              FreezePoseGlitchDurationMin;                              // 0x70A8(0x0004)
	float                                              FreezePoseGlitchDurationMax;                              // 0x70AC(0x0004)
	float                                              FreezePoseGlitchIntervalMin;                              // 0x70B0(0x0004)
	float                                              FreezePoseGlitchIntervalMax;                              // 0x70B4(0x0004)
	float                                              BreathingIntensity;                                       // 0x70B8(0x0004)
	class UStaticMeshComponent*                        NVEyes;                                                   // 0x70BC(0x0008) (ExportObject, Component, EditInline)
	TArray<struct FVOMapping>                          VOMappings;                                               // 0x70C4(0x0010) (Edit, NeedCtorLink)
	TArray<struct FDelayedVO>                          DelayedVOContexts;                                        // 0x70D4(0x0010) (Transient, NeedCtorLink)
	struct FConversationData                           CurrentConversation;                                      // 0x70E4(0x0024)
	class UAkEvent*                                    DeathGripStartSound;                                      // 0x7108(0x0008) (Const)
	struct FLookAtData                                 LookAt;                                                   // 0x7110(0x00B0)
	struct FLookAtNoiseConfig                          LookAtNoisePresets[0x8];                                  // 0x71C0(0x0014)
	struct FIKParamsData                               IKParamsUnawareIdle;                                      // 0x7260(0x0054)
	struct FIKParamsData                               IKParamsAlertIdle;                                        // 0x72B4(0x0054)
	struct FIKParamsData                               IKParamsUnawareMoving;                                    // 0x7308(0x0054)
	struct FIKParamsData                               IKParamsAlertMoving;                                      // 0x735C(0x0054)
	struct FEnemyHandIKData                            LeftHandIKData;                                           // 0x73B0(0x0008)
	struct FEnemyHandIKData                            RightHandIKData;                                          // 0x73B8(0x0008)
	struct FShoulderIKData                             ShoulderIK;                                               // 0x73C0(0x0018)
	float                                              AttackNormalDamage;                                       // 0x73D8(0x0004)
	float                                              AttackCrawlDamage;                                        // 0x73DC(0x0004)
	float                                              AttackSpecialDamage;                                      // 0x73E0(0x0004)
	float                                              UnstuckCheckTime;                                         // 0x73E4(0x0004) (Config)
	struct FAIConfigData                               Config;                                                   // 0x73E8(0x12A4)
	struct FAIConfigData                               DefaultConfig;                                            // 0x868C(0x12A4)
	class UOLAIAnimConfig*                             AnimConfig;                                               // 0x9930(0x0008)
	class UOLAIConfig*                                 DebugConfigAsset;                                         // 0x9938(0x0008)
	class UOLAIConfig*                                 DebugDefaultConfigAsset;                                  // 0x9940(0x0008)
	struct FAIConfigData                               DebugBaseConfig;                                          // 0x9948(0x12A4)
	class UOLAIConfig*                                 ExpectedBaseConfigAsset;                                  // 0xABEC(0x0008) (Const)
	struct FAIAnimMapping                              AnimMapping;                                              // 0xABF4(0x0040)
	struct FEnemyCapabilities                          Capabilities;                                             // 0xAC34(0x0008) (Const)
	TArray<struct FInvestigationAnimData>              InvestigationAnimParams;                                  // 0xAC3C(0x0010) (NeedCtorLink)
	struct FDeathGripAnimSet                           DeathGripAnims[0x3];                                      // 0xAC4C(0x0030)
	struct FMiscTuningData                             MiscTuning;                                               // 0xACDC(0x0020) (Const)
	struct FString                                     SoundSwitchDoorMaterial;                                  // 0xACFC(0x0010) (Const, NeedCtorLink)
	struct FString                                     SoundSwitchParamDMWood;                                   // 0xAD0C(0x0010) (Const, NeedCtorLink)
	struct FString                                     SoundSwitchParamDMMetal;                                  // 0xAD1C(0x0010) (Const, NeedCtorLink)
	struct FName                                       SoundSwitchWeaponType;                                    // 0xAD2C(0x0008) (Const)
	struct FName                                       SoundSwitchWeaponTypeParams[0x7];                         // 0xAD34(0x0008) (Const)
	TArray<class UAkEvent*>                            SoundEventsContinuousStart;                               // 0xAD6C(0x0010) (NeedCtorLink)
	TArray<class UAkEvent*>                            SoundEventsContinuousStop;                                // 0xAD7C(0x0010) (NeedCtorLink)
	TArray<class UAkEvent*>                            SoundEventsContinuousChaseStart;                          // 0xAD8C(0x0010) (NeedCtorLink)
	TArray<class UAkEvent*>                            SoundEventsContinuousChaseStop;                           // 0xAD9C(0x0010) (NeedCtorLink)
	TArray<class UAkEvent*>                            SoundEventsDGStruggleStart;                               // 0xADAC(0x0010) (NeedCtorLink)
	TArray<class UAkEvent*>                            SoundEventsDGStruggleStop;                                // 0xADBC(0x0010) (NeedCtorLink)
	int                                                ContinuousSoundIndex;                                     // 0xADCC(0x0004)
	int                                                DeathGripSoundIndex;                                      // 0xADD0(0x0004)
	struct FName                                       VisionBone;                                               // 0xADD4(0x0008) (Const)
	struct FName                                       WeaponAttachBone;                                         // 0xADDC(0x0008) (Const)
	struct FName                                       WeaponAttachSocket;                                       // 0xADE4(0x0008) (Const)
	struct FName                                       FlashlightAttachSocket;                                   // 0xADEC(0x0008) (Const)
	struct FName                                       LeftHandBone;                                             // 0xADF4(0x0008) (Const)
	struct FName                                       LeftHandAuxBone;                                          // 0xADFC(0x0008) (Const)
	struct FName                                       HipBone;                                                  // 0xAE04(0x0008) (Const)
	struct FName                                       PairedWalkHandAttackSocket;                               // 0xAE0C(0x0008) (Const)
	struct FName                                       AnimNameClimbUp50;                                        // 0xAE14(0x0008) (Const)
	struct FName                                       AnimNameClimbUp100;                                       // 0xAE1C(0x0008) (Const)
	struct FName                                       AnimNameClimbDown50;                                      // 0xAE24(0x0008) (Const)
	struct FName                                       AnimNameClimbDown100;                                     // 0xAE2C(0x0008) (Const)
	struct FName                                       AnimNameClimbUp50Chase;                                   // 0xAE34(0x0008) (Const)
	struct FName                                       AnimNameClimbUp100Chase;                                  // 0xAE3C(0x0008) (Const)
	struct FName                                       AnimNameClimbDown50Chase;                                 // 0xAE44(0x0008) (Const)
	struct FName                                       AnimNameClimbDown100Chase;                                // 0xAE4C(0x0008) (Const)
	struct FName                                       AnimNameClimbDown200;                                     // 0xAE54(0x0008) (Const)
	struct FName                                       AnimNameClimbDown450;                                     // 0xAE5C(0x0008) (Const)
	struct FName                                       AnimNameVault;                                            // 0xAE64(0x0008) (Const)
	struct FName                                       AnimNameOpenDoorLeftPull;                                 // 0xAE6C(0x0008) (Const)
	struct FName                                       AnimNameOpenDoorLeftPush;                                 // 0xAE74(0x0008) (Const)
	struct FName                                       AnimNameOpenDoorRightPull;                                // 0xAE7C(0x0008) (Const)
	struct FName                                       AnimNameOpenDoorRightPush;                                // 0xAE84(0x0008) (Const)
	struct FName                                       AnimNameOpenDoorLeftPullWithClose;                        // 0xAE8C(0x0008) (Const)
	struct FName                                       AnimNameOpenDoorLeftPushWithClose;                        // 0xAE94(0x0008) (Const)
	struct FName                                       AnimNameOpenDoorRightPullWithClose;                       // 0xAE9C(0x0008) (Const)
	struct FName                                       AnimNameOpenDoorRightPushWithClose;                       // 0xAEA4(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorLeftPull;                                // 0xAEAC(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorRightPull;                               // 0xAEB4(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorLeftPush;                                // 0xAEBC(0x0008) (Const)
	struct FName                                       AnimNameCloseDoorRightPush;                               // 0xAEC4(0x0008) (Const)
	struct FName                                       AnimNameUnlockAndOpenDoorLeft;                            // 0xAECC(0x0008) (Const)
	struct FName                                       AnimNameUnlockAndOpenDoorRight;                           // 0xAED4(0x0008) (Const)
	struct FName                                       AnimNameUnlockOpenAndCloseDoorLeft;                       // 0xAEDC(0x0008) (Const)
	struct FName                                       AnimNameUnlockOpenAndCloseDoorRight;                      // 0xAEE4(0x0008) (Const)
	struct FName                                       AnimNameBashDoor;                                         // 0xAEEC(0x0008) (Const)
	struct FName                                       AnimNameBashDoorStart;                                    // 0xAEF4(0x0008) (Const)
	struct FName                                       AnimNameBashDoorLoop;                                     // 0xAEFC(0x0008) (Const)
	struct FName                                       AnimNameBashDoorEnd;                                      // 0xAF04(0x0008) (Const)
	struct FName                                       AnimNameBashDoorEndEquip;                                 // 0xAF0C(0x0008) (Const)
	struct FName                                       AnimNameBashDoorFailed;                                   // 0xAF14(0x0008) (Const)
	struct FName                                       AnimNameOpenWindowPartialLow;                             // 0xAF1C(0x0008) (Const)
	struct FName                                       AnimNameOpenWindowPartialHigh;                            // 0xAF24(0x0008) (Const)
	struct FName                                       AnimNameOpenWindowFullLow;                                // 0xAF2C(0x0008) (Const)
	struct FName                                       AnimNameOpenWindowFullHigh;                               // 0xAF34(0x0008) (Const)
	struct FName                                       AnimNameBashThroughWindowLow;                             // 0xAF3C(0x0008) (Const)
	struct FName                                       AnimNameBashThroughWindowHigh;                            // 0xAF44(0x0008) (Const)
	struct FName                                       AnimNameAttack;                                           // 0xAF4C(0x0008) (Const)
	struct FName                                       AnimNameAttackLeft;                                       // 0xAF54(0x0008) (Const)
	struct FName                                       AnimNameAttackRight;                                      // 0xAF5C(0x0008) (Const)
	struct FName                                       AnimNameAttackMiddle;                                     // 0xAF64(0x0008) (Const)
	struct FName                                       AnimNameAttackQuick;                                      // 0xAF6C(0x0008) (Const)
	struct FName                                       AnimNameAttackBack;                                       // 0xAF74(0x0008) (Const)
	struct FName                                       AnimNameAttackPlayerCrouched;                             // 0xAF7C(0x0008) (Const)
	struct FName                                       AnimNameGrabSqueezeRight;                                 // 0xAF84(0x0008) (Const)
	struct FName                                       AnimNameGrabSqueezeLeft;                                  // 0xAF8C(0x0008) (Const)
	struct FName                                       AnimNameGrabSqueezeFail;                                  // 0xAF94(0x0008) (Const)
	struct FName                                       AnimNameBashWallChase;                                    // 0xAF9C(0x0008) (Const)
	struct FName                                       AnimNameBashTableChase;                                   // 0xAFA4(0x0008) (Const)
	struct FName                                       AnimNameIdle;                                             // 0xAFAC(0x0008) (Const)
	struct FName                                       AnimNameIdlePose;                                         // 0xAFB4(0x0008) (Const)
	struct FName                                       AnimNameTurnOnSpotLeft90;                                 // 0xAFBC(0x0008) (Const)
	struct FName                                       AnimNameTurnOnSpotLeft180;                                // 0xAFC4(0x0008) (Const)
	struct FName                                       AnimNameTurnOnSpotRight90;                                // 0xAFCC(0x0008) (Const)
	struct FName                                       AnimNameTurnOnSpotRight180;                               // 0xAFD4(0x0008) (Const)
	struct FName                                       AnimNameGrabBedLeft;                                      // 0xAFDC(0x0008) (Const)
	struct FName                                       AnimNameGrabBedRight;                                     // 0xAFE4(0x0008) (Const)
	struct FName                                       AnimNameGrabUnder;                                        // 0xAFEC(0x0008) (Const)
	struct FName                                       AnimNameGrabLocker;                                       // 0xAFF4(0x0008) (Const)
	struct FName                                       AnimNameSearchLocker;                                     // 0xAFFC(0x0008) (Const)
	struct FName                                       AnimNameSearchWindow;                                     // 0xB004(0x0008) (Const)
	struct FName                                       AnimNameSearchUnder;                                      // 0xB00C(0x0008) (Const)
	struct FName                                       AnimNameSearchBarrel;                                     // 0xB014(0x0008) (Const)
	struct FName                                       AnimNameSearchWardrobe;                                   // 0xB01C(0x0008) (Const)
	struct FName                                       AnimNameGrabFatality;                                     // 0xB024(0x0008) (Const)
	struct FName                                       AnimNameRunChaseToIdleChase;                              // 0xB02C(0x0008) (Const)
	struct FName                                       AnimNameWalkToIdle;                                       // 0xB034(0x0008) (Const)
	struct FName                                       AnimNamePushForward;                                      // 0xB03C(0x0008) (Const)
	struct FName                                       AnimNamePushLeft;                                         // 0xB044(0x0008) (Const)
	struct FName                                       AnimNamePushRight;                                        // 0xB04C(0x0008) (Const)
	struct FName                                       AnimNameAvoidLeft;                                        // 0xB054(0x0008) (Const)
	struct FName                                       AnimNameAvoidRight;                                       // 0xB05C(0x0008) (Const)
	struct FName                                       AnimNameKnockbackLeft;                                    // 0xB064(0x0008) (Const)
	struct FName                                       AnimNameKnockbackRight;                                   // 0xB06C(0x0008) (Const)
	struct FName                                       AnimNameEquipWeapon;                                      // 0xB074(0x0008) (Const)
	struct FName                                       AnimNameUnequipWeapon;                                    // 0xB07C(0x0008) (Const)
	struct FName                                       AnimNameChokeFatality;                                    // 0xB084(0x0008) (Const)
	struct FName                                       AnimNameNormalFatalityFront;                              // 0xB08C(0x0008) (Const)
	struct FName                                       AnimNameNormalFatalityBack;                               // 0xB094(0x0008) (Const)
	struct FName                                       AnimNameNormalFatalityHatchetFront;                       // 0xB09C(0x0008) (Const)
	struct FName                                       AnimNameFatalityLocker;                                   // 0xB0A4(0x0008) (Const)
	struct FName                                       AnimNameDisturbedFrontLeft;                               // 0xB0AC(0x0008) (Const)
	struct FName                                       AnimNameDisturbedFrontRight;                              // 0xB0B4(0x0008) (Const)
	struct FName                                       AnimNameDisturbedLeft90;                                  // 0xB0BC(0x0008) (Const)
	struct FName                                       AnimNameDisturbedLeft180;                                 // 0xB0C4(0x0008) (Const)
	struct FName                                       AnimNameDisturbedRight90;                                 // 0xB0CC(0x0008) (Const)
	struct FName                                       AnimNameDisturbedRight180;                                // 0xB0D4(0x0008) (Const)
	struct FName                                       AnimNameDisturbedWaitFrontLeft;                           // 0xB0DC(0x0008) (Const)
	struct FName                                       AnimNameDisturbedWaitFrontRight;                          // 0xB0E4(0x0008) (Const)
	struct FName                                       AnimNameDisturbedWaitLeft90;                              // 0xB0EC(0x0008) (Const)
	struct FName                                       AnimNameDisturbedWaitLeft180;                             // 0xB0F4(0x0008) (Const)
	struct FName                                       AnimNameDisturbedWaitRight90;                             // 0xB0FC(0x0008) (Const)
	struct FName                                       AnimNameDisturbedWaitRight180;                            // 0xB104(0x0008) (Const)
	struct FName                                       AnimNameDisturbedInvestigateFrontLeft;                    // 0xB10C(0x0008) (Const)
	struct FName                                       AnimNameDisturbedInvestigateFrontRight;                   // 0xB114(0x0008) (Const)
	struct FName                                       AnimNameDisturbedInvestigateLeft90;                       // 0xB11C(0x0008) (Const)
	struct FName                                       AnimNameDisturbedInvestigateLeft180;                      // 0xB124(0x0008) (Const)
	struct FName                                       AnimNameDisturbedInvestigateRight90;                      // 0xB12C(0x0008) (Const)
	struct FName                                       AnimNameDisturbedInvestigateRight180;                     // 0xB134(0x0008) (Const)
	struct FName                                       AnimNameDisturbedIgnoreFrontLeft;                         // 0xB13C(0x0008) (Const)
	struct FName                                       AnimNameDisturbedIgnoreFrontRight;                        // 0xB144(0x0008) (Const)
	struct FName                                       AnimNameDisturbedIgnoreLeft90;                            // 0xB14C(0x0008) (Const)
	struct FName                                       AnimNameDisturbedIgnoreLeft180;                           // 0xB154(0x0008) (Const)
	struct FName                                       AnimNameDisturbedIgnoreRight90;                           // 0xB15C(0x0008) (Const)
	struct FName                                       AnimNameDisturbedIgnoreRight180;                          // 0xB164(0x0008) (Const)
	struct FName                                       AnimNameDisturbedChaseFrontLeft;                          // 0xB16C(0x0008) (Const)
	struct FName                                       AnimNameDisturbedChaseFrontRight;                         // 0xB174(0x0008) (Const)
	struct FName                                       AnimNameDisturbedChaseLeft90;                             // 0xB17C(0x0008) (Const)
	struct FName                                       AnimNameDisturbedChaseLeft180;                            // 0xB184(0x0008) (Const)
	struct FName                                       AnimNameDisturbedChaseRight90;                            // 0xB18C(0x0008) (Const)
	struct FName                                       AnimNameDisturbedChaseRight180;                           // 0xB194(0x0008) (Const)
	struct FName                                       AnimNameDisturbedAlarmFrontLeft;                          // 0xB19C(0x0008) (Const)
	struct FName                                       AnimNameDisturbedAlarmFrontRight;                         // 0xB1A4(0x0008) (Const)
	struct FName                                       AnimNameDisturbedAlarmLeft90;                             // 0xB1AC(0x0008) (Const)
	struct FName                                       AnimNameDisturbedAlarmLeft180;                            // 0xB1B4(0x0008) (Const)
	struct FName                                       AnimNameDisturbedAlarmRight90;                            // 0xB1BC(0x0008) (Const)
	struct FName                                       AnimNameDisturbedAlarmRight180;                           // 0xB1C4(0x0008) (Const)
	struct FName                                       AnimNameReactToPlayerFront;                               // 0xB1CC(0x0008) (Const)
	struct FName                                       AnimNameReactToPlayerLeft90;                              // 0xB1D4(0x0008) (Const)
	struct FName                                       AnimNameReactToPlayerLeft180;                             // 0xB1DC(0x0008) (Const)
	struct FName                                       AnimNameReactToPlayerRight90;                             // 0xB1E4(0x0008) (Const)
	struct FName                                       AnimNameReactToPlayerRight180;                            // 0xB1EC(0x0008) (Const)
	struct FName                                       AnimNameMultiKillOwner;                                   // 0xB1F4(0x0008) (Const)
	struct FName                                       AnimNameMultiKillAssitant;                                // 0xB1FC(0x0008) (Const)
	struct FName                                       AnimNameEnterCrawl;                                       // 0xB204(0x0008) (Const)
	struct FName                                       AnimNameExitCrawl;                                        // 0xB20C(0x0008) (Const)
	struct FName                                       AnimNameEnterCrouch;                                      // 0xB214(0x0008) (Const)
	struct FName                                       AnimNameExitCrouch;                                       // 0xB21C(0x0008) (Const)
	struct FName                                       AnimNameAttackBarrel;                                     // 0xB224(0x0008) (Const)
	struct FName                                       AnimNameAttackWardrobeLeftGeneric;                        // 0xB22C(0x0008) (Const)
	struct FName                                       AnimNameAttackWardrobeRightGeneric;                       // 0xB234(0x0008) (Const)
	struct FName                                       AnimNameAttackWardrobeLeftGenericShort;                   // 0xB23C(0x0008) (Const)
	struct FName                                       AnimNameAttackWardrobeRightGenericShort;                  // 0xB244(0x0008) (Const)
	struct FName                                       AnimNameAttackUnderwater;                                 // 0xB24C(0x0008) (Const)
	struct FName                                       AnimNameSlamDoorLeft;                                     // 0xB254(0x0008) (Const)
	struct FName                                       AnimNameSlamDoorRight;                                    // 0xB25C(0x0008) (Const)
	struct FName                                       AnimNameAttackCrawlingPlayerLeft;                         // 0xB264(0x0008) (Const)
	struct FName                                       AnimNameAttackCrawlingPlayerFront;                        // 0xB26C(0x0008) (Const)
	struct FName                                       AnimNameAttackCrawlingPlayerRight;                        // 0xB274(0x0008) (Const)
	struct FName                                       AnimNameExitStairsBottomSmallSlowLeft;                    // 0xB27C(0x0008) (Const)
	struct FName                                       AnimNameExitStairsBottomSmallSlowRight;                   // 0xB284(0x0008) (Const)
	struct FName                                       AnimNameExitStairsBottomSmallFastLeft;                    // 0xB28C(0x0008) (Const)
	struct FName                                       AnimNameExitStairsBottomSmallFastRight;                   // 0xB294(0x0008) (Const)
	struct FName                                       AnimNameExitStairsBottomSmallRunLeft;                     // 0xB29C(0x0008) (Const)
	struct FName                                       AnimNameExitStairsBottomSmallRunRight;                    // 0xB2A4(0x0008) (Const)
	struct FName                                       AnimNameExitStairsBottomMedSlowLeft;                      // 0xB2AC(0x0008) (Const)
	struct FName                                       AnimNameExitStairsBottomMedSlowRight;                     // 0xB2B4(0x0008) (Const)
	struct FName                                       AnimNameExitStairsBottomMedFastLeft;                      // 0xB2BC(0x0008) (Const)
	struct FName                                       AnimNameExitStairsBottomMedFastRight;                     // 0xB2C4(0x0008) (Const)
	struct FName                                       AnimNameExitStairsBottomMedRunLeft;                       // 0xB2CC(0x0008) (Const)
	struct FName                                       AnimNameExitStairsBottomMedRunRight;                      // 0xB2D4(0x0008) (Const)
	struct FName                                       AnimNameExitStairsTopSmallSlowLeft;                       // 0xB2DC(0x0008) (Const)
	struct FName                                       AnimNameExitStairsTopSmallSlowRight;                      // 0xB2E4(0x0008) (Const)
	struct FName                                       AnimNameExitStairsTopSmallFastLeft;                       // 0xB2EC(0x0008) (Const)
	struct FName                                       AnimNameExitStairsTopSmallFastRight;                      // 0xB2F4(0x0008) (Const)
	struct FName                                       AnimNameExitStairsTopSmallRunLeft;                        // 0xB2FC(0x0008) (Const)
	struct FName                                       AnimNameExitStairsTopSmallRunRight;                       // 0xB304(0x0008) (Const)
	struct FName                                       AnimNameExitStairsTopMedSlowLeft;                         // 0xB30C(0x0008) (Const)
	struct FName                                       AnimNameExitStairsTopMedSlowRight;                        // 0xB314(0x0008) (Const)
	struct FName                                       AnimNameExitStairsTopMedFastLeft;                         // 0xB31C(0x0008) (Const)
	struct FName                                       AnimNameExitStairsTopMedFastRight;                        // 0xB324(0x0008) (Const)
	struct FName                                       AnimNameExitStairsTopMedRunLeft;                          // 0xB32C(0x0008) (Const)
	struct FName                                       AnimNameExitStairsTopMedRunRight;                         // 0xB334(0x0008) (Const)
	struct FName                                       AnimNameEntryStairsBottomMedFastLeft;                     // 0xB33C(0x0008) (Const)
	struct FName                                       AnimNameEntryStairsBottomMedFastRight;                    // 0xB344(0x0008) (Const)
	struct FName                                       AnimNameEntryStairsBottomMedRun2Left;                     // 0xB34C(0x0008) (Const)
	struct FName                                       AnimNameEntryStairsBottomMedRun2Right;                    // 0xB354(0x0008) (Const)
	struct FName                                       AnimNameEntryStairsBottomMedRun3Left;                     // 0xB35C(0x0008) (Const)
	struct FName                                       AnimNameEntryStairsBottomMedRun3Right;                    // 0xB364(0x0008) (Const)
	struct FName                                       AnimNameEntryStairsTopMedFastLeft;                        // 0xB36C(0x0008) (Const)
	struct FName                                       AnimNameEntryStairsTopMedFastRight;                       // 0xB374(0x0008) (Const)
	struct FName                                       AnimNameEntryStairsTopMedRun2Left;                        // 0xB37C(0x0008) (Const)
	struct FName                                       AnimNameEntryStairsTopMedRun2Right;                       // 0xB384(0x0008) (Const)
	struct FName                                       AnimNameEntryStairsTopMedRun3Left;                        // 0xB38C(0x0008) (Const)
	struct FName                                       AnimNameEntryStairsTopMedRun3Right;                       // 0xB394(0x0008) (Const)
	struct FName                                       AnimNameEnterBeamPerchLeftFootL;                          // 0xB39C(0x0008) (Const)
	struct FName                                       AnimNameEnterBeamPerchLeftFootR;                          // 0xB3A4(0x0008) (Const)
	struct FName                                       AnimNameEnterBeamPerchRightFootL;                         // 0xB3AC(0x0008) (Const)
	struct FName                                       AnimNameEnterBeamPerchRightFootR;                         // 0xB3B4(0x0008) (Const)
	struct FName                                       AnimNameEnterBeamPerchLeftQuick;                          // 0xB3BC(0x0008) (Const)
	struct FName                                       AnimNameEnterBeamPerchRightQuick;                         // 0xB3C4(0x0008) (Const)
	struct FName                                       AnimNameExitPerchToBeamLeft;                              // 0xB3CC(0x0008) (Const)
	struct FName                                       AnimNameExitPerchToBeamRight;                             // 0xB3D4(0x0008) (Const)
	struct FName                                       AnimNameJumpBeamToBeamFwd;                                // 0xB3DC(0x0008) (Const)
	struct FName                                       AnimNameJumpBeamToBeamDown;                               // 0xB3E4(0x0008) (Const)
	struct FName                                       AnimNameJumpBeamToGroundFwd;                              // 0xB3EC(0x0008) (Const)
	struct FName                                       AnimNameJumpBeamToGroundDown;                             // 0xB3F4(0x0008) (Const)
	struct FName                                       AnimNameJumpGroundToGroundFwd;                            // 0xB3FC(0x0008) (Const)
	struct FName                                       AnimNameJumpGroundToGroundDown;                           // 0xB404(0x0008) (Const)
	struct FName                                       AnimNameJumpGroundToBeamFwd;                              // 0xB40C(0x0008) (Const)
	struct FName                                       AnimNameJumpGroundToBeamDown;                             // 0xB414(0x0008) (Const)
	struct FName                                       AnimNameJumpFastFwd;                                      // 0xB41C(0x0008) (Const)
	struct FName                                       AnimNameJumpFastDown;                                     // 0xB424(0x0008) (Const)
	struct FName                                       AnimNameAttackCrawl;                                      // 0xB42C(0x0008) (Const)
	struct FName                                       AnimNameAttackCrouch;                                     // 0xB434(0x0008) (Const)
	struct FName                                       AnimNameAttackBeam;                                       // 0xB43C(0x0008) (Const)
	struct FName                                       AnimNameCrouchFwd;                                        // 0xB444(0x0008) (Const)
	struct FName                                       AnimNameScrambleFwd;                                      // 0xB44C(0x0008) (Const)
	struct FVector                                     DoorOpenEndOffsetPushLeft;                                // 0xB454(0x000C) (Const)
	struct FVector                                     DoorOpenEndOffsetPushRight;                               // 0xB460(0x000C) (Const)
	struct FVector                                     DoorOpenEndOffsetPullLeft;                                // 0xB46C(0x000C) (Const)
	struct FVector                                     DoorOpenEndOffsetPullRight;                               // 0xB478(0x000C) (Const)
	struct FVector                                     DoorOpenEndOffsetPushLeftWithClose;                       // 0xB484(0x000C) (Const)
	struct FVector                                     DoorOpenEndOffsetPushRightWithClose;                      // 0xB490(0x000C) (Const)
	struct FVector                                     DoorOpenEndOffsetPullLeftWithClose;                       // 0xB49C(0x000C) (Const)
	struct FVector                                     DoorOpenEndOffsetPullRightWithClose;                      // 0xB4A8(0x000C) (Const)
	struct FVector                                     DoorBashEndOffset;                                        // 0xB4B4(0x000C) (Const)
	struct FVector                                     LockerInvestigateOffset;                                  // 0xB4C0(0x000C) (Const)
	struct FVector                                     LockerAttackOffset;                                       // 0xB4CC(0x000C) (Const)
	struct FVector                                     BarrelAttackOffset;                                       // 0xB4D8(0x000C) (Const)
	float                                              SqueezeAttackOffsetRight;                                 // 0xB4E4(0x0004) (Const)
	float                                              SqueezeAttackOffsetLeft;                                  // 0xB4E8(0x0004) (Const)
	float                                              SqueezeAttackOffsetFail;                                  // 0xB4EC(0x0004) (Const)
	float                                              GrabDistance;                                             // 0xB4F0(0x0004) (Const)
	float                                              DoorOpenDistancePush;                                     // 0xB4F4(0x0004) (Const)
	float                                              DoorOpenDistancePull;                                     // 0xB4F8(0x0004) (Const)
	float                                              DoorBreakDistance;                                        // 0xB4FC(0x0004) (Const)
	float                                              DoorBreakFinishDistance;                                  // 0xB500(0x0004) (Const)
	float                                              WindowInteractExpectedFwdDist;                            // 0xB504(0x0004) (Const)
	float                                              WindowInteractLowHeight;                                  // 0xB508(0x0004) (Const)
	float                                              WindowInteractHighHeight;                                 // 0xB50C(0x0004) (Const)
	float                                              NormalDropDownDistance;                                   // 0xB510(0x0004) (Const)
	float                                              NormalClimbUpDistance;                                    // 0xB514(0x0004) (Const)
	float                                              ChasingDropDownDistance;                                  // 0xB518(0x0004) (Const)
	float                                              ChasingClimbUpDistance;                                   // 0xB51C(0x0004) (Const)
	float                                              WallBashDistance;                                         // 0xB520(0x0004) (Const)
	float                                              WallBashTime;                                             // 0xB524(0x0004) (Const)
	float                                              TableBashDistance;                                        // 0xB528(0x0004) (Const)
	float                                              WindowInvestigateOffsetInside;                            // 0xB52C(0x0004) (Const)
	float                                              WindowInvestigateOffsetOutside;                           // 0xB530(0x0004) (Const)
	float                                              GrabTargetVelocity;                                       // 0xB534(0x0004) (Const)
	float                                              ThrowStartPlayerDistance;                                 // 0xB538(0x0004) (Const)
	float                                              ThrowStartPlayerZOffset;                                  // 0xB53C(0x0004) (Const)
	float                                              CrawlEntryOffset;                                         // 0xB540(0x0004) (Const)
	float                                              BedInvestigateOffsetFwd;                                  // 0xB544(0x0004) (Const)
	float                                              BedInvestigateOffsetSide;                                 // 0xB548(0x0004) (Const)
	float                                              BedAttackOffsetLeftSide;                                  // 0xB54C(0x0004) (Const)
	float                                              BedAttackOffsetLeftFwd;                                   // 0xB550(0x0004) (Const)
	float                                              BedAttackOffsetRightSide;                                 // 0xB554(0x0004) (Const)
	float                                              BedAttackOffsetRightFwd;                                  // 0xB558(0x0004) (Const)
	float                                              BarrelInvestigateOffsetFwd;                               // 0xB55C(0x0004) (Const)
	float                                              WardrobeInvestigateOffsetFwd;                             // 0xB560(0x0004) (Const)
	float                                              GrabFromBarrelWaitDist;                                   // 0xB564(0x0004) (Const)
	float                                              GrabFromBarrelExpectedDist;                               // 0xB568(0x0004) (Const)
	float                                              GrabFromWardrobeWaitDist;                                 // 0xB56C(0x0004) (Const)
	float                                              GrabFromWardrobeLeftExpectedDist;                         // 0xB570(0x0004) (Const)
	float                                              GrabFromWardrobeRightExpectedDist;                        // 0xB574(0x0004) (Const)
	float                                              SlamDoorLeftExpectedDistFwd;                              // 0xB578(0x0004) (Const)
	float                                              SlamDoorLeftExpectedDistSide;                             // 0xB57C(0x0004) (Const)
	float                                              SlamDoorRightExpectedDistFwd;                             // 0xB580(0x0004) (Const)
	float                                              SlamDoorRightExpectedDistSide;                            // 0xB584(0x0004) (Const)
	float                                              AttackCrawlingPlayerLeftDistFwd;                          // 0xB588(0x0004) (Const)
	float                                              AttackCrawlingPlayerLeftDistSide;                         // 0xB58C(0x0004) (Const)
	float                                              AttackCrawlingPlayerFrontDistFwd;                         // 0xB590(0x0004) (Const)
	float                                              AttackCrawlingPlayerFrontDistSide;                        // 0xB594(0x0004) (Const)
	float                                              AttackCrawlingPlayerRightDistFwd;                         // 0xB598(0x0004) (Const)
	float                                              AttackCrawlingPlayerRightDistSide;                        // 0xB59C(0x0004) (Const)
	float                                              UnderwaterAttackDist;                                     // 0xB5A0(0x0004) (Const)
	float                                              UnderwaterAttackExpectedOffset;                           // 0xB5A4(0x0004) (Const)
	float                                              StairsStepHeight;                                         // 0xB5A8(0x0004) (Const)
	float                                              MinPhaseMatchDestinationBuffer;                           // 0xB5AC(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLEnemyPawn");
		return ptr;
	}


	void FinishAIGroup();
	void BeginAIGroup();
	void OnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void NativeOnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StartNormalAttack();
	void StartDoorKnockback(const struct FVector& Direction, bool bLocker);
	void StartKnockback(class AOLHero* Hero, const struct FVector& HitNormal);
	void StartAvoid(class AOLEnemyPawn* OtherPawn);
	void StopMoving();
	void StartMoving();
	void PlayFullBodyAnim(const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, float StartTime, float EndTime);
	bool PlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData);
	bool NativePlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData);
	void HideWeaponMatinee();
	void ShowWeaponMatinee();
	void PushNotify();
	void KnockbackTickNotify();
	void KnockbackStartNotify();
	void BreakDoorNotify();
	void BashDoorNotify();
	void DamageTargetRangeTickNotify();
	void HeadButtRangeStartNotify();
	void PunchLHRangeStartNotify();
	void PunchRHRangeStartNotify();
	void DamageTargetRangeStartNotify();
	void DamageTargetNonFatal();
	void KickPlayerRightFoot();
	void DamageTarget();
	void WindowBreakNotify();
	void RestoreHiddenWeapon();
	void TemporaryHideWeapon();
	void HideWeapon();
	void ShowWeapon();
	void ExitStairsStartBlendOutNotify();
	void EnterStairsStartBlendInNotify();
	void DoorUnlockNotify();
	void WardrobeDoorEndNotify();
	void WardrobeDoorNotify();
	void WindowAnimEndNotify();
	void WindowAnimStartNotify();
	void NativeDestroyed();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void PossessedBy(class AController* C, bool bVehicleTransition);
	void ZeroMovementVariables();
	void PostBeginPlay();
	bool HasRegisteredNavMeshRecently();
	void UpdateNavMeshObstacle();
	void UnregisterNavmeshObstacle();
	void RegisterNavMeshObstacle();
	void UpdateDifficultyBasedValues();
	void OnMoveAbilityCompleted();
	void EnterCrawl(class AOLCrawlMarker* CrawlMarker, bool bThroughPathfinding);
	void ExitBeam();
	void EnterBeam(class AOLBeamMarker* BeamMarker, class UOLSeqAct_AIBeam* BeamSeqAct);
	void StartJump(class AOLJumpMarker* JumpMarker, class UOLSeqAct_AIJump* JumpSeqAct);
	void StartDoorSpecialMove(TEnumAsByte<ESpecialMoveType> moveType);
	void BashThroughWindow();
	void OpenActiveWindow();
	void CancelSpecialMove();
	void StartSpecialMove(TEnumAsByte<ESpecialMoveType> moveType, const struct FVector& targetPosition, const struct FVector& TargetDirection, TEnumAsByte<EAdjustPositionTargetType> TargetType);
};


// Class OLGame.ActorFactoryOLAI
// 0x1394 (0x1470 - 0x00DC)
class UActorFactoryOLAI : public UActorFactoryAI
{
public:
	class UClass*                                      EnemyPawnClass;                                           // 0x00DC(0x0008) (Edit)
	struct FRenderingOverrideFlags                     RenderingOverrides;                                       // 0x00E4(0x0068) (Edit, NeedCtorLink)
	TArray<class UAnimSet*>                            AdditionalAnimSets;                                       // 0x014C(0x0010) (Edit, NeedCtorLink)
	class UOLAIAnimMapping*                            AnimMapping;                                              // 0x015C(0x0008) (Edit)
	struct FAIAnimMapping                              AnimMappingOverrides;                                     // 0x0164(0x0040) (Edit)
	class UOLAIContextualVOAsset*                      VOAsset;                                                  // 0x01A4(0x0008) (Edit)
	TEnumAsByte<EVOMappingsMergeType>                  VOMappingMergeType;                                       // 0x01AC(0x0001) (Edit)
	TEnumAsByte<EMultiplicityConfig>                   Multiplicity;                                             // 0x01AD(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01AE(0x0002) MISSED OFFSET
	TArray<struct FVOMapping>                          VOMappingOverrides;                                       // 0x01B0(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bSpawnHidden : 1;                                         // 0x01C0(0x0004) (Edit)
	class UOLAIConfig*                                 Config;                                                   // 0x01C4(0x0008) (Edit)
	struct FAIConfigData                               ConfigOverrides;                                          // 0x01CC(0x12A4) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.ActorFactoryOLAI");
		return ptr;
	}

};


// Class OLGame.ActorFactoryOLWaypoint
// 0x0000 (0x00A4 - 0x00A4)
class UActorFactoryOLWaypoint : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.ActorFactoryOLWaypoint");
		return ptr;
	}

};


// Class OLGame.OLAIAnimConfig
// 0x0128 (0x0190 - 0x0068)
class UOLAIAnimConfig : public UObject
{
public:
	struct FLocomotionAnimConfig                       LocoAnimConfig;                                           // 0x0068(0x0128) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAIAnimConfig");
		return ptr;
	}

};


// Class OLGame.OLBot
// 0x08DC (0x0D80 - 0x04A4)
class AOLBot : public AGameAIController
{
public:
	class AOLEnemyPawn*                                EnemyPawn;                                                // 0x04A4(0x0008)
	class UOLAIGroup*                                  Group;                                                    // 0x04AC(0x0008)
	class UOLAISightComponent*                         SightComponent;                                           // 0x04B4(0x0008) (ExportObject, Component, EditInline)
	class AOLHero*                                     TargetPlayer;                                             // 0x04BC(0x0008)
	class UOLNavigationHandle*                         OLNavHandle;                                              // 0x04C4(0x0008)
	TEnumAsByte<EAIActivity>                           CurrentActivity;                                          // 0x04CC(0x0001)
	TEnumAsByte<EMoveStatus>                           CurrentMoveStatus;                                        // 0x04CD(0x0001)
	TEnumAsByte<EMoveFailedReason>                     LastMoveFailedReason;                                     // 0x04CE(0x0001)
	TEnumAsByte<EAIMusicState>                         OverriddenMusicState;                                     // 0x04CF(0x0001)
	struct FAIEnvironment                              Environment;                                              // 0x04D0(0x001C)
	struct FFaceOffData                                FaceOff;                                                  // 0x04EC(0x000C)
	struct FChaseData                                  Chase;                                                    // 0x04F8(0x0040)
	struct FPatrolData                                 Patrol;                                                   // 0x0538(0x0038)
	struct FInvestigationData                          Investigation;                                            // 0x0570(0x0130) (NeedCtorLink)
	struct FDeathGripData                              DeathGrip;                                                // 0x06A0(0x0030)
	struct FScriptedBehaviorData                       Scripted;                                                 // 0x06D0(0x0058)
	struct FCrawlerData                                Crawler;                                                  // 0x0728(0x0048)
	struct FInnerDemonData                             InnerDemon;                                               // 0x0770(0x000C)
	struct FScriptedConfigData                         ScriptedConfig;                                           // 0x077C(0x0058)
	struct FPatrolConfigData                           PatrolConfig;                                             // 0x07D4(0x0084)
	struct FPatrolConfigData                           PatrolPendingAfterChase;                                  // 0x0858(0x0084)
	struct FInvestigationConfigData                    InvestigationConfig;                                      // 0x08DC(0x000C)
	struct FAttackStrategyData                         DesiredAttackStrategy;                                    // 0x08E8(0x0020)
	struct FBotPairedWalkData                          PairedWalk;                                               // 0x0908(0x0014)
	class UOLSeqAct_AIAmbush*                          AmbushSeqAct;                                             // 0x091C(0x0008)
	class UOLSeqAct_AIInvestigatePoint*                InvestigationSeqAct;                                      // 0x0924(0x0008)
	struct FMemoryData                                 Memory;                                                   // 0x092C(0x00B8)
	class UOLSeqAct_AISpawn*                           SpawnerAct;                                               // 0x09E4(0x0008)
	struct FAnimationData                              CurrentAnimation;                                         // 0x09EC(0x003C)
	TArray<struct FDelayedNoise>                       DelayedNoises;                                            // 0x0A28(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              NoiseChannelLoudness[0x3];                                // 0x0A38(0x0004)
	struct FDisturbanceSource                          VisualDisturbance;                                        // 0x0A44(0x0020)
	struct FDisturbanceSource                          AudioDisturbance;                                         // 0x0A64(0x0020)
	struct FDisturbanceData                            Disturbance;                                              // 0x0A84(0x0048)
	struct FScriptedDisturbanceData                    ScriptedDisturbance;                                      // 0x0ACC(0x001C)
	class UAkEvent*                                    SndReactToDisturbance;                                    // 0x0AE8(0x0008) (Const)
	TArray<struct FAIEventCondition>                   EventConditions;                                          // 0x0AF0(0x0010) (NeedCtorLink)
	struct FAIPerceptionRules                          PerceptionRules;                                          // 0x0B00(0x0070) (NeedCtorLink)
	TArray<class UOLSeqAct_AIWaitForEvent*>            WaitForEventSeqActs;                                      // 0x0B70(0x0010) (NeedCtorLink)
	TArray<class UOLSeqAct_AIWaitForTrigger*>          WaitForTriggerSeqActs;                                    // 0x0B80(0x0010) (NeedCtorLink)
	struct FMovementData                               CurrentMove;                                              // 0x0B90(0x0038)
	struct FMovementData                               NextMove;                                                 // 0x0BC8(0x0038)
	TArray<struct FVector>                             CurrentMoveManualPath;                                    // 0x0C00(0x0010) (NeedCtorLink)
	float                                              DynamicPathCheckTime;                                     // 0x0C10(0x0004) (Const)
	unsigned long                                      bRegeneratePath : 1;                                      // 0x0C14(0x0004)
	unsigned long                                      bRegenerateWhilePerforming : 1;                           // 0x0C14(0x0004)
	unsigned long                                      bUseFormationPathing : 1;                                 // 0x0C14(0x0004)
	unsigned long                                      bCloseAlreadyOpenDoors : 1;                               // 0x0C14(0x0004)
	unsigned long                                      bCloseDoorsBehind : 1;                                    // 0x0C14(0x0004)
	unsigned long                                      bOnRightSideOfBed : 1;                                    // 0x0C14(0x0004)
	unsigned long                                      bOpeningDoor : 1;                                         // 0x0C14(0x0004)
	unsigned long                                      bBreachingDoor : 1;                                       // 0x0C14(0x0004)
	unsigned long                                      bFinishedDoor : 1;                                        // 0x0C14(0x0004)
	unsigned long                                      bCancelBash : 1;                                          // 0x0C14(0x0004)
	unsigned long                                      bNoAccelToTarget : 1;                                     // 0x0C14(0x0004)
	unsigned long                                      bAvoiding : 1;                                            // 0x0C14(0x0004)
	unsigned long                                      bOverriddenMusic : 1;                                     // 0x0C14(0x0004)
	unsigned long                                      bOverrideMusicStateAsMinimum : 1;                         // 0x0C14(0x0004)
	unsigned long                                      bKnockedBack : 1;                                         // 0x0C14(0x0004)
	unsigned long                                      bBrainDead : 1;                                           // 0x0C14(0x0004)
	unsigned long                                      bDebugBehaviorTransitions : 1;                            // 0x0C14(0x0004) (Edit)
	unsigned long                                      bDebugThrowCalculations : 1;                              // 0x0C14(0x0004) (Edit)
	float                                              LastRegeneratePathTime;                                   // 0x0C18(0x0004)
	struct FVector                                     NavigationExtent;                                         // 0x0C1C(0x000C)
	struct FVector                                     FormationNavigationExtent;                                // 0x0C28(0x000C)
	class UGameAICommand*                              QueuedCommand;                                            // 0x0C34(0x0008)
	class UOLSeqAct_AISetLeash*                        LeashSeqAct;                                              // 0x0C3C(0x0008)
	class AOLDoor*                                     ActiveDoor;                                               // 0x0C44(0x0008)
	class AOLLedgeMarker*                              ActiveLedge;                                              // 0x0C4C(0x0008)
	class AOLBashableObject*                           ActiveBashable;                                           // 0x0C54(0x0008)
	class AOLHidingSpot*                               ActiveLocker;                                             // 0x0C5C(0x0008)
	class AOLAIVaultMarker*                            ActiveVault;                                              // 0x0C64(0x0008)
	class AOLJumpMarker*                               ActiveJump;                                               // 0x0C6C(0x0008)
	class AOLWindow*                                   ActiveWindow;                                             // 0x0C74(0x0008)
	class AOLCrawlMarker*                              ActiveCrawl;                                              // 0x0C7C(0x0008)
	class AOLBeamMarker*                               ActiveBeam;                                               // 0x0C84(0x0008)
	class AOLWardrobe*                                 ActiveWardrobe;                                           // 0x0C8C(0x0008)
	class AOLAmbushMarker*                             ActiveAmbush;                                             // 0x0C94(0x0008)
	struct FMovingStateVars                            MovingState;                                              // 0x0C9C(0x0020) (NeedCtorLink)
	struct FVector                                     MoveLastLocation;                                         // 0x0CBC(0x000C)
	struct FVector                                     MoveLastTargetActorVelocity;                              // 0x0CC8(0x000C)
	float                                              CheckStuckTimer;                                          // 0x0CD4(0x0004)
	float                                              CheckStuckSpeedThreshold;                                 // 0x0CD8(0x0004) (Const)
	float                                              LookAheadTimer;                                           // 0x0CDC(0x0004)
	float                                              StuckRepathDelayTimer;                                    // 0x0CE0(0x0004)
	float                                              IgnoreTimer;                                              // 0x0CE4(0x0004)
	float                                              WaitForMoveTime;                                          // 0x0CE8(0x0004)
	float                                              OverriddenMusicDistance;                                  // 0x0CEC(0x0004)
	struct FAttackData                                 Attack;                                                   // 0x0CF0(0x0038)
	TArray<class UOLSeqAct_AICondition*>               ActiveConditionSeqs;                                      // 0x0D28(0x0010) (NeedCtorLink)
	TArray<struct FDebugConditionResult>               ConditionResults;                                         // 0x0D38(0x0010) (NeedCtorLink)
	TArray<struct FErrorInfo>                          ErrorLog;                                                 // 0x0D48(0x0010) (NeedCtorLink)
	TArray<struct FEventInfo>                          EventLog;                                                 // 0x0D58(0x0010) (NeedCtorLink)
	TArray<struct FAILogInfo>                          FullLog;                                                  // 0x0D68(0x0010) (NeedCtorLink)
	int                                                DebugMovingStateId;                                       // 0x0D78(0x0004) (Transient)
	int                                                DebugMovingBeginId;                                       // 0x0D7C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLBot");
		return ptr;
	}


	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void NativeDisplayDebug(class UCanvas* aCanvas, float* out_YL, float* out_YPos);
	bool ShouldLogToConsole();
	void AILog_Internal(const struct FString& LogText, const struct FName& LogCategory, bool bForce);
	void DebugMessagePlayer(const struct FString& msg);
	void ToggleAIAlwaysSeePlayer(bool bEnable);
	void OnToggleAIAlwaysSeePlayer(class UOLSeqAct_ToggleAIAlwaysSeePlayer* Action);
	void IgnoreTarget(float Time);
	void ToggleAIIgnorePlayer(bool bEnable);
	void OnToggleAIIgnorePlayer(class UOLSeqAct_ToggleAIIgnorePlayer* Action);
	void StartWaitForDoor();
	bool TargetReachable();
	void StartDynamicMove(const struct FMovementData& aData);
	bool StartMove(const struct FMovementData& aData);
	bool NotifyBump(class AActor* Other, const struct FVector& HitNormal);
	void NotifyPathChanged();
	bool GeneratePathWithMaxDist(const struct FVector& Goal, float WithinDistance, float MaxPathDistance);
	bool GeneratePathToLocation(const struct FVector& Goal, float WithinDistance, bool bAllowPartialPath);
	bool GeneratePathToActor(class AActor* Goal, float WithinDistance, bool bAllowPartialPath);
	void AddBasePathContraints();
	void KnockbackTickNotify();
	void KnockbackStartNotify();
	void BreakDoorNotify();
	void BashDoorNotify();
	void AttackCycleEnd();
	void ClearAnimation();
	void PlayFullBodyAnim(const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, float StartTime, float EndTime);
	void PushQueuedCommand();
	bool QueueAICommand(class UGameAICommand* Cmd);
	void UnPossess();
	void Possess(class APawn* aPawn, bool bVehicleTransition);
	void Destroyed();
	void InitNavigationHandle();
	void PostBeginPlay();
	void LogErrorNotOnNavmesh();
	void LogErrorFailedMove();
	void TestLogAIToConsole(int Verbosity);
	void UpdateClosingDoorsState();
	bool CanUnlockDoor(class AOLDoor* aDoor);
	bool ShouldCloseDoor(class AOLDoor* aDoor);
	bool GetDoorApproachPoint(class AOLDoor* aDoor, struct FVector* ApproachPoint);
	bool GetClosestPointToActor(class AActor* ActorToCheck, bool bForceNudging, struct FVector* NewPoint, float* NewBuffer);
	bool GetClosestPointOnNavMesh(const struct FVector& PointToCheck, bool bForceNudging, struct FVector* out_NewPoint);
	class AOLWaypoint* GetCurrentWaypoint();
	class UOLAICmd_MoveAbility* GetMoveCommand();
	bool IsPerformingMoveAbility();
	bool IsPlayerOnVaultingPath();
	bool IsPlayerOnBrokenSideOfDoor(class AOLDoor* door);
	bool IsInDamageRange();
	bool IsInFinalAttackRange();
	bool IsInApproachAttackRange();
	bool IsInCrouchingAttackRange(float ForwardRangeFactor);
	bool IsInCrawlingAttackRange(float ForwardRangeFactor);
	bool IsInGrabUnderAttackRange();
	bool IsInAttackRange();
	bool TargetInSpecialLocation();
	bool CanSeePlayer();
	bool TryTurnAtDestination();
	bool HasReachedDestination();
	void OnMoveSucceeded();
	void MoveDynamic();
	void MoveToPoint(class AActor* ViewFocus, float DesiredOffset, struct FVector* Dest);
	void MoveAlongPath(TArray<struct FVector> PathPoints, class AActor* FocusTarget);
	void WaitForCrawlEngaged();
	void WaitForSpecialMove(bool bNoDelay);
	void WaitForFullBodyAnim();
	void TargetUnreacheable();
	void PushPlayer();
	bool TryKnockbackTarget();
	bool TryDamageTarget(bool bNonFatal);
	void FinishMatinee();
	void BeginMatinee();
	bool PerformAttackCheck(bool bForSynchedAnim);
	bool PerformGrabCheck();
	void EndDoorTraversal();
	void StartDoorTraversal(bool bReversed);
	void StopMoving(bool bAborted);
	void RegeneratePath();
	bool SetNavmeshValidatedMovePoint(bool bForceNudging, bool bQuiet);
	bool GeneratePath(bool bQuiet);
	void ClearAllActivities();
	void ClearDestination();
	void ClearInvestigation();
	void ClearNextMove();
	void ClearCurrentMove();
};


// Class OLGame.OLAICmd_MoveAbility
// 0x0048 (0x00D4 - 0x008C)
class UOLAICmd_MoveAbility : public UGameAICommand
{
public:
	struct FVector                                     CurrentDestination;                                       // 0x008C(0x000C)
	struct FVector                                     AnimStartPos;                                             // 0x0098(0x000C)
	struct FVector                                     AnimStartDir;                                             // 0x00A4(0x000C)
	unsigned long                                      bReversed : 1;                                            // 0x00B0(0x0004)
	class AOLBot*                                      ClosestBot;                                               // 0x00B4(0x0008) (Transient)
	class UOLAICmd_MoveAbility*                        TempMoveAbility;                                          // 0x00BC(0x0008) (Transient)
	TArray<struct FVector>                             TempPath;                                                 // 0x00C4(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility");
		return ptr;
	}


	bool TurnBeforePerform();
	bool MustTurnBeforePerform();
	bool ShouldWaitBeforeUsing();
	bool IsObjectInUse();
	void ModifyPath(const struct FVector& NewDestination, TArray<struct FVector>* NewPath);
	bool ModifyApproach(struct FVector* NewDestination);
	void Completed();
	void Popped();
	void Pushed();
};


// Class OLGame.OLAICmd_MoveAbility_Bash
// 0x0014 (0x00E8 - 0x00D4)
class UOLAICmd_MoveAbility_Bash : public UOLAICmd_MoveAbility
{
public:
	class AOLBashableObject*                           Bashable;                                                 // 0x00D4(0x0008)
	struct FVector                                     LastDestination;                                          // 0x00DC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility_Bash");
		return ptr;
	}


	class UOLAICmd_MoveAbility_Bash* STATIC_MoveThruBashable(class AOLBot* Bot, class AOLBashableObject* InBashable, const struct FVector& InitialDestination, bool bInReversed);
};


// Class OLGame.OLAICmd_MoveAbility_Door
// 0x001C (0x00F0 - 0x00D4)
class UOLAICmd_MoveAbility_Door : public UOLAICmd_MoveAbility
{
public:
	class AOLDoor*                                     door;                                                     // 0x00D4(0x0008)
	struct FVector                                     LastDestination;                                          // 0x00DC(0x000C)
	int                                                BashIter;                                                 // 0x00E8(0x0004)
	unsigned long                                      bUnlockingDoor : 1;                                       // 0x00EC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility_Door");
		return ptr;
	}


	void AutomaticDoorOpen();
	void CancelPlayerInteraction();
	void Cleanup();
	int GetDoorBashCount();
	bool ShouldWaitBeforeUsing();
	bool IsObjectInUse();
	void Cancel();
	void Popped();
	bool ModifyApproach(struct FVector* NewDestination);
	bool IsDoorOpen(class AOLDoor* TestDoor);
	class UOLAICmd_MoveAbility_Door* STATIC_MoveThruDoor(class AOLBot* Bot, class AOLDoor* InDoor, const struct FVector& InitialDestination, bool bInReversed);
};


// Class OLGame.OLAICmd_MoveAbility_EnterBeam
// 0x0008 (0x00DC - 0x00D4)
class UOLAICmd_MoveAbility_EnterBeam : public UOLAICmd_MoveAbility
{
public:
	class AOLBeamMarker*                               BeamMarker;                                               // 0x00D4(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility_EnterBeam");
		return ptr;
	}


	class UOLAICmd_MoveAbility_EnterBeam* STATIC_MoveToBeam(class AOLBot* Bot, class AOLBeamMarker* InMarker, const struct FVector& InitialDestination);
};


// Class OLGame.OLAICmd_MoveAbility_EnterCrawl
// 0x0008 (0x00DC - 0x00D4)
class UOLAICmd_MoveAbility_EnterCrawl : public UOLAICmd_MoveAbility
{
public:
	class AOLCrawlMarker*                              CrawlMarker;                                              // 0x00D4(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility_EnterCrawl");
		return ptr;
	}


	class UOLAICmd_MoveAbility_EnterCrawl* STATIC_MoveToCrawl(class AOLBot* Bot, class AOLCrawlMarker* InMarker, const struct FVector& InitialDestination);
	bool ShouldWaitBeforeUsing();
};


// Class OLGame.OLAICmd_MoveAbility_Jump
// 0x0008 (0x00DC - 0x00D4)
class UOLAICmd_MoveAbility_Jump : public UOLAICmd_MoveAbility
{
public:
	class AOLJumpMarker*                               JumpMarker;                                               // 0x00D4(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility_Jump");
		return ptr;
	}


	class UOLAICmd_MoveAbility_Jump* STATIC_MoveThruJump(class AOLBot* Bot, class AOLJumpMarker* InMarker, const struct FVector& InitialDestination);
};


// Class OLGame.OLAICmd_MoveAbility_Ledge
// 0x0008 (0x00DC - 0x00D4)
class UOLAICmd_MoveAbility_Ledge : public UOLAICmd_MoveAbility
{
public:
	class AOLLedgeMarker*                              Ledge;                                                    // 0x00D4(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility_Ledge");
		return ptr;
	}


	class UOLAICmd_MoveAbility_Ledge* STATIC_MoveThruLedge(class AOLBot* Bot, class AOLLedgeMarker* InLedge, const struct FVector& InitialDestination, bool bInReversed);
};


// Class OLGame.OLAICmd_MoveAbility_Vault
// 0x0014 (0x00E8 - 0x00D4)
class UOLAICmd_MoveAbility_Vault : public UOLAICmd_MoveAbility
{
public:
	class AOLAIVaultMarker*                            VaultMarker;                                              // 0x00D4(0x0008)
	struct FVector                                     NextPoint;                                                // 0x00DC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility_Vault");
		return ptr;
	}


	class UOLAICmd_MoveAbility_Vault* STATIC_MoveThruLedge(class AOLBot* Bot, class AOLAIVaultMarker* InMarker, const struct FVector& InitialDestination, bool bInReversed);
};


// Class OLGame.OLAICmd_MoveAbility_Window
// 0x0014 (0x00E8 - 0x00D4)
class UOLAICmd_MoveAbility_Window : public UOLAICmd_MoveAbility
{
public:
	class AOLWindow*                                   Window;                                                   // 0x00D4(0x0008)
	struct FVector                                     NextPoint;                                                // 0x00DC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility_Window");
		return ptr;
	}


	bool ShouldWaitBeforeUsing();
	bool IsObjectInUse();
	void Cancel();
	void Popped();
	class UOLAICmd_MoveAbility_Window* STATIC_MoveThruWindow(class AOLBot* Bot, class AOLWindow* InWindow, const struct FVector& InitialDestination, bool bInReversed);
};


// Class OLGame.OLAIContextualVOAsset
// 0x0030 (0x0098 - 0x0068)
class UOLAIContextualVOAsset : public UObject
{
public:
	TArray<struct FVOMapping>                          Mappings;                                                 // 0x0068(0x0010) (Edit, NeedCtorLink)
	TArray<class UAkEvent*>                            ContinuousSoundStart;                                     // 0x0078(0x0010) (Edit, NeedCtorLink)
	TArray<class UAkEvent*>                            ContinuousSoundStop;                                      // 0x0088(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAIContextualVOAsset");
		return ptr;
	}

};


// Class OLGame.OLAICoordinator
// 0x0014 (0x007C - 0x0068)
class UOLAICoordinator : public UObject
{
public:
	TArray<struct FBotCollisionInfo>                   CollisionData;                                            // 0x0068(0x0010) (NeedCtorLink)
	float                                              LastReactToDisturbanceSndTime;                            // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAICoordinator");
		return ptr;
	}

};


// Class OLGame.OLAIGroup
// 0x0080 (0x00E8 - 0x0068)
class UOLAIGroup : public UObject
{
public:
	TArray<class AOLBot*>                              Bots;                                                     // 0x0068(0x0010) (NeedCtorLink)
	class AOLBot*                                      Leader;                                                   // 0x0078(0x0008)
	unsigned long                                      bExplicitLeader : 1;                                      // 0x0080(0x0004)
	unsigned long                                      bPerformingGroupMove : 1;                                 // 0x0080(0x0004)
	unsigned long                                      bSxSLeaderOnLeft : 1;                                     // 0x0080(0x0004)
	TEnumAsByte<EGroupFormation>                       DesiredFormationStyle;                                    // 0x0084(0x0001)
	TEnumAsByte<EGroupFormation>                       FormationStyle;                                           // 0x0085(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0086(0x0002) MISSED OFFSET
	float                                              FormationSpacing;                                         // 0x0088(0x0004)
	float                                              FormationPathingDist;                                     // 0x008C(0x0004)
	TArray<class AOLBot*>                              FormationPlacement;                                       // 0x0090(0x0010) (Transient, NeedCtorLink)
	TArray<struct FVector2D>                           LeaderRelativeFormationOffsets;                           // 0x00A0(0x0010) (Transient, NeedCtorLink)
	TArray<int>                                        ChainParentIdx;                                           // 0x00B0(0x0010) (Transient, NeedCtorLink)
	TArray<float>                                      NodeSmoothedYaw;                                          // 0x00C0(0x0010) (Transient, NeedCtorLink)
	TArray<struct FVector>                             FormationSpots;                                           // 0x00D0(0x0010) (Transient, NeedCtorLink)
	float                                              SmoothedLeaderYaw;                                        // 0x00E0(0x0004) (Transient)
	float                                              LastFormationUpdatedTime;                                 // 0x00E4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAIGroup");
		return ptr;
	}


	void UseFallbackFormation();
	void UseDesiredFormation();
};


// Class OLGame.OLAIInvestigationPoint
// 0x0030 (0x0278 - 0x0248)
class AOLAIInvestigationPoint : public AActor
{
public:
	unsigned long                                      bAnimNarrow : 1;                                          // 0x0248(0x0004) (Edit)
	unsigned long                                      bAnimBroad : 1;                                           // 0x0248(0x0004) (Edit)
	unsigned long                                      bAnim360 : 1;                                             // 0x0248(0x0004) (Edit)
	unsigned long                                      bLoopAnimation : 1;                                       // 0x0248(0x0004) (Edit)
	unsigned long                                      bAlignAnimation : 1;                                      // 0x0248(0x0004) (Edit)
	unsigned long                                      bAlignRotationOnly : 1;                                   // 0x0248(0x0004) (Edit)
	unsigned long                                      bEnabledWhenAware : 1;                                    // 0x0248(0x0004) (Edit)
	unsigned long                                      bEnabledWhenUnaware : 1;                                  // 0x0248(0x0004) (Edit)
	struct FName                                       SpecificAnimToPlay;                                       // 0x024C(0x0008) (Edit)
	float                                              WaitTime;                                                 // 0x0254(0x0004) (Edit)
	float                                              ActivationRadius;                                         // 0x0258(0x0004) (Edit)
	TEnumAsByte<EIRotationAlignBehavior>               RotationAlignBehavior;                                    // 0x025C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x025D(0x0003) MISSED OFFSET
	class AActor*                                      LookAtTarget;                                             // 0x0260(0x0008) (Edit)
	class UOLInvestigationComponent*                   InvestigationComponent;                                   // 0x0268(0x0008) (Edit, ExportObject, Component, EditInline)
	class UCylinderComponent*                          ActivationCylinder;                                       // 0x0270(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAIInvestigationPoint");
		return ptr;
	}

};


// Class OLGame.OLAIInvestigationVolume
// 0x0014 (0x0298 - 0x0284)
class AOLAIInvestigationVolume : public AVolume
{
public:
	int                                                MaxConcurrentBots;                                        // 0x0284(0x0004) (Edit)
	TArray<class AOLBot*>                              InvestigatingBots;                                        // 0x0288(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAIInvestigationVolume");
		return ptr;
	}


	void ProcessActorSetVolume(class AActor* Other);
};


// Class OLGame.OLAISightComponent
// 0x002F (0x00BC - 0x008D)
class UOLAISightComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	class AOLBot*                                      Bot;                                                      // 0x0090(0x0008)
	unsigned long                                      CanSeeTarget : 1;                                         // 0x0098(0x0004)
	unsigned long                                      CouldSeeTarget : 1;                                       // 0x0098(0x0004)
	unsigned long                                      bHasDirectLineOfSightToPlayer : 1;                        // 0x0098(0x0004)
	unsigned long                                      bPlayerClearlyVisible : 1;                                // 0x0098(0x0004)
	unsigned long                                      bPlayerBarelyVisibleInDarkness : 1;                       // 0x0098(0x0004)
	unsigned long                                      bPlayerCloseFacing : 1;                                   // 0x0098(0x0004)
	unsigned long                                      IsInClose : 1;                                            // 0x0098(0x0004)
	unsigned long                                      IsInNarrowCone : 1;                                       // 0x0098(0x0004)
	unsigned long                                      IsInWideCone : 1;                                         // 0x0098(0x0004)
	unsigned long                                      IsPlayerSeenThroughWindow : 1;                            // 0x0098(0x0004)
	unsigned long                                      bPeeking : 1;                                             // 0x0098(0x0004)
	unsigned long                                      bAwareOfPlayerSpecialLocation : 1;                        // 0x0098(0x0004)
	unsigned long                                      bDebugSight : 1;                                          // 0x0098(0x0004) (Config)
	unsigned long                                      bDebugVisibilityChecks : 1;                               // 0x0098(0x0004) (Config)
	struct FVector                                     SawPlayerGoUnderLastPosition;                             // 0x009C(0x000C)
	float                                              SawPlayerGoUnderMaxDistance;                              // 0x00A8(0x0004) (Const)
	float                                              LoseTimer;                                                // 0x00AC(0x0004)
	float                                              DistanceToPlayer;                                         // 0x00B0(0x0004)
	float                                              HorizontalAngleToPlayer;                                  // 0x00B4(0x0004)
	float                                              VerticalAngleToPlayer;                                    // 0x00B8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAISightComponent");
		return ptr;
	}

};


// Class OLGame.OLNavigationHandle
// 0x0018 (0x01C0 - 0x01A8)
class UOLNavigationHandle : public UNavigationHandle
{
public:
	TArray<struct FMovePoint>                          MovePoints;                                               // 0x01A8(0x0010) (NeedCtorLink)
	int                                                LastMovePointIdxForPath;                                  // 0x01B8(0x0004)
	unsigned long                                      bDebugMovePoints : 1;                                     // 0x01BC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLNavigationHandle");
		return ptr;
	}


	bool PointReachable(const struct FVector& Point, const struct FVector& OverrideStartPoint, bool bAllowHitsInEndCollisionBox);
	bool TrimPathByDistance(float DistanceToTrim, bool bStopAtMeshObject, struct FVector* out_NewDestination);
	bool TrimPathToLastClosedDoor(struct FVector* out_NewDestination);
	void ClearPath();
	void PopMoveLocation();
	bool GetNextMovePath(float ArrivalDistance, TArray<struct FVector>* out_MovePath);
	bool GetNextMoveLocation(float ArrivalDistance, struct FVector* out_MoveDest);
	bool FindPath(class AActor** out_DestActor, int* out_DestItem);
};


// Class OLGame.OLNavMeshPath_SimilarToLastPath
// 0x0004 (0x0084 - 0x0080)
class UOLNavMeshPath_SimilarToLastPath : public UNavMeshPathConstraint
{
public:
	float                                              DifferentDirectionPenalty;                                // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLNavMeshPath_SimilarToLastPath");
		return ptr;
	}


	void Recycle();
	bool STATIC_SimilarToLastPath(class UNavigationHandle* NavHandle);
};


// Class OLGame.OLEnemyCrawler
// 0x0044 (0xB5F4 - 0xB5B0)
class AOLEnemyCrawler : public AOLEnemyPawn
{
public:
	unsigned long                                      bInAlertStance : 1;                                       // 0xB5B0(0x0004)
	struct FName                                       AnimNameIdlePoseAlert;                                    // 0xB5B4(0x0008) (Const)
	struct FName                                       AnimNameTurnOnSpotLeft90Alert;                            // 0xB5BC(0x0008) (Const)
	struct FName                                       AnimNameTurnOnSpotLeft180Alert;                           // 0xB5C4(0x0008) (Const)
	struct FName                                       AnimNameTurnOnSpotRight90Alert;                           // 0xB5CC(0x0008) (Const)
	struct FName                                       AnimNameTurnOnSpotRight180Alert;                          // 0xB5D4(0x0008) (Const)
	struct FName                                       AnimNameCrawlerFatalityFront;                             // 0xB5DC(0x0008) (Const)
	struct FName                                       AnimNameCrawlerFatalityBack;                              // 0xB5E4(0x0008) (Const)
	struct FName                                       AnimNameCrawlerAttackCrawlingPlayer;                      // 0xB5EC(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLEnemyCrawler");
		return ptr;
	}

};


// Class OLGame.OLEnemyGeneric
// 0x0000 (0xB5B0 - 0xB5B0)
class AOLEnemyGeneric : public AOLEnemyPawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLEnemyGeneric");
		return ptr;
	}

};


// Class OLGame.OLEnemySyphilitic
// 0x0000 (0xB5B0 - 0xB5B0)
class AOLEnemySyphilitic : public AOLEnemyGeneric
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLEnemySyphilitic");
		return ptr;
	}

};


// Class OLGame.OLEnemyHeretic
// 0x0010 (0xB5C0 - 0xB5B0)
class AOLEnemyHeretic : public AOLEnemyPawn
{
public:
	struct FName                                       AnimNameFatalityHereticFront;                             // 0xB5B0(0x0008) (Const)
	struct FName                                       AnimNameFatalityHereticBack;                              // 0xB5B8(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLEnemyHeretic");
		return ptr;
	}

};


// Class OLGame.OLEnemyInnerDemon
// 0x0024 (0xB5D4 - 0xB5B0)
class AOLEnemyInnerDemon : public AOLEnemyPawn
{
public:
	class UNxForceFieldRadialComponent*                ForceField;                                               // 0xB5B0(0x0008) (ExportObject, Component, EditInline)
	class AOLInnerDemonEffectActor*                    IDEffectActor;                                            // 0xB5B8(0x0008)
	float                                              InnerSphereRadius;                                        // 0xB5C0(0x0004)
	float                                              OuterSphereRadius;                                        // 0xB5C4(0x0004)
	float                                              LastScareTime;                                            // 0xB5C8(0x0004)
	struct FName                                       AnimNameInnerDemonFatalityFront;                          // 0xB5CC(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLEnemyInnerDemon");
		return ptr;
	}

};


// Class OLGame.OLEnemyMartha
// 0x003C (0xB5EC - 0xB5B0)
class AOLEnemyMartha : public AOLEnemyPawn
{
public:
	class UParticleSystemComponent*                    MaceParticles;                                            // 0xB5B0(0x0008) (ExportObject, Component, EditInline)
	float                                              DefaultParticlesRestartTime;                              // 0xB5B8(0x0004)
	class UPointLightComponent*                        MaceLight;                                                // 0xB5BC(0x0008) (ExportObject, Component, EditInline)
	struct FName                                       MaceSocketName;                                           // 0xB5C4(0x0008) (Const)
	struct FName                                       AnimNameMarthaFatalityFront;                              // 0xB5CC(0x0008) (Const)
	struct FName                                       AnimNameMarthaFatalityBack;                               // 0xB5D4(0x0008) (Const)
	float                                              CurrentMaceGlow;                                          // 0xB5DC(0x0004) (Transient)
	unsigned long                                      bLightActivated : 1;                                      // 0xB5E0(0x0004) (Transient)
	class UOLSeqAct_MartaStreet*                       MartaStreet;                                              // 0xB5E4(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLEnemyMartha");
		return ptr;
	}


	bool PlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData);
};


// Class OLGame.OLEnemyNickAndLaird
// 0x0070 (0xB620 - 0xB5B0)
class AOLEnemyNickAndLaird : public AOLEnemyPawn
{
public:
	struct FName                                       AnimNameShootArrowFront;                                  // 0xB5B0(0x0008) (Const)
	struct FName                                       AnimNameShootArrowLeft;                                   // 0xB5B8(0x0008) (Const)
	struct FName                                       AnimNameShootArrowRight;                                  // 0xB5C0(0x0008) (Const)
	struct FName                                       AnimNameAimingShootArrowFront;                            // 0xB5C8(0x0008) (Const)
	struct FName                                       AnimNameAimingShootArrowLeft;                             // 0xB5D0(0x0008) (Const)
	struct FName                                       AnimNameAimingShootArrowRight;                            // 0xB5D8(0x0008) (Const)
	struct FName                                       AnimNameNicAndLairdFatality;                              // 0xB5E0(0x0008) (Const)
	struct FName                                       AnimatedArrowSocketName;                                  // 0xB5E8(0x0008) (Const)
	struct FName                                       RestingArrowSocketName;                                   // 0xB5F0(0x0008) (Const)
	class AOLArrow*                                    ActiveArrow;                                              // 0xB5F8(0x0008)
	unsigned long                                      bArrowIsAnimated : 1;                                     // 0xB600(0x0004)
	unsigned long                                      bIsAiming : 1;                                            // 0xB600(0x0004)
	unsigned long                                      bAimingHasFullWeight : 1;                                 // 0xB600(0x0004)
	float                                              AimingYawLS;                                              // 0xB604(0x0004)
	float                                              AimingStateChangedTime;                                   // 0xB608(0x0004)
	float                                              MaxAimingAngle;                                           // 0xB60C(0x0004) (Const)
	class UFaceFXAsset*                                LairdFFXAsset;                                            // 0xB610(0x0008) (Const)
	class UFaceFXAsset*                                NicFFXAsset;                                              // 0xB618(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLEnemyNickAndLaird");
		return ptr;
	}


	void StopAnimatingArrow();
	void SpawnAndAnimateNewArrow();
	void SpawnNewArrow();
	void ArrowLaunch();
};


// Class OLGame.OLPawnJessica
// 0x0040 (0xB5F0 - 0xB5B0)
class AOLPawnJessica : public AOLEnemyPawn
{
public:
	class USkeletalMeshComponent*                      PonyTail;                                                 // 0xB5B0(0x0008) (ExportObject, Component, EditInline)
	struct FName                                       AnimNameLeadingJessicaIdle;                               // 0xB5B8(0x0008) (Const)
	struct FName                                       AnimNameLeadingJessicaWalk;                               // 0xB5C0(0x0008) (Const)
	struct FName                                       AnimNameLeadingJessicaRun;                                // 0xB5C8(0x0008) (Const)
	struct FName                                       AnimNameLeadingJessicaIdleLookAt;                         // 0xB5D0(0x0008) (Const)
	struct FName                                       AnimNameLeadingJessicaWalkLookAt;                         // 0xB5D8(0x0008) (Const)
	struct FName                                       AnimNameLeadingJessicaRunLookAt;                          // 0xB5E0(0x0008) (Const)
	class UApexClothingAsset*                          JessicaVer2ApexAsset;                                     // 0xB5E8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLPawnJessica");
		return ptr;
	}

};


// Class OLGame.OLPawnLynn
// 0x00CC (0xB67C - 0xB5B0)
class AOLPawnLynn : public AOLEnemyPawn
{
public:
	class USkeletalMeshComponent*                      PonyTail;                                                 // 0xB5B0(0x0008) (ExportObject, Component, EditInline)
	struct FName                                       AnimNamePregnantLynnIdle;                                 // 0xB5B8(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnWalk;                                 // 0xB5C0(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnRun;                                  // 0xB5C8(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnBackwards;                            // 0xB5D0(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnTurning;                              // 0xB5D8(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnHurting;                              // 0xB5E0(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnWalkStrafeL;                          // 0xB5E8(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnWalkStrafeR;                          // 0xB5F0(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnRunStrafeL;                           // 0xB5F8(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnRunStrafeR;                           // 0xB600(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnIdleCAM;                              // 0xB608(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnWalkCAM;                              // 0xB610(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnRunCAM;                               // 0xB618(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnBackwardsCAM;                         // 0xB620(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnTurningCAM;                           // 0xB628(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnHurtingCAM;                           // 0xB630(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnWalkStrafeLCAM;                       // 0xB638(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnWalkStrafeRCAM;                       // 0xB640(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnRunStrafeLCAM;                        // 0xB648(0x0008) (Const)
	struct FName                                       AnimNamePregnantLynnRunStrafeRCAM;                        // 0xB650(0x0008) (Const)
	struct FName                                       AnimNameLeadingLynnIdle;                                  // 0xB658(0x0008) (Const)
	struct FName                                       AnimNameLeadingLynnWalk;                                  // 0xB660(0x0008) (Const)
	struct FName                                       AnimNameLeadingLynnRun;                                   // 0xB668(0x0008) (Const)
	struct FName                                       AnimNameLeadingLynnHurting;                               // 0xB670(0x0008) (Const)
	float                                              HurtingLynnSpeed;                                         // 0xB678(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLPawnLynn");
		return ptr;
	}

};


// Class OLGame.OLScout
// 0x0000 (0x0630 - 0x0630)
class AOLScout : public AScout
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLScout");
		return ptr;
	}

};


// Class OLGame.OLWaypoint
// 0x0018 (0x0378 - 0x0360)
class AOLWaypoint : public ANavigationPoint
{
public:
	TEnumAsByte<EActionSelectionMethod>                SelectionMethod;                                          // 0x0360(0x0001) (Edit)
	TEnumAsByte<EDeathCountLoopMode>                   DeathCountLoopMode;                                       // 0x0361(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0362(0x0002) MISSED OFFSET
	TArray<struct FWaypointAction>                     Actions;                                                  // 0x0364(0x0010) (Edit, NeedCtorLink, EditInline)
	float                                              Radius;                                                   // 0x0374(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLWaypoint");
		return ptr;
	}


	void AnimStartedEvent(class AActor* InInstigator);
	void WaypointReachedEvent(class AActor* InInstigator);
};


// Class OLGame.OLAnimAIStairs
// 0x0004 (0x0168 - 0x0164)
class UOLAnimAIStairs : public UAnimNodeBlendList
{
public:
	int                                                ActiveIdx;                                                // 0x0164(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimAIStairs");
		return ptr;
	}

};


// Class OLGame.OLAnimBarrelIdle
// 0x0003 (0x0140 - 0x013D)
class UOLAnimBarrelIdle : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBarrelIdle");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendByCrouchedHandsDown
// 0x0007 (0x0144 - 0x013D)
class UOLAnimBlendByCrouchedHandsDown : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              HandsDownRatio;                                           // 0x0140(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendByCrouchedHandsDown");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendByEnemyEnvironment
// 0x0000 (0x0164 - 0x0164)
class UOLAnimBlendByEnemyEnvironment : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendByEnemyEnvironment");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendByEnemyMode
// 0x0000 (0x0164 - 0x0164)
class UOLAnimBlendByEnemyMode : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendByEnemyMode");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendByHobblingIntensity
// 0x0000 (0x0150 - 0x0150)
class UOLAnimBlendByHobblingIntensity : public UAnimNodeBlend
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendByHobblingIntensity");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendByIdle
// 0x0008 (0x0184 - 0x017C)
class UOLAnimBlendByIdle : public UUDKAnimBlendBase
{
public:
	struct FName                                       ChildSynchGroup;                                          // 0x017C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendByIdle");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendByLeaning
// 0x0007 (0x0144 - 0x013D)
class UOLAnimBlendByLeaning : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              CurrentRatio;                                             // 0x0140(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendByLeaning");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendByLocomotionMode
// 0x0010 (0x0174 - 0x0164)
class UOLAnimBlendByLocomotionMode : public UAnimNodeBlendList
{
public:
	TArray<float>                                      ChildBlendTimes;                                          // 0x0164(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendByLocomotionMode");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendByPosture
// 0x0008 (0x016C - 0x0164)
class UOLAnimBlendByPosture : public UAnimNodeBlendList
{
public:
	unsigned long                                      UpdateInTick : 1;                                         // 0x0164(0x0004) (Edit)
	unsigned long                                      bSupportUnderwaterHiding : 1;                             // 0x0164(0x0004) (Edit)
	unsigned long                                      bValidateBaseLoco : 1;                                    // 0x0164(0x0004) (Edit)
	float                                              TickUpdateBlendTime;                                      // 0x0168(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendByPosture");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendBySpeed
// 0x0010 (0x0160 - 0x0150)
class UOLAnimBlendBySpeed : public UAnimNodeBlend
{
public:
	float                                              MinSpeed;                                                 // 0x0150(0x0004) (Edit)
	float                                              MaxSpeed;                                                 // 0x0154(0x0004) (Edit)
	float                                              MaxWeightRate;                                            // 0x0158(0x0004) (Edit)
	float                                              CurrentWeight;                                            // 0x015C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendBySpeed");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendByEnemySpeedSimple
// 0x0002 (0x0162 - 0x0160)
class UOLAnimBlendByEnemySpeedSimple : public UOLAnimBlendBySpeed
{
public:
	TEnumAsByte<ESpeedType>                            LowSpeed;                                                 // 0x0160(0x0001) (Edit)
	TEnumAsByte<ESpeedType>                            HighSpeed;                                                // 0x0161(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendByEnemySpeedSimple");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendBySpeedExpandable
// 0x0023 (0x0160 - 0x013D)
class UOLAnimBlendBySpeedExpandable : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	TArray<float>                                      AnimSpeeds;                                               // 0x0140(0x0010) (Edit, EditFixedSize, NeedCtorLink)
	unsigned long                                      bTimeScaleDown : 1;                                       // 0x0150(0x0004) (Edit)
	unsigned long                                      bTimeScaleUp : 1;                                         // 0x0150(0x0004) (Edit)
	float                                              SmoothingCoefficient;                                     // 0x0154(0x0004) (Edit)
	float                                              CurrentSpeed;                                             // 0x0158(0x0004) (Transient)
	float                                              SliderPosition;                                           // 0x015C(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendBySpeedExpandable");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendByEnemySpeed
// 0x0004 (0x0164 - 0x0160)
class UOLAnimBlendByEnemySpeed : public UOLAnimBlendBySpeedExpandable
{
public:
	unsigned long                                      bBackward : 1;                                            // 0x0160(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendByEnemySpeed");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendByStairs
// 0x0007 (0x0144 - 0x013D)
class UOLAnimBlendByStairs : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              StairRatio;                                               // 0x0140(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendByStairs");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendByTurning
// 0x0007 (0x0144 - 0x013D)
class UOLAnimBlendByTurning : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              CurrentRatio;                                             // 0x0140(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendByTurning");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendCrawler
// 0x0007 (0x0144 - 0x013D)
class UOLAnimBlendCrawler : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              BlendInIdleMaxSpeed;                                      // 0x0140(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendCrawler");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendDirectional
// 0x0013 (0x0150 - 0x013D)
class UOLAnimBlendDirectional : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	unsigned long                                      bTimescaleDiagonals : 1;                                  // 0x0140(0x0004) (Edit)
	unsigned long                                      bTimescaleBelowExpectedSpeed : 1;                         // 0x0140(0x0004) (Edit)
	unsigned long                                      bTimescaleAboveExpectedSpeed : 1;                         // 0x0140(0x0004) (Edit)
	unsigned long                                      bUseReversedSideForBackwards : 1;                         // 0x0140(0x0004) (Edit)
	unsigned long                                      bUseAcceleration : 1;                                     // 0x0140(0x0004) (Edit)
	unsigned long                                      bReversingBackward : 1;                                   // 0x0140(0x0004) (Transient)
	float                                              ExpectedPawnSpeed;                                        // 0x0144(0x0004) (Edit)
	float                                              BlendInIdleMaxSpeedPct;                                   // 0x0148(0x0004) (Edit)
	float                                              SliderDirAngle;                                           // 0x014C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendDirectional");
		return ptr;
	}

};


// Class OLGame.OLAnimBlendDirectionalRM
// 0x0033 (0x0170 - 0x013D)
class UOLAnimBlendDirectionalRM : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              NominalSpeed;                                             // 0x0140(0x0004) (Edit)
	float                                              IdleBlendDelay;                                           // 0x0144(0x0004) (Edit)
	float                                              IdleBlendTime;                                            // 0x0148(0x0004) (Edit)
	unsigned long                                      bUseReversedSideForBackwards : 1;                         // 0x014C(0x0004) (Edit)
	unsigned long                                      bReversingBackward : 1;                                   // 0x014C(0x0004) (Transient)
	unsigned long                                      bNoDirections : 1;                                        // 0x014C(0x0004) (Transient)
	unsigned long                                      bUsingSpecialAnims : 1;                                   // 0x014C(0x0004) (Transient)
	float                                              WeightApproachCoeff;                                      // 0x0150(0x0004) (Edit)
	float                                              SliderDirAngle;                                           // 0x0154(0x0004)
	float                                              NoInputStartTime;                                         // 0x0158(0x0004) (Transient)
	float                                              LastDirAngle;                                             // 0x015C(0x0004) (Transient)
	float                                              CurrentPhase;                                             // 0x0160(0x0004) (Transient)
	float                                              SmoothedDelta;                                            // 0x0164(0x0004) (Transient)
	struct FName                                       DefaultFwdAnim;                                           // 0x0168(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimBlendDirectionalRM");
		return ptr;
	}

};


// Class OLGame.OLAnimCameraSpace
// 0x0088 (0x020C - 0x0184)
class UOLAnimCameraSpace : public UAnimNodeBlendPerBone
{
public:
	class UAnimNodeSlot*                               ChildSlot;                                                // 0x0184(0x0008) (Transient)
	class UOLAnimCustomBlend*                          ChildBlend;                                               // 0x018C(0x0008) (Transient)
	class UAnimNodeSequence*                           ChildSeq;                                                 // 0x0194(0x0008) (Transient)
	int                                                CameraBoneIdx;                                            // 0x019C(0x0004) (Transient)
	int                                                InteractionBoneIdx;                                       // 0x01A0(0x0004) (Transient)
	int                                                LeftHandCenterBoneIdx;                                    // 0x01A4(0x0004) (Transient)
	int                                                RightHandCenterBoneIdx;                                   // 0x01A8(0x0004) (Transient)
	int                                                LeftHandAuxBoneIdx;                                       // 0x01AC(0x0004) (Transient)
	int                                                RightHandAuxBoneIdx;                                      // 0x01B0(0x0004) (Transient)
	TArray<int>                                        StartBoneIndices;                                         // 0x01B4(0x0010) (Transient, NeedCtorLink)
	TArray<int>                                        ParentChain;                                              // 0x01C4(0x0010) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData00[0xC];                                       // 0x01D4(0x000C) MISSED OFFSET
	struct FBoneAtom                                   CachedCamBoneAtom;                                        // 0x01E0(0x0020) (Transient)
	struct FName                                       CachedActiveAnimName;                                     // 0x0200(0x0008) (Transient)
	unsigned long                                      bApplyCameraSpace : 1;                                    // 0x0208(0x0004) (Edit)
	unsigned long                                      bAutoPlay : 1;                                            // 0x0208(0x0004) (Edit)
	unsigned long                                      bIncludeCameraBone : 1;                                   // 0x0208(0x0004) (Transient)
	unsigned long                                      bLinkAuxBoneToHandOnShadow : 1;                           // 0x0208(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimCameraSpace");
		return ptr;
	}

};


// Class OLGame.OLAnimCinematicPoseReplicator
// 0x001F (0x015C - 0x013D)
class UOLAnimCinematicPoseReplicator : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	unsigned long                                      bSlave : 1;                                               // 0x0140(0x0004) (Transient)
	class UOLAnimCinematicPoseReplicator*              MasterNode;                                               // 0x0144(0x0008) (Transient)
	TArray<struct FBoneAtom>                           SavedBones;                                               // 0x014C(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimCinematicPoseReplicator");
		return ptr;
	}

};


// Class OLGame.OLAnimConstrainedMovement
// 0x0010 (0x0174 - 0x0164)
class UOLAnimConstrainedMovement : public UAnimNodeBlendList
{
public:
	unsigned long                                      bUpDown : 1;                                              // 0x0164(0x0004) (Edit)
	unsigned long                                      bCompleteCyclesOnly : 1;                                  // 0x0164(0x0004) (Edit)
	unsigned long                                      bNoAutomaticRootMotion : 1;                               // 0x0164(0x0004) (Edit)
	unsigned long                                      bAutomaticMotion : 1;                                     // 0x0164(0x0004) (Transient)
	float                                              CurrentRatio;                                             // 0x0168(0x0004) (Transient)
	float                                              SmoothedDelta;                                            // 0x016C(0x0004) (Transient)
	int                                                LastTargetIdx;                                            // 0x0170(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimConstrainedMovement");
		return ptr;
	}

};


// Class OLGame.OLAnimCrouchedTurnOnSpot
// 0x0060 (0x01B0 - 0x0150)
class UOLAnimCrouchedTurnOnSpot : public UAnimNodeBlend
{
public:
	float                                              BaseHeading;                                              // 0x0150(0x0004) (Transient)
	float                                              LastHeading;                                              // 0x0154(0x0004) (Transient)
	float                                              TurningVelocity;                                          // 0x0158(0x0004) (Transient)
	float                                              HandUpWeight;                                             // 0x015C(0x0004) (Transient)
	unsigned long                                      bHandUp : 1;                                              // 0x0160(0x0004) (Transient)
	float                                              IKStrength;                                               // 0x0164(0x0004) (Transient)
	struct FVector                                     IKPosition;                                               // 0x0168(0x000C) (Transient)
	struct FRotator                                    IKRotationWS;                                             // 0x0174(0x000C) (Transient)
	struct FVector                                     ActorSpaceIKOffset;                                       // 0x0180(0x000C)
	unsigned char                                      UnknownData00[0x4];                                       // 0x018C(0x0004) MISSED OFFSET
	struct FQuat                                       ActorSpaceIKRotation;                                     // 0x0190(0x0010)
	class UAkEvent*                                    HandUpSound;                                              // 0x01A0(0x0008)
	class UAkEvent*                                    HandDownSound;                                            // 0x01A8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimCrouchedTurnOnSpot");
		return ptr;
	}

};


// Class OLGame.OLAnimCustomBlend
// 0x0038 (0x019C - 0x0164)
class UOLAnimCustomBlend : public UAnimNodeBlendList
{
public:
	unsigned long                                      bActive : 1;                                              // 0x0164(0x0004) (Transient)
	unsigned long                                      bBlendingOut : 1;                                         // 0x0164(0x0004) (Transient)
	unsigned long                                      bKeepLastPose : 1;                                        // 0x0164(0x0004) (Transient)
	unsigned long                                      bInhibitEndNotifies : 1;                                  // 0x0164(0x0004) (Transient)
	unsigned long                                      bEarlyAnimEndFired : 1;                                   // 0x0164(0x0004) (Transient)
	unsigned long                                      bPlayLooping : 1;                                         // 0x0164(0x0004) (Transient)
	float                                              BlendOutTime;                                             // 0x0168(0x0004) (Transient)
	float                                              PlaybackTime;                                             // 0x016C(0x0004) (Transient)
	float                                              BlendWeights[0x6];                                        // 0x0170(0x0004) (Transient)
	float                                              TimeRemaining;                                            // 0x0188(0x0004) (Transient)
	TArray<struct FAngleBlendAnimDesc>                 AngleBlendAnims;                                          // 0x018C(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimCustomBlend");
		return ptr;
	}

};


// Class OLGame.OLAnimCycleBreaker
// 0x00A7 (0x01E4 - 0x013D)
class UOLAnimCycleBreaker : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              MinDelayToActivation;                                     // 0x0140(0x0004) (Edit)
	float                                              DefaultCycleBias;                                         // 0x0144(0x0004) (Edit)
	float                                              DefaultStretchDuration;                                   // 0x0148(0x0004) (Edit)
	unsigned long                                      bIdleBreakers : 1;                                        // 0x014C(0x0004) (Const)
	unsigned long                                      bIsMaster : 1;                                            // 0x014C(0x0004) (Transient)
	class UOLAnimCycleBreaker*                         ShadowNode;                                               // 0x0150(0x0008) (Transient)
	TArray<struct FCycleBreaker>                       Breakers;                                                 // 0x0158(0x0010) (Edit, NeedCtorLink)
	int                                                DontRepeatCount;                                          // 0x0168(0x0004) (Edit)
	struct FCycleBreaker                               BreakerTemplate;                                          // 0x016C(0x004C) (Const, NeedCtorLink)
	float                                              LastBecameRelevantTime;                                   // 0x01B8(0x0004) (Transient)
	float                                              NextBreakerWeightTransition;                              // 0x01BC(0x0004) (Transient)
	TArray<int>                                        ValidBreakers;                                            // 0x01C0(0x0010) (Transient, NeedCtorLink)
	float                                              GlobalRate;                                               // 0x01D0(0x0004) (Transient)
	TArray<int>                                        InvalidBreakerIndexes;                                    // 0x01D4(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimCycleBreaker");
		return ptr;
	}

};


// Class OLGame.OLAnimSmarterIdle
// 0x0024 (0x0208 - 0x01E4)
class UOLAnimSmarterIdle : public UOLAnimCycleBreaker
{
public:
	unsigned long                                      bModifyPlayrateIdle : 1;                                  // 0x01E4(0x0004) (Edit)
	float                                              IdleMinRate;                                              // 0x01E8(0x0004) (Edit)
	float                                              IdleMaxRate;                                              // 0x01EC(0x0004) (Edit)
	float                                              IdleRateMinDuration;                                      // 0x01F0(0x0004) (Edit)
	float                                              IdleRateMaxDuration;                                      // 0x01F4(0x0004) (Edit)
	float                                              IdleRateTransitionSpeed;                                  // 0x01F8(0x0004) (Edit)
	float                                              CurrentIdleRate;                                          // 0x01FC(0x0004) (Transient)
	float                                              TargetIdleRate;                                           // 0x0200(0x0004) (Transient)
	float                                              NextIdleRateTransition;                                   // 0x0204(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimSmarterIdle");
		return ptr;
	}

};


// Class OLGame.OLAnimDirectionalAttack
// 0x0027 (0x0164 - 0x013D)
class UOLAnimDirectionalAttack : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              MaxAngleOffset;                                           // 0x0140(0x0004) (Edit)
	struct FName                                       SyncGroupName;                                            // 0x0144(0x0008) (Edit)
	float                                              CurrentAngle;                                             // 0x014C(0x0004) (Transient)
	float                                              CurrentDistance;                                          // 0x0150(0x0004) (Transient)
	float                                              TargetAngle;                                              // 0x0154(0x0004) (Transient)
	float                                              TargetDistance;                                           // 0x0158(0x0004) (Transient)
	float                                              ShortDistance;                                            // 0x015C(0x0004) (Transient)
	float                                              FarDistance;                                              // 0x0160(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimDirectionalAttack");
		return ptr;
	}

};


// Class OLGame.OLAnimDisturbed
// 0x003F (0x017C - 0x013D)
class UOLAnimDisturbed : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              CurrentRatio;                                             // 0x0140(0x0004) (Transient)
	float                                              TargetRatio;                                              // 0x0144(0x0004) (Transient)
	float                                              NextBlendOutDuration;                                     // 0x0148(0x0004) (Transient)
	float                                              ActiveBlendOutDuration;                                   // 0x014C(0x0004) (Transient)
	float                                              BlendOutTimeToGo;                                         // 0x0150(0x0004) (Transient)
	unsigned long                                      bPlaying : 1;                                             // 0x0154(0x0004) (Transient)
	unsigned long                                      bReadyToBlendOut : 1;                                     // 0x0154(0x0004) (Transient)
	unsigned long                                      bAnimsAtEnd : 1;                                          // 0x0154(0x0004) (Transient)
	float                                              BlendOutWeightA;                                          // 0x0158(0x0004) (Transient)
	int                                                AnimMap[0x8];                                             // 0x015C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimDisturbed");
		return ptr;
	}

};


// Class OLGame.OLAnimDoorInteraction
// 0x0014 (0x0178 - 0x0164)
class UOLAnimDoorInteraction : public UAnimNodeBlendList
{
public:
	float                                              InitialRatio;                                             // 0x0164(0x0004)
	float                                              CurrentRatio;                                             // 0x0168(0x0004) (Transient)
	float                                              SmoothedDelta;                                            // 0x016C(0x0004) (Transient)
	float                                              PlayRate;                                                 // 0x0170(0x0004) (Edit)
	float                                              MaxRatio;                                                 // 0x0174(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimDoorInteraction");
		return ptr;
	}

};


// Class OLGame.OLAnimEnemyStruggle
// 0x0000 (0x0164 - 0x0164)
class UOLAnimEnemyStruggle : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimEnemyStruggle");
		return ptr;
	}

};


// Class OLGame.OLAnimEnvironmentReaction
// 0x0000 (0x0164 - 0x0164)
class UOLAnimEnvironmentReaction : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimEnvironmentReaction");
		return ptr;
	}

};


// Class OLGame.OLAnimEyeLookAt
// 0x001F (0x015C - 0x013D)
class UOLAnimEyeLookAt : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	unsigned long                                      bActive : 1;                                              // 0x0140(0x0004) (Transient)
	float                                              LookAtWeight;                                             // 0x0144(0x0004) (Transient)
	struct FVector                                     TargetLocationWS;                                         // 0x0148(0x000C) (Transient)
	float                                              CurrentRatioLR;                                           // 0x0154(0x0004) (Transient)
	float                                              CurrentRatioUD;                                           // 0x0158(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimEyeLookAt");
		return ptr;
	}

};


// Class OLGame.OLAnimFaceOff
// 0x0013 (0x0150 - 0x013D)
class UOLAnimFaceOff : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	int                                                ActiveIdx;                                                // 0x0140(0x0004) (Transient)
	float                                              TransitionBlendTime;                                      // 0x0144(0x0004) (Transient)
	float                                              IdleLeanTargetRatio;                                      // 0x0148(0x0004) (Transient)
	float                                              IdleLeanCurrentRatio;                                     // 0x014C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimFaceOff");
		return ptr;
	}

};


// Class OLGame.OLAnimFaceOptimizer
// 0x0043 (0x0180 - 0x013D)
class UOLAnimFaceOptimizer : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	struct FName                                       IgnoredBranchStartName;                                   // 0x0140(0x0008) (Const)
	unsigned long                                      bCanUseOptim : 1;                                         // 0x0148(0x0004) (Transient)
	TArray<unsigned char>                              OptimizedDesiredBones;                                    // 0x014C(0x0010) (Transient, NeedCtorLink)
	TArray<unsigned char>                              IgnoredBonesFull;                                         // 0x015C(0x0010) (Transient, NeedCtorLink)
	TArray<unsigned char>                              IgnoredBonesDesired;                                      // 0x016C(0x0010) (Transient, NeedCtorLink)
	int                                                NumBaseDesiredBones;                                      // 0x017C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimFaceOptimizer");
		return ptr;
	}

};


// Class OLGame.OLAnimFacialBlend
// 0x0008 (0x018C - 0x0184)
class UOLAnimFacialBlend : public UAnimNodeBlendPerBone
{
public:
	class UAnimNodeSlot*                               FacialSlot;                                               // 0x0184(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimFacialBlend");
		return ptr;
	}

};


// Class OLGame.OLAnimFeatheredBlend
// 0x0010 (0x0194 - 0x0184)
class UOLAnimFeatheredBlend : public UAnimNodeBlendPerBone
{
public:
	TArray<struct FFeatheredBlendBone>                 FeatheredBones;                                           // 0x0184(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimFeatheredBlend");
		return ptr;
	}

};


// Class OLGame.OLAnimGenericPoseBlend
// 0x0047 (0x0184 - 0x013D)
class UOLAnimGenericPoseBlend : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	unsigned long                                      bActive : 1;                                              // 0x0140(0x0004) (Transient)
	unsigned long                                      bWorldSpace : 1;                                          // 0x0140(0x0004) (Transient)
	float                                              StartTime;                                                // 0x0144(0x0004) (Transient)
	float                                              BlendDuration;                                            // 0x0148(0x0004) (Transient)
	float                                              BlendWeight;                                              // 0x014C(0x0004) (Transient)
	TArray<struct FBoneAtom>                           FrozenBones;                                              // 0x0150(0x0010) (Transient, NeedCtorLink)
	struct FBoneAtom                                   FrozenHipsWS;                                             // 0x0160(0x0020) (Transient)
	int                                                HipsBoneIdx;                                              // 0x0180(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimGenericPoseBlend");
		return ptr;
	}

};


// Class OLGame.OLAnimHandShielding
// 0x0033 (0x0170 - 0x013D)
class UOLAnimHandShielding : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              HeatMinimumDistance;                                      // 0x0140(0x0004) (Edit)
	float                                              HeatLowDistance;                                          // 0x0144(0x0004) (Edit)
	float                                              HeatHighDistance;                                         // 0x0148(0x0004) (Edit)
	unsigned long                                      bActive : 1;                                              // 0x014C(0x0004) (Transient)
	float                                              HeatStrength;                                             // 0x0150(0x0004) (Transient)
	float                                              HandShieldTypeStrength[0x7];                              // 0x0154(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimHandShielding");
		return ptr;
	}

};


// Class OLGame.OLAnimHeatShielding
// 0x001B (0x0158 - 0x013D)
class UOLAnimHeatShielding : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              MinimumDistance;                                          // 0x0140(0x0004) (Edit)
	float                                              LowDistance;                                              // 0x0144(0x0004) (Edit)
	float                                              HighDistance;                                             // 0x0148(0x0004) (Edit)
	unsigned long                                      bActive : 1;                                              // 0x014C(0x0004) (Transient)
	float                                              HeatShieldingWeight;                                      // 0x0150(0x0004) (Transient)
	float                                              HeatStrength;                                             // 0x0154(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimHeatShielding");
		return ptr;
	}

};


// Class OLGame.OLAnimInventorySelection
// 0x0000 (0x0164 - 0x0164)
class UOLAnimInventorySelection : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimInventorySelection");
		return ptr;
	}

};


// Class OLGame.OLAnimLedgeHang
// 0x0003 (0x0140 - 0x013D)
class UOLAnimLedgeHang : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimLedgeHang");
		return ptr;
	}

};


// Class OLGame.OLAnimLocomotion
// 0x00F7 (0x0234 - 0x013D)
class UOLAnimLocomotion : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	struct FName                                       SyncGroupName;                                            // 0x0140(0x0008) (Edit)
	float                                              SliderPosition;                                           // 0x0148(0x0004) (Const)
	int                                                ActiveChildIdx;                                           // 0x014C(0x0004) (Transient)
	TEnumAsByte<ELocomotionAnimState>                  AnimState;                                                // 0x0150(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0151(0x0003) MISSED OFFSET
	float                                              TransitionBlendTime;                                      // 0x0154(0x0004) (Transient)
	float                                              TargetWeights[0x1C];                                      // 0x0158(0x0004) (Transient)
	struct FAnimTurningData                            Turn;                                                     // 0x01C8(0x001C) (Transient)
	struct FAnimStartingData                           Start;                                                    // 0x01E4(0x0028) (Transient)
	float                                              LastStartActivatedTime;                                   // 0x020C(0x0004) (Transient)
	struct FAnimStoppingData                           Stop;                                                     // 0x0210(0x0024) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimLocomotion");
		return ptr;
	}

};


// Class OLGame.OLAnimLOD
// 0x007F (0x01BC - 0x013D)
class UOLAnimLOD : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	TArray<struct FBoneAtom>                           CachedBones;                                              // 0x0140(0x0010) (Transient, NeedCtorLink)
	TArray<unsigned char>                              PartialDesiredBones;                                      // 0x0150(0x0010) (Transient, NeedCtorLink)
	TArray<unsigned char>                              PartialIgnoredBones;                                      // 0x0160(0x0010) (Transient, NeedCtorLink)
	TArray<unsigned char>                              FullDesiredBones;                                         // 0x0170(0x0010) (Transient, NeedCtorLink)
	TArray<unsigned char>                              FullIgnoredBones;                                         // 0x0180(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      bCanUseLOD : 1;                                           // 0x0190(0x0004) (Transient)
	float                                              LastCacheUpdateTime;                                      // 0x0194(0x0004) (Transient)
	int                                                NumValidUpdates;                                          // 0x0198(0x0004) (Transient)
	TArray<struct FName>                               PartialIgnoredBranches;                                   // 0x019C(0x0010) (Const, NeedCtorLink)
	TArray<struct FName>                               FullIgnoredBranches;                                      // 0x01AC(0x0010) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimLOD");
		return ptr;
	}

};


// Class OLGame.OLAnimMappedSequence
// 0x0001 (0x01A5 - 0x01A4)
class UOLAnimMappedSequence : public UAnimNodeSequence
{
public:
	TEnumAsByte<EAIAnimId>                             AnimId;                                                   // 0x01A4(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimMappedSequence");
		return ptr;
	}


	void SetAnim(const struct FName& Sequence);
};


// Class OLGame.OLAnimMultiCycleConstrainedMovement
// 0x0010 (0x0174 - 0x0164)
class UOLAnimMultiCycleConstrainedMovement : public UAnimNodeBlendList
{
public:
	unsigned long                                      bUpDown : 1;                                              // 0x0164(0x0004) (Edit)
	unsigned long                                      bCompleteCyclesOnly : 1;                                  // 0x0164(0x0004) (Edit)
	unsigned long                                      bCommitMoves : 1;                                         // 0x0164(0x0004) (Edit)
	float                                              SmoothedDelta;                                            // 0x0168(0x0004) (Transient)
	float                                              CurrentRatio;                                             // 0x016C(0x0004) (Transient)
	int                                                CurrentIdx;                                               // 0x0170(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimMultiCycleConstrainedMovement");
		return ptr;
	}

};


// Class OLGame.OLAnimNicAndLaird
// 0x0003 (0x0140 - 0x013D)
class UOLAnimNicAndLaird : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNicAndLaird");
		return ptr;
	}

};


// Class OLGame.OLAnimNodeDelayed
// 0x0010 (0x0174 - 0x0164)
class UOLAnimNodeDelayed : public UAnimNodeBlendList
{
public:
	float                                              TimeDelay;                                                // 0x0164(0x0004) (Edit)
	float                                              BlendTime;                                                // 0x0168(0x0004) (Edit)
	float                                              TraceTimeBeforeUsingDelayed;                              // 0x016C(0x0004) (Edit)
	float                                              ElapsedTime;                                              // 0x0170(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNodeDelayed");
		return ptr;
	}

};


// Class OLGame.OLAnimNodeSlot
// 0x0000 (0x0164 - 0x0164)
class UOLAnimNodeSlot : public UAnimNodeSlot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNodeSlot");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_AkEventAutoStop
// 0x001C (0x0088 - 0x006C)
class UOLAnimNotify_AkEventAutoStop : public UAnimNotify
{
public:
	class UAkEvent*                                    StartEvent;                                               // 0x006C(0x0008) (Edit)
	class UAkEvent*                                    StopEvent;                                                // 0x0074(0x0008) (Edit)
	struct FName                                       BoneName;                                                 // 0x007C(0x0008) (Edit)
	float                                              StopDelay;                                                // 0x0084(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_AkEventAutoStop");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_AttachWeapon
// 0x001C (0x0088 - 0x006C)
class UOLAnimNotify_AttachWeapon : public UAnimNotify
{
public:
	class USkeletalMesh*                               WeaponSkelMesh;                                           // 0x006C(0x0008) (Edit)
	struct FString                                     AttachBoneName;                                           // 0x0074(0x0010) (Edit, NeedCtorLink)
	float                                              Duration;                                                 // 0x0084(0x0004) (EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_AttachWeapon");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_Blur
// 0x0014 (0x0080 - 0x006C)
class UOLAnimNotify_Blur : public UAnimNotify
{
public:
	float                                              Amount;                                                   // 0x006C(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0070(0x0004) (Edit)
	float                                              BlendInTime;                                              // 0x0074(0x0004) (Edit)
	float                                              BlendOutTime;                                             // 0x0078(0x0004) (Edit)
	float                                              Desaturation;                                             // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_Blur");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_Die
// 0x0008 (0x0074 - 0x006C)
class UOLAnimNotify_Die : public UAnimNotify
{
public:
	unsigned long                                      bBloodOnScreen : 1;                                       // 0x006C(0x0004) (Edit)
	unsigned long                                      bBlur : 1;                                                // 0x006C(0x0004) (Edit)
	unsigned long                                      bKillAllSounds : 1;                                       // 0x006C(0x0004) (Edit)
	unsigned long                                      bPlayMusic : 1;                                           // 0x006C(0x0004) (Edit)
	unsigned long                                      bPlayVO : 1;                                              // 0x006C(0x0004) (Edit)
	unsigned long                                      bNoFadeToBlack : 1;                                       // 0x006C(0x0004) (Edit)
	float                                              FadeDuration;                                             // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_Die");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_DisableLookAt
// 0x0004 (0x0070 - 0x006C)
class UOLAnimNotify_DisableLookAt : public UAnimNotify
{
public:
	float                                              Duration;                                                 // 0x006C(0x0004) (EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_DisableLookAt");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_DOF
// 0x0018 (0x0084 - 0x006C)
class UOLAnimNotify_DOF : public UAnimNotify
{
public:
	float                                              Intensity;                                                // 0x006C(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0070(0x0004) (Edit)
	float                                              BlendInTime;                                              // 0x0074(0x0004) (Edit)
	float                                              BlendOutTime;                                             // 0x0078(0x0004) (Edit)
	float                                              FocusDist;                                                // 0x007C(0x0004) (Edit)
	float                                              TransitionDist;                                           // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_DOF");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_Door
// 0x0010 (0x007C - 0x006C)
class UOLAnimNotify_Door : public UAnimNotify
{
public:
	TEnumAsByte<EDoorInteraction>                      Interaction;                                              // 0x006C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	float                                              AngleWhenOpen;                                            // 0x0070(0x0004) (Edit, EditConst)
	unsigned long                                      bUsingInteractBone : 1;                                   // 0x0074(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0078(0x0004) (EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_Door");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_ExecuteJump
// 0x0004 (0x0070 - 0x006C)
class UOLAnimNotify_ExecuteJump : public UAnimNotify
{
public:
	float                                              Duration;                                                 // 0x006C(0x0004) (EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_ExecuteJump");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_Fade
// 0x0010 (0x007C - 0x006C)
class UOLAnimNotify_Fade : public UAnimNotify
{
public:
	unsigned long                                      bFadeIn : 1;                                              // 0x006C(0x0004) (Edit)
	unsigned long                                      bForceStartValue : 1;                                     // 0x006C(0x0004) (Edit)
	float                                              Opacity;                                                  // 0x0070(0x0004) (Edit)
	struct FColor                                      FadeColor;                                                // 0x0074(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_Fade");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_Flashlight
// 0x0008 (0x0074 - 0x006C)
class UOLAnimNotify_Flashlight : public UAnimNotify
{
public:
	unsigned long                                      bHideMesh : 1;                                            // 0x006C(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0070(0x0004) (EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_Flashlight");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_HideWeapon
// 0x0008 (0x0074 - 0x006C)
class UOLAnimNotify_HideWeapon : public UAnimNotify
{
public:
	unsigned long                                      bShowWeapon : 1;                                          // 0x006C(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0070(0x0004) (EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_HideWeapon");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_KillParticleEffect
// 0x0008 (0x0074 - 0x006C)
class UOLAnimNotify_KillParticleEffect : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x006C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_KillParticleEffect");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_LeftHandIK
// 0x001C (0x0088 - 0x006C)
class UOLAnimNotify_LeftHandIK : public UAnimNotify
{
public:
	TEnumAsByte<EIKTargetType>                         TargetType;                                               // 0x006C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	float                                              FadeInTime;                                               // 0x0070(0x0004) (Edit)
	float                                              FadeOutTime;                                              // 0x0074(0x0004) (Edit)
	struct FVector                                     EffectorOffset;                                           // 0x0078(0x000C) (Edit)
	float                                              Duration;                                                 // 0x0084(0x0004) (EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_LeftHandIK");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_Marker
// 0x0000 (0x006C - 0x006C)
class UOLAnimNotify_Marker : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_Marker");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_ModifyPlayrate
// 0x0004 (0x0070 - 0x006C)
class UOLAnimNotify_ModifyPlayrate : public UAnimNotify
{
public:
	float                                              NewRate;                                                  // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_ModifyPlayrate");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_NonFatalDamage
// 0x0008 (0x0074 - 0x006C)
class UOLAnimNotify_NonFatalDamage : public UAnimNotify
{
public:
	int                                                DamageAmount;                                             // 0x006C(0x0004) (Edit)
	unsigned long                                      bBloodParticles : 1;                                      // 0x0070(0x0004) (Edit)
	unsigned long                                      bCameraShake : 1;                                         // 0x0070(0x0004) (Edit)
	unsigned long                                      bBlur : 1;                                                // 0x0070(0x0004) (Edit)
	unsigned long                                      bSoundEffect : 1;                                         // 0x0070(0x0004) (Edit)
	unsigned long                                      bBladeDamageSound : 1;                                    // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_NonFatalDamage");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_OverrideCameraParams
// 0x001D (0x0089 - 0x006C)
class UOLAnimNotify_OverrideCameraParams : public UAnimNotify
{
public:
	unsigned long                                      bResetToDefault : 1;                                      // 0x006C(0x0004) (Edit)
	unsigned long                                      bLocalSpacePlayerControl : 1;                             // 0x006C(0x0004) (Edit)
	unsigned long                                      bMinYaw : 1;                                              // 0x006C(0x0004) (Edit)
	unsigned long                                      bMaxYaw : 1;                                              // 0x006C(0x0004) (Edit)
	unsigned long                                      bMinPitchWS : 1;                                          // 0x006C(0x0004) (Edit)
	unsigned long                                      bMaxPitchWS : 1;                                          // 0x006C(0x0004) (Edit)
	unsigned long                                      bMinPitchCS : 1;                                          // 0x006C(0x0004) (Edit)
	unsigned long                                      bMaxPitchCS : 1;                                          // 0x006C(0x0004) (Edit)
	float                                              MinYaw;                                                   // 0x0070(0x0004) (Edit)
	float                                              MaxYaw;                                                   // 0x0074(0x0004) (Edit)
	float                                              MinPitchWS;                                               // 0x0078(0x0004) (Edit)
	float                                              MaxPitchWS;                                               // 0x007C(0x0004) (Edit)
	float                                              MinPitchCS;                                               // 0x0080(0x0004) (Edit)
	float                                              MaxPitchCS;                                               // 0x0084(0x0004) (Edit)
	TEnumAsByte<ELocomotionMode>                       OverrideLMForNeckOffset;                                  // 0x0088(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_OverrideCameraParams");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_PlayParticleEffect
// 0x0008 (0x00A0 - 0x0098)
class UOLAnimNotify_PlayParticleEffect : public UAnimNotify_PlayParticleEffect
{
public:
	struct FName                                       GroupName;                                                // 0x0098(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_PlayParticleEffect");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_PlayWeaponAnimation
// 0x0000 (0x006C - 0x006C)
class UOLAnimNotify_PlayWeaponAnimation : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_PlayWeaponAnimation");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_ProceduralAdjust
// 0x0004 (0x0070 - 0x006C)
class UOLAnimNotify_ProceduralAdjust : public UAnimNotify
{
public:
	float                                              Duration;                                                 // 0x006C(0x0004) (EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_ProceduralAdjust");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_PropAttachment
// 0x0028 (0x0094 - 0x006C)
class UOLAnimNotify_PropAttachment : public UAnimNotify
{
public:
	unsigned long                                      bHideWhenDone : 1;                                        // 0x006C(0x0004) (Edit)
	unsigned long                                      bDiscardOffsets : 1;                                      // 0x006C(0x0004) (Edit)
	float                                              BlendInTime;                                              // 0x0070(0x0004) (Edit)
	float                                              BlendOutTime;                                             // 0x0074(0x0004) (Edit)
	struct FVector                                     PositionOffset;                                           // 0x0078(0x000C)
	struct FRotator                                    OrientationOffset;                                        // 0x0084(0x000C)
	float                                              Duration;                                                 // 0x0090(0x0004) (EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_PropAttachment");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_Pulse
// 0x000C (0x0078 - 0x006C)
class UOLAnimNotify_Pulse : public UAnimNotify
{
public:
	float                                              Strength;                                                 // 0x006C(0x0004) (Edit)
	float                                              StartTime;                                                // 0x0070(0x0004)
	float                                              Duration;                                                 // 0x0074(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_Pulse");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_SetDynamicData
// 0x0028 (0x0094 - 0x006C)
class UOLAnimNotify_SetDynamicData : public UAnimNotify
{
public:
	unsigned long                                      bSetX : 1;                                                // 0x006C(0x0004) (Edit)
	unsigned long                                      bSetY : 1;                                                // 0x006C(0x0004) (Edit)
	unsigned long                                      bSetZ : 1;                                                // 0x006C(0x0004) (Edit)
	unsigned long                                      bSetW : 1;                                                // 0x006C(0x0004) (Edit)
	float                                              X;                                                        // 0x0070(0x0004) (Edit)
	float                                              Y;                                                        // 0x0074(0x0004) (Edit)
	float                                              Z;                                                        // 0x0078(0x0004) (Edit)
	float                                              W;                                                        // 0x007C(0x0004) (Edit)
	float                                              Time;                                                     // 0x0080(0x0004) (Transient)
	struct FLinearColor                                InitialData;                                              // 0x0084(0x0010) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_SetDynamicData");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_ShoulderIK
// 0x000C (0x0078 - 0x006C)
class UOLAnimNotify_ShoulderIK : public UAnimNotify
{
public:
	float                                              BlendInTime;                                              // 0x006C(0x0004) (Edit)
	float                                              BlendOutTime;                                             // 0x0070(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0074(0x0004) (EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_ShoulderIK");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_StartMarker
// 0x0008 (0x0074 - 0x006C)
class UOLAnimNotify_StartMarker : public UAnimNotify
{
public:
	unsigned long                                      bOffPhase : 1;                                            // 0x006C(0x0004) (Edit)
	float                                              CycleLeft;                                                // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_StartMarker");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_StopMarker
// 0x0008 (0x0074 - 0x006C)
class UOLAnimNotify_StopMarker : public UAnimNotify
{
public:
	float                                              StartPhase;                                               // 0x006C(0x0004) (Edit)
	float                                              DistTravelled;                                            // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_StopMarker");
		return ptr;
	}

};


// Class OLGame.OLAnimNotify_WeaponAttachPoint
// 0x0008 (0x0074 - 0x006C)
class UOLAnimNotify_WeaponAttachPoint : public UAnimNotify
{
public:
	unsigned long                                      bAttachToBone : 1;                                        // 0x006C(0x0004) (Edit)
	unsigned long                                      bDetachFromPawn : 1;                                      // 0x006C(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0070(0x0004) (EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimNotify_WeaponAttachPoint");
		return ptr;
	}

};


// Class OLGame.OLAnimPairedWalk
// 0x002F (0x016C - 0x013D)
class UOLAnimPairedWalk : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              BlendInIdleMaxSpeedPct;                                   // 0x0140(0x0004) (Edit)
	unsigned long                                      bTimescaleDiagonals : 1;                                  // 0x0144(0x0004) (Edit)
	unsigned long                                      bReversingBackward : 1;                                   // 0x0144(0x0004) (Transient)
	unsigned long                                      bForwardOnly : 1;                                         // 0x0144(0x0004) (Transient)
	unsigned long                                      bAltAnim : 1;                                             // 0x0144(0x0004) (Transient)
	unsigned long                                      bPregLynn : 1;                                            // 0x0144(0x0004) (Transient)
	unsigned long                                      bPregLynnWithCam : 1;                                     // 0x0144(0x0004) (Transient)
	unsigned long                                      bDelayedSetPregLynnAnims : 1;                             // 0x0144(0x0004) (Transient)
	float                                              AnimatedWalkSpeed;                                        // 0x0148(0x0004)
	float                                              AnimatedRunSpeed;                                         // 0x014C(0x0004)
	float                                              AnimatedStrafeSpeed;                                      // 0x0150(0x0004)
	float                                              AltSwitchTime;                                            // 0x0154(0x0004) (Transient)
	class UOLAnimPairedWalk*                           MasterNode;                                               // 0x0158(0x0008) (Transient)
	TEnumAsByte<EPairedWalkAnimStyle>                  AltAnimStyle;                                             // 0x0160(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0161(0x0003) MISSED OFFSET
	float                                              AltBlendDuration;                                         // 0x0164(0x0004) (Transient)
	float                                              LastPregLynnAnimSwitchTime;                               // 0x0168(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimPairedWalk");
		return ptr;
	}

};


// Class OLGame.OLAnimParrying
// 0x002B (0x0168 - 0x013D)
class UOLAnimParrying : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              MinimumDistance;                                          // 0x0140(0x0004) (Edit)
	float                                              LowDistance;                                              // 0x0144(0x0004) (Edit)
	float                                              HighDistance;                                             // 0x0148(0x0004) (Edit)
	float                                              AngleRange;                                               // 0x014C(0x0004) (Edit)
	unsigned long                                      bActive : 1;                                              // 0x0150(0x0004) (Transient)
	float                                              EnemyDistance;                                            // 0x0154(0x0004) (Transient)
	float                                              EnemyRelYaw;                                              // 0x0158(0x0004) (Transient)
	float                                              ParryWeight;                                              // 0x015C(0x0004) (Transient)
	float                                              ParryStrength;                                            // 0x0160(0x0004) (Transient)
	float                                              ParryAngleRatio;                                          // 0x0164(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimParrying");
		return ptr;
	}

};


// Class OLGame.OLAnimPeeking
// 0x002F (0x016C - 0x013D)
class UOLAnimPeeking : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	int                                                ActiveChildIdx;                                           // 0x0140(0x0004) (Transient)
	float                                              CurrentRatio;                                             // 0x0144(0x0004) (Transient)
	float                                              TargetRatio;                                              // 0x0148(0x0004) (Transient)
	TArray<struct FQuat>                               CornerToHandQuats;                                        // 0x014C(0x0010) (Edit, NeedCtorLink)
	TArray<struct FVector>                             CornerToHandVecs;                                         // 0x015C(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimPeeking");
		return ptr;
	}

};


// Class OLGame.OLAnimPoseFreeze
// 0x0053 (0x0190 - 0x013D)
class UOLAnimPoseFreeze : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              DeformDist;                                               // 0x0140(0x0004) (Transient)
	float                                              ShakeDist;                                                // 0x0144(0x0004) (Transient)
	unsigned long                                      bActive : 1;                                              // 0x0148(0x0004) (Transient)
	struct FVector                                     BaseLocation;                                             // 0x014C(0x000C) (Transient)
	float                                              StartTime;                                                // 0x0158(0x0004) (Transient)
	float                                              GlitchDuration;                                           // 0x015C(0x0004) (Transient)
	TArray<struct FBoneAtom>                           CachedBones;                                              // 0x0160(0x0010) (Transient, NeedCtorLink)
	struct FBoneAtom                                   CachedLTW;                                                // 0x0170(0x0020) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimPoseFreeze");
		return ptr;
	}

};


// Class OLGame.OLAnimPoseKeeper
// 0x001B (0x0158 - 0x013D)
class UOLAnimPoseKeeper : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	unsigned long                                      bActive : 1;                                              // 0x0140(0x0004) (Transient)
	unsigned long                                      bValidBones : 1;                                          // 0x0140(0x0004) (Transient)
	float                                              EndTime;                                                  // 0x0144(0x0004) (Transient)
	TArray<struct FBoneAtom>                           CachedBones;                                              // 0x0148(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimPoseKeeper");
		return ptr;
	}

};


// Class OLGame.OLAnimPoseReplicator
// 0x0023 (0x0160 - 0x013D)
class UOLAnimPoseReplicator : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	unsigned long                                      bSlave : 1;                                               // 0x0140(0x0004) (Transient)
	class UOLAnimPoseReplicator*                       MasterNode;                                               // 0x0144(0x0008) (Transient)
	TArray<struct FBoneAtom>                           SavedBones;                                               // 0x014C(0x0010) (Transient, NeedCtorLink)
	int                                                SavedBonesTickCount;                                      // 0x015C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimPoseReplicator");
		return ptr;
	}

};


// Class OLGame.OLAnimPushing
// 0x0007 (0x0144 - 0x013D)
class UOLAnimPushing : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              PushRatio;                                                // 0x0140(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimPushing");
		return ptr;
	}

};


// Class OLGame.OLAnimRandomCycle
// 0x001C (0x0180 - 0x0164)
class UOLAnimRandomCycle : public UAnimNodeBlendList
{
public:
	float                                              DefaultCycleBiasWalking;                                  // 0x0164(0x0004) (Edit)
	float                                              DefaultCycleBiasRunning;                                  // 0x0168(0x0004) (Edit)
	float                                              BlendTime;                                                // 0x016C(0x0004) (Edit)
	float                                              NextCycleCheckTime;                                       // 0x0170(0x0004) (Transient)
	unsigned long                                      bIsMaster : 1;                                            // 0x0174(0x0004) (Transient)
	class UOLAnimRandomCycle*                          ShadowNode;                                               // 0x0178(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimRandomCycle");
		return ptr;
	}

};


// Class OLGame.OLAnimRelativeBranch
// 0x0010 (0x0194 - 0x0184)
class UOLAnimRelativeBranch : public UAnimNodeBlendPerBone
{
public:
	TArray<struct FBranchRelativeBone>                 BranchRelativeBones;                                      // 0x0184(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimRelativeBranch");
		return ptr;
	}

};


// Class OLGame.OLAnimRiver
// 0x0058 (0x01BC - 0x0164)
class UOLAnimRiver : public UAnimNodeBlendList
{
public:
	unsigned long                                      bRowedRightLast : 1;                                      // 0x0164(0x0004) (Transient)
	float                                              IdleDuration;                                             // 0x0168(0x0004) (Transient)
	struct FRowingAnimData                             RowingAnim[0x4];                                          // 0x016C(0x0014)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimRiver");
		return ptr;
	}

};


// Class OLGame.OLAnimScrubbable
// 0x0000 (0x01A4 - 0x01A4)
class UOLAnimScrubbable : public UAnimNodeSequence
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimScrubbable");
		return ptr;
	}

};


// Class OLGame.OLAnimScrubbableBlend
// 0x0007 (0x0144 - 0x013D)
class UOLAnimScrubbableBlend : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              BlendAlpha;                                               // 0x0140(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimScrubbableBlend");
		return ptr;
	}

};


// Class OLGame.OLAnimSelectByAILocoMode
// 0x0010 (0x0174 - 0x0164)
class UOLAnimSelectByAILocoMode : public UAnimNodeBlendList
{
public:
	TArray<float>                                      ChildBlendTimes;                                          // 0x0164(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimSelectByAILocoMode");
		return ptr;
	}

};


// Class OLGame.OLAnimSelectByCamcorder
// 0x0000 (0x0164 - 0x0164)
class UOLAnimSelectByCamcorder : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimSelectByCamcorder");
		return ptr;
	}

};


// Class OLGame.OLAnimSelectByEnemyType
// 0x0007 (0x0144 - 0x013D)
class UOLAnimSelectByEnemyType : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	int                                                ChildIdx;                                                 // 0x0140(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimSelectByEnemyType");
		return ptr;
	}

};


// Class OLGame.OLAnimSelectByFallType
// 0x0000 (0x0164 - 0x0164)
class UOLAnimSelectByFallType : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimSelectByFallType");
		return ptr;
	}

};


// Class OLGame.OLAnimSelectByGameplayItemShape
// 0x0000 (0x0164 - 0x0164)
class UOLAnimSelectByGameplayItemShape : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimSelectByGameplayItemShape");
		return ptr;
	}

};


// Class OLGame.OLAnimSelectByPhysicsVolume
// 0x0000 (0x0164 - 0x0164)
class UOLAnimSelectByPhysicsVolume : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimSelectByPhysicsVolume");
		return ptr;
	}

};


// Class OLGame.OLAnimSelectByShadowProxy
// 0x0000 (0x0164 - 0x0164)
class UOLAnimSelectByShadowProxy : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimSelectByShadowProxy");
		return ptr;
	}

};


// Class OLGame.OLAnimSelectBySpecificEnemyType
// 0x0017 (0x0154 - 0x013D)
class UOLAnimSelectBySpecificEnemyType : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	int                                                ChildIdx;                                                 // 0x0140(0x0004) (Transient)
	TArray<TEnumAsByte<EnemyType>>                     SpecificTypes;                                            // 0x0144(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimSelectBySpecificEnemyType");
		return ptr;
	}

};


// Class OLGame.OLAnimSelectByStairsDirection
// 0x0000 (0x0164 - 0x0164)
class UOLAnimSelectByStairsDirection : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimSelectByStairsDirection");
		return ptr;
	}

};


// Class OLGame.OLAnimSelectByWalkingStyle
// 0x0000 (0x0164 - 0x0164)
class UOLAnimSelectByWalkingStyle : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimSelectByWalkingStyle");
		return ptr;
	}

};


// Class OLGame.OLAnimSelectByWaterDepth
// 0x0000 (0x0164 - 0x0164)
class UOLAnimSelectByWaterDepth : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimSelectByWaterDepth");
		return ptr;
	}

};


// Class OLGame.OLAnimSlidingSlope
// 0x0000 (0x0164 - 0x0164)
class UOLAnimSlidingSlope : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimSlidingSlope");
		return ptr;
	}

};


// Class OLGame.OLAnimSmartIdle
// 0x004F (0x018C - 0x013D)
class UOLAnimSmartIdle : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	unsigned long                                      bModifyPlayrateIdle : 1;                                  // 0x0140(0x0004) (Edit)
	float                                              IdleMinRate;                                              // 0x0144(0x0004) (Edit)
	float                                              IdleMaxRate;                                              // 0x0148(0x0004) (Edit)
	float                                              IdleRateMinDuration;                                      // 0x014C(0x0004) (Edit)
	float                                              IdleRateMaxDuration;                                      // 0x0150(0x0004) (Edit)
	float                                              IdleRateTransitionSpeed;                                  // 0x0154(0x0004) (Edit)
	float                                              IdleBias;                                                 // 0x0158(0x0004) (Edit)
	float                                              BreakerMaxWeight;                                         // 0x015C(0x0004) (Edit)
	float                                              BreakerMinDuration;                                       // 0x0160(0x0004) (Edit)
	float                                              BreakerMaxDuration;                                       // 0x0164(0x0004) (Edit)
	float                                              MinBreakerWeightTransitionSpeed;                          // 0x0168(0x0004) (Edit)
	float                                              MaxBreakerWeightTransitionSpeed;                          // 0x016C(0x0004) (Edit)
	float                                              CurrentIdleRate;                                          // 0x0170(0x0004) (Transient)
	float                                              TargetIdleRate;                                           // 0x0174(0x0004) (Transient)
	float                                              NextIdleRateTransition;                                   // 0x0178(0x0004) (Transient)
	float                                              CurrentBreakerWeight;                                     // 0x017C(0x0004) (Transient)
	float                                              TargetBreakerWeight;                                      // 0x0180(0x0004) (Transient)
	float                                              BreakerWeightTransitionSpeed;                             // 0x0184(0x0004) (Transient)
	float                                              NextBreakerWeightTransition;                              // 0x0188(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimSmartIdle");
		return ptr;
	}

};


// Class OLGame.OLAnimStruggleCycle
// 0x0000 (0x01A4 - 0x01A4)
class UOLAnimStruggleCycle : public UAnimNodeSequence
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimStruggleCycle");
		return ptr;
	}

};


// Class OLGame.OLAnimTurnOnSpot
// 0x000C (0x0170 - 0x0164)
class UOLAnimTurnOnSpot : public UAnimNodeBlendList
{
public:
	unsigned long                                      bWaitForFullWeightBeforeActivation : 1;                   // 0x0164(0x0004) (Edit)
	unsigned long                                      bInitialized : 1;                                         // 0x0164(0x0004) (Transient)
	float                                              TurnToIdleBlendTime;                                      // 0x0168(0x0004) (Edit)
	float                                              CurrentFeetHeading;                                       // 0x016C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimTurnOnSpot");
		return ptr;
	}

};


// Class OLGame.OLAnimWardrobe
// 0x002B (0x0168 - 0x013D)
class UOLAnimWardrobe : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	int                                                CurrentAnimIdx;                                           // 0x0140(0x0004) (Transient)
	int                                                DesiredAnimIdx;                                           // 0x0144(0x0004) (Transient)
	float                                              TransitionDuration;                                       // 0x0148(0x0004) (Transient)
	float                                              TransitionTimeLeft;                                       // 0x014C(0x0004) (Transient)
	float                                              InitialRatio;                                             // 0x0150(0x0004)
	float                                              CurrentRatio;                                             // 0x0154(0x0004) (Transient)
	float                                              SmoothedDelta;                                            // 0x0158(0x0004) (Transient)
	float                                              PlayRate;                                                 // 0x015C(0x0004) (Edit)
	unsigned long                                      AutoPlay : 1;                                             // 0x0160(0x0004)
	float                                              PeekingAnimStartTime;                                     // 0x0164(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAnimWardrobe");
		return ptr;
	}

};


// Class OLGame.OLSkelControl_GameTime
// 0x0005 (0x0131 - 0x012C)
class UOLSkelControl_GameTime : public USkelControlSingleBone
{
public:
	unsigned long                                      bDriveYaw : 1;                                            // 0x012C(0x0004) (Edit)
	TEnumAsByte<EGameTimeHand>                         ClockHand;                                                // 0x0130(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSkelControl_GameTime");
		return ptr;
	}

};


// Class OLGame.OLSkelControl_Handle
// 0x0000 (0x012C - 0x012C)
class UOLSkelControl_Handle : public USkelControlSingleBone
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSkelControl_Handle");
		return ptr;
	}

};


// Class OLGame.OLSkelControl_Hinge
// 0x0000 (0x012C - 0x012C)
class UOLSkelControl_Hinge : public USkelControlSingleBone
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSkelControl_Hinge");
		return ptr;
	}

};


// Class OLGame.OLAISequenceAction
// 0x0000 (0x0158 - 0x0158)
class UOLAISequenceAction : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLAISequenceAction");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Achievement
// 0x0001 (0x0159 - 0x0158)
class UOLSeqAct_Achievement : public USequenceAction
{
public:
	TEnumAsByte<EOutlastAchievement>                   achievement;                                              // 0x0158(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Achievement");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AdjustToFloor
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_AdjustToFloor : public USequenceAction
{
public:
	float                                              Duration;                                                 // 0x0158(0x0004) (Edit)
	float                                              HeightOffset;                                             // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AdjustToFloor");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AdrenalineBoost
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_AdrenalineBoost : public USequenceAction
{
public:
	float                                              Duration;                                                 // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AdrenalineBoost");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIAddToGroup
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_AIAddToGroup : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIAddToGroup");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIAmbiantAntiLook
// 0x0044 (0x01B8 - 0x0174)
class UOLSeqAct_AIAmbiantAntiLook : public USeqAct_Latent
{
public:
	struct FName                                       InactiveAnimName;                                         // 0x0174(0x0008) (Edit)
	struct FName                                       LeftAnimName;                                             // 0x017C(0x0008) (Edit)
	struct FName                                       RightAnimName;                                            // 0x0184(0x0008) (Edit)
	float                                              MinAngleToPlayer;                                         // 0x018C(0x0004) (Edit)
	float                                              ActivationDistance;                                       // 0x0190(0x0004) (Edit)
	float                                              DeactivationDistance;                                     // 0x0194(0x0004) (Edit)
	float                                              TooCloseDistance;                                         // 0x0198(0x0004) (Edit)
	unsigned long                                      bWaitForExplicitActivation : 1;                           // 0x019C(0x0004) (Edit)
	unsigned long                                      bExitOnPlayerOutOfRange : 1;                              // 0x019C(0x0004) (Edit)
	unsigned long                                      bActivateOnlyOnce : 1;                                    // 0x019C(0x0004) (Edit)
	unsigned long                                      bAttackIfTooClose : 1;                                    // 0x019C(0x0004) (Edit)
	unsigned long                                      bDisableCollision : 1;                                    // 0x019C(0x0004) (Edit)
	unsigned long                                      bDisablePhysics : 1;                                      // 0x019C(0x0004) (Edit)
	unsigned long                                      bDisableRootMotion : 1;                                   // 0x019C(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x019C(0x0004) (Transient)
	unsigned long                                      bPendingActivatedEvent : 1;                               // 0x019C(0x0004) (Transient)
	float                                              ActivateBlendInTime;                                      // 0x01A0(0x0004) (Edit)
	float                                              AngleSwitchBlendTime;                                     // 0x01A4(0x0004) (Edit)
	float                                              StageMarkBlendTime;                                       // 0x01A8(0x0004) (Edit)
	int                                                PendingExitInput;                                         // 0x01AC(0x0004) (Transient)
	class AActor*                                      TargetActor;                                              // 0x01B0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIAmbiantAntiLook");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIAmbiantLooking
// 0x0070 (0x01E4 - 0x0174)
class UOLSeqAct_AIAmbiantLooking : public USeqAct_Latent
{
public:
	struct FName                                       StartAnimName;                                            // 0x0174(0x0008) (Edit)
	struct FName                                       ExitAnimName;                                             // 0x017C(0x0008) (Edit)
	struct FName                                       LeftAnimName;                                             // 0x0184(0x0008) (Edit)
	struct FName                                       CenterAnimName;                                           // 0x018C(0x0008) (Edit)
	struct FName                                       RightAnimName;                                            // 0x0194(0x0008) (Edit)
	float                                              LeftAngle;                                                // 0x019C(0x0004) (Edit)
	float                                              CenterAngle;                                              // 0x01A0(0x0004) (Edit)
	float                                              RightAngle;                                               // 0x01A4(0x0004) (Edit)
	float                                              ActivationDistance;                                       // 0x01A8(0x0004) (Edit)
	float                                              DeactivationDistance;                                     // 0x01AC(0x0004) (Edit)
	float                                              TooCloseDistance;                                         // 0x01B0(0x0004) (Edit)
	unsigned long                                      bLooping : 1;                                             // 0x01B4(0x0004) (Edit)
	unsigned long                                      bWaitForExplicitActivation : 1;                           // 0x01B4(0x0004) (Edit)
	unsigned long                                      bExitOnPlayerOutOfRange : 1;                              // 0x01B4(0x0004) (Edit)
	unsigned long                                      bAttackIfTooCloseWhenActive : 1;                          // 0x01B4(0x0004) (Edit)
	unsigned long                                      bAttackIfTooCloseWhenDone : 1;                            // 0x01B4(0x0004) (Edit)
	unsigned long                                      bDisableCollision : 1;                                    // 0x01B4(0x0004) (Edit)
	unsigned long                                      bDisablePhysics : 1;                                      // 0x01B4(0x0004) (Edit)
	unsigned long                                      bDisableRootMotion : 1;                                   // 0x01B4(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x01B4(0x0004) (Transient)
	unsigned long                                      bPendingActivatedEvent : 1;                               // 0x01B4(0x0004) (Transient)
	int                                                MaxActivationCount;                                       // 0x01B8(0x0004) (Edit)
	float                                              MinDelayBeforeReactivate;                                 // 0x01BC(0x0004) (Edit)
	float                                              ActivateBlendInTime;                                      // 0x01C0(0x0004) (Edit)
	float                                              ExitBlendInTime;                                          // 0x01C4(0x0004) (Edit)
	float                                              StageMarkBlendTime;                                       // 0x01C8(0x0004) (Edit)
	float                                              AngleApproachCoeff;                                       // 0x01CC(0x0004) (Edit)
	int                                                ActivationCount;                                          // 0x01D0(0x0004) (Transient)
	float                                              LastExitedTime;                                           // 0x01D4(0x0004) (Transient)
	int                                                PendingExitInput;                                         // 0x01D8(0x0004) (Transient)
	class AActor*                                      TargetActor;                                              // 0x01DC(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIAmbiantLooking");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIAmbush
// 0x0020 (0x0194 - 0x0174)
class UOLSeqAct_AIAmbush : public USeqAct_Latent
{
public:
	float                                              DistanceBuffer;                                           // 0x0174(0x0004) (Edit)
	unsigned long                                      bOverride_Speed : 1;                                      // 0x0178(0x0004)
	unsigned long                                      bRunning : 1;                                             // 0x0178(0x0004) (Transient)
	float                                              Speed;                                                    // 0x017C(0x0004) (Edit)
	TEnumAsByte<EBotDestSelectionHeuristic>            PointSelectionMethod;                                     // 0x0180(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0181(0x0003) MISSED OFFSET
	TArray<class AOLAmbushMarker*>                     AmbushPoints;                                             // 0x0184(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIAmbush");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIBeam
// 0x0018 (0x018C - 0x0174)
class UOLSeqAct_AIBeam : public USeqAct_Latent
{
public:
	unsigned long                                      bPreciseDest : 1;                                         // 0x0174(0x0004) (Edit)
	unsigned long                                      bOverride_Speed : 1;                                      // 0x0174(0x0004)
	unsigned long                                      bRunning : 1;                                             // 0x0174(0x0004) (Transient)
	float                                              GotoSpeed;                                                // 0x0178(0x0004) (Edit)
	class AOLBeamMarker*                               EntryMarker;                                              // 0x017C(0x0008) (Transient)
	class AActor*                                      DestPointActor;                                           // 0x0184(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIBeam");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AICloseDoor
// 0x0010 (0x0184 - 0x0174)
class UOLSeqAct_AICloseDoor : public USeqAct_Latent
{
public:
	unsigned long                                      bOverride_Speed : 1;                                      // 0x0174(0x0004)
	unsigned long                                      bRunning : 1;                                             // 0x0174(0x0004) (Transient)
	float                                              MoveSpeed;                                                // 0x0178(0x0004) (Edit)
	class AOLDoor*                                     TheDoor;                                                  // 0x017C(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AICloseDoor");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AICondition
// 0x001C (0x0190 - 0x0174)
class UOLSeqAct_AICondition : public USeqAct_Latent
{
public:
	TArray<class UOLBotCondition*>                     Conditions;                                               // 0x0174(0x0010) (Edit, NeedCtorLink, EditInline)
	float                                              ActivationDelay;                                          // 0x0184(0x0004) (Edit)
	float                                              ConditionsSatisfiedTime;                                  // 0x0188(0x0004) (Transient)
	unsigned long                                      bWaitingForFulfillment : 1;                               // 0x018C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AICondition");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_AIContinuousSound
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_AIContinuousSound : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIContinuousSound");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIDisbandGroup
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_AIDisbandGroup : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIDisbandGroup");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIEquipFlashlight
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_AIEquipFlashlight : public USequenceAction
{
public:
	unsigned long                                      bImmediate : 1;                                           // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIEquipFlashlight");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIEquipWeapon
// 0x0005 (0x015D - 0x0158)
class UOLSeqAct_AIEquipWeapon : public USequenceAction
{
public:
	unsigned long                                      bImmediate : 1;                                           // 0x0158(0x0004) (Edit)
	TEnumAsByte<EWeapon>                               WeaponOverride;                                           // 0x015C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIEquipWeapon");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIFollowActor
// 0x001C (0x0190 - 0x0174)
class UOLSeqAct_AIFollowActor : public USeqAct_Latent
{
public:
	class AActor*                                      MovingTarget;                                             // 0x0174(0x0008) (Edit)
	float                                              FollowDistance;                                           // 0x017C(0x0004) (Edit)
	float                                              BufferZone;                                               // 0x0180(0x0004) (Edit)
	unsigned long                                      bOnlyFollowToLastSeenPosition : 1;                        // 0x0184(0x0004) (Edit)
	unsigned long                                      bOverride_Speed : 1;                                      // 0x0184(0x0004)
	unsigned long                                      bForceUnawareStyle : 1;                                   // 0x0184(0x0004) (Edit)
	unsigned long                                      bForceAlertStyle : 1;                                     // 0x0184(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x0184(0x0004) (Transient)
	float                                              LocationApproachRate;                                     // 0x0188(0x0004) (Edit)
	float                                              Speed;                                                    // 0x018C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIFollowActor");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIFollowGround
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_AIFollowGround : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIFollowGround");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIForceChase
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_AIForceChase : public USequenceAction
{
public:
	float                                              MinDuration;                                              // 0x0158(0x0004) (Edit)
	unsigned long                                      bCanLoseSightAfterChasing : 1;                            // 0x015C(0x0004) (Edit)
	unsigned long                                      bNoReaction : 1;                                          // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIForceChase");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIForceCrawl
// 0x0004 (0x0178 - 0x0174)
class UOLSeqAct_AIForceCrawl : public USeqAct_Latent
{
public:
	unsigned long                                      bWasForcedChase : 1;                                      // 0x0174(0x0004) (Transient)
	unsigned long                                      bRunning : 1;                                             // 0x0174(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIForceCrawl");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_AIFormGroup
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_AIFormGroup : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIFormGroup");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIFreezePose
// 0x001C (0x0174 - 0x0158)
class UOLSeqAct_AIFreezePose : public USequenceAction
{
public:
	float                                              GlitchDurationMin;                                        // 0x0158(0x0004) (Edit)
	float                                              GlitchDurationMax;                                        // 0x015C(0x0004) (Edit)
	float                                              GlitchIntervalMin;                                        // 0x0160(0x0004) (Edit)
	float                                              GlitchIntervalMax;                                        // 0x0164(0x0004) (Edit)
	int                                                NumberOfGlitches;                                         // 0x0168(0x0004) (Edit)
	float                                              DeformDist;                                               // 0x016C(0x0004) (Edit)
	float                                              ShakeDist;                                                // 0x0170(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIFreezePose");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIGotoPoint
// 0x0014 (0x0188 - 0x0174)
class UOLSeqAct_AIGotoPoint : public USeqAct_Latent
{
public:
	class AActor*                                      Point;                                                    // 0x0174(0x0008)
	unsigned long                                      bTurnToRotation : 1;                                      // 0x017C(0x0004) (Edit)
	unsigned long                                      bPreciseDestination : 1;                                  // 0x017C(0x0004) (Edit)
	unsigned long                                      bForced : 1;                                              // 0x017C(0x0004) (Edit)
	unsigned long                                      bOverride_Speed : 1;                                      // 0x017C(0x0004)
	unsigned long                                      bInstantAccel : 1;                                        // 0x017C(0x0004) (Edit)
	unsigned long                                      bInstantDecel : 1;                                        // 0x017C(0x0004) (Edit)
	unsigned long                                      bForceUnawareStyle : 1;                                   // 0x017C(0x0004) (Edit)
	unsigned long                                      bForceAlertStyle : 1;                                     // 0x017C(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x017C(0x0004) (Transient)
	float                                              DistanceBuffer;                                           // 0x0180(0x0004) (Edit)
	float                                              Speed;                                                    // 0x0184(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIGotoPoint");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_AITestLoco
// 0x0034 (0x01BC - 0x0188)
class UOLSeqAct_AITestLoco : public UOLSeqAct_AIGotoPoint
{
public:
	float                                              MoveDuration;                                             // 0x0188(0x0004) (Edit)
	float                                              TotalMoveTime;                                            // 0x018C(0x0004) (Edit)
	float                                              AngleIncrement;                                           // 0x0190(0x0004) (Edit)
	class AOLBot*                                      Bot;                                                      // 0x0194(0x0008)
	struct FVector                                     BaseLoc;                                                  // 0x019C(0x000C)
	struct FRotator                                    BaseRot;                                                  // 0x01A8(0x000C)
	float                                              CurAngle;                                                 // 0x01B4(0x0004) (Transient)
	float                                              StartedTime;                                              // 0x01B8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AITestLoco");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIGroupMove
// 0x0018 (0x018C - 0x0174)
class UOLSeqAct_AIGroupMove : public USeqAct_Latent
{
public:
	unsigned long                                      bOverride_Speed : 1;                                      // 0x0174(0x0004)
	unsigned long                                      bSideBySideLeaderOnLeft : 1;                              // 0x0174(0x0004) (Edit)
	unsigned long                                      bNodeActive : 1;                                          // 0x0174(0x0004) (Transient)
	float                                              Speed;                                                    // 0x0178(0x0004) (Edit)
	float                                              TargetDistToPoint;                                        // 0x017C(0x0004) (Edit)
	TEnumAsByte<EGroupFormation>                       FormationStyle;                                           // 0x0180(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0181(0x0003) MISSED OFFSET
	float                                              FormationSpacing;                                         // 0x0184(0x0004) (Edit)
	float                                              FormationPathingDist;                                     // 0x0188(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIGroupMove");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIGuard
// 0x0048 (0x01BC - 0x0174)
class UOLSeqAct_AIGuard : public USeqAct_Latent
{
public:
	struct FName                                       RelaxedAnimName;                                          // 0x0174(0x0008) (Edit)
	struct FName                                       AlertAnimName;                                            // 0x017C(0x0008) (Edit)
	struct FName                                       AlertLeftAnimName;                                        // 0x0184(0x0008) (Edit)
	struct FName                                       AlertRightAnimName;                                       // 0x018C(0x0008) (Edit)
	float                                              SideAngleRange;                                           // 0x0194(0x0004) (Edit)
	unsigned long                                      bLookAtWhenRelaxed : 1;                                   // 0x0198(0x0004) (Edit)
	unsigned long                                      bLookAtWhenAlert : 1;                                     // 0x0198(0x0004) (Edit)
	unsigned long                                      bDisableCollision : 1;                                    // 0x0198(0x0004) (Edit)
	unsigned long                                      bDisablePhysics : 1;                                      // 0x0198(0x0004) (Edit)
	unsigned long                                      bDisableRootMotion : 1;                                   // 0x0198(0x0004) (Edit)
	unsigned long                                      bCreateNavmeshObstacle : 1;                               // 0x0198(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x0198(0x0004) (Transient)
	unsigned long                                      bDirectionalAlert : 1;                                    // 0x0198(0x0004) (Transient)
	TEnumAsByte<EGuardAttackType>                      AttackType;                                               // 0x019C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x019D(0x0003) MISSED OFFSET
	float                                              KnockbackPower;                                           // 0x01A0(0x0004) (Edit)
	float                                              AlertDistance;                                            // 0x01A4(0x0004) (Edit)
	float                                              RelaxedDistance;                                          // 0x01A8(0x0004) (Edit)
	float                                              AttackDistance;                                           // 0x01AC(0x0004) (Edit)
	float                                              StageMarkBlendTime;                                       // 0x01B0(0x0004) (Edit)
	float                                              AngleApproachCoeff;                                       // 0x01B4(0x0004) (Edit)
	float                                              CollisionSize;                                            // 0x01B8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIGuard");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIInvestigatePoint
// 0x0008 (0x017C - 0x0174)
class UOLSeqAct_AIInvestigatePoint : public USeqAct_Latent
{
public:
	TEnumAsByte<EScriptedInvestigationType>            Type;                                                     // 0x0174(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0175(0x0003) MISSED OFFSET
	unsigned long                                      bResumable : 1;                                           // 0x0178(0x0004) (Edit)
	unsigned long                                      bLowPriority : 1;                                         // 0x0178(0x0004) (Edit)
	unsigned long                                      bForceUnawareStyle : 1;                                   // 0x0178(0x0004) (Edit)
	unsigned long                                      bForceAlertStyle : 1;                                     // 0x0178(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x0178(0x0004) (Transient)
	unsigned long                                      bExplicitelyCancelled : 1;                                // 0x0178(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIInvestigatePoint");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_AIJump
// 0x0010 (0x0184 - 0x0174)
class UOLSeqAct_AIJump : public USeqAct_Latent
{
public:
	unsigned long                                      bOverride_Speed : 1;                                      // 0x0174(0x0004)
	unsigned long                                      bFast : 1;                                                // 0x0174(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x0174(0x0004) (Transient)
	float                                              GotoSpeed;                                                // 0x0178(0x0004) (Edit)
	class AOLJumpMarker*                               SrcJumpMarker;                                            // 0x017C(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIJump");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AILookAt
// 0x0040 (0x01B4 - 0x0174)
class UOLSeqAct_AILookAt : public USeqAct_Latent
{
public:
	float                                              Duration;                                                 // 0x0174(0x0004) (Edit)
	unsigned long                                      bOnlyIfUnobstructedSight : 1;                             // 0x0178(0x0004) (Edit)
	unsigned long                                      bFullUpperBody : 1;                                       // 0x0178(0x0004) (Edit)
	float                                              MaxDistance;                                              // 0x017C(0x0004) (Edit)
	float                                              MaxHorzAngle;                                             // 0x0180(0x0004) (Edit)
	float                                              MaxVertAngle;                                             // 0x0184(0x0004) (Edit)
	TEnumAsByte<ELookAtBehavior>                       Behavior;                                                 // 0x0188(0x0001) (Edit)
	TEnumAsByte<ELookAtNoisePreset>                    PresetLookAtType;                                         // 0x0189(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x018A(0x0002) MISSED OFFSET
	struct FLookAtNoiseConfig                          CustomLookAtConfig;                                       // 0x018C(0x0014) (Edit)
	float                                              NoiseMinYaw;                                              // 0x01A0(0x0004) (Edit)
	float                                              NoiseMaxYaw;                                              // 0x01A4(0x0004) (Edit)
	float                                              NoiseMinPitch;                                            // 0x01A8(0x0004) (Edit)
	float                                              NoiseMaxPitch;                                            // 0x01AC(0x0004) (Edit)
	float                                              StartedTime;                                              // 0x01B0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AILookAt");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIPlayAnim
// 0x002C (0x01A0 - 0x0174)
class UOLSeqAct_AIPlayAnim : public USeqAct_Latent
{
public:
	struct FName                                       AnimName;                                                 // 0x0174(0x0008) (Edit)
	unsigned long                                      bInterruptible : 1;                                       // 0x017C(0x0004) (Edit)
	unsigned long                                      bLooping : 1;                                             // 0x017C(0x0004) (Edit)
	unsigned long                                      bDisableCollision : 1;                                    // 0x017C(0x0004) (Edit)
	unsigned long                                      bDisablePhysics : 1;                                      // 0x017C(0x0004) (Edit)
	unsigned long                                      bDisableRootMotion : 1;                                   // 0x017C(0x0004) (Edit)
	unsigned long                                      bExitOnBlendOut : 1;                                      // 0x017C(0x0004) (Edit)
	unsigned long                                      bKeepLastPose : 1;                                        // 0x017C(0x0004) (Edit)
	unsigned long                                      bSkullFixerEnabled : 1;                                   // 0x017C(0x0004) (Edit)
	unsigned long                                      bPlayingCustomAnim : 1;                                   // 0x017C(0x0004) (Transient)
	float                                              LoopingDuration;                                          // 0x0180(0x0004) (Edit)
	float                                              AnimBlendInTime;                                          // 0x0184(0x0004) (Edit)
	float                                              AnimBlendOutTime;                                         // 0x0188(0x0004) (Edit)
	float                                              StageMarkBlendTime;                                       // 0x018C(0x0004) (Edit)
	float                                              AnimRate;                                                 // 0x0190(0x0004) (Edit)
	float                                              RateWhenPlayerLitByFlashlight;                            // 0x0194(0x0004) (Edit)
	float                                              AnimStartTime;                                            // 0x0198(0x0004) (Edit)
	float                                              StartedTime;                                              // 0x019C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIPlayAnim");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIPlayerContact
// 0x0064 (0x01D8 - 0x0174)
class UOLSeqAct_AIPlayerContact : public USeqAct_Latent
{
public:
	unsigned long                                      bOverride_Speed : 1;                                      // 0x0174(0x0004)
	unsigned long                                      bDeactivateCamcorder : 1;                                 // 0x0174(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x0174(0x0004) (Transient)
	unsigned long                                      bPlayerFacing : 1;                                        // 0x0174(0x0004) (Transient)
	float                                              MoveSpeed;                                                // 0x0178(0x0004) (Edit)
	float                                              AnimTriggerDistance;                                      // 0x017C(0x0004) (Edit)
	float                                              AnimOffsetDistance;                                       // 0x0180(0x0004) (Edit)
	TEnumAsByte<EPlayerContactPawnRotationMode>        AlignmentMode;                                            // 0x0184(0x0001) (Edit)
	TEnumAsByte<EPlayerContactPawnMovementMode>        PositionningMode;                                         // 0x0185(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0186(0x0002) MISSED OFFSET
	struct FPlayerContactInfo                          EnemySetup;                                               // 0x0188(0x0020) (Edit)
	struct FPlayerContactInfo                          PlayerSetup;                                              // 0x01A8(0x0020) (Edit)
	TArray<class UAnimSet*>                            ExtraPlayerAnimSets;                                      // 0x01C8(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIPlayerContact");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIPlayFacialAnim
// 0x0024 (0x0198 - 0x0174)
class UOLSeqAct_AIPlayFacialAnim : public USeqAct_Latent
{
public:
	struct FName                                       AnimName;                                                 // 0x0174(0x0008) (Edit)
	unsigned long                                      bInterruptible : 1;                                       // 0x017C(0x0004) (Edit)
	unsigned long                                      bLooping : 1;                                             // 0x017C(0x0004) (Edit)
	unsigned long                                      bPlaying : 1;                                             // 0x017C(0x0004) (Transient)
	float                                              LoopingDuration;                                          // 0x0180(0x0004) (Edit)
	float                                              AnimBlendInTime;                                          // 0x0184(0x0004) (Edit)
	float                                              AnimBlendOutTime;                                         // 0x0188(0x0004) (Edit)
	float                                              AnimRate;                                                 // 0x018C(0x0004) (Edit)
	float                                              AnimStartTime;                                            // 0x0190(0x0004) (Edit)
	float                                              StartedTime;                                              // 0x0194(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIPlayFacialAnim");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIRaiseAlarm
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_AIRaiseAlarm : public USequenceAction
{
public:
	float                                              OverriddenAlarmRange;                                     // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIRaiseAlarm");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AISetConditions
// 0x0084 (0x01DC - 0x0158)
class UOLSeqAct_AISetConditions : public USequenceAction
{
public:
	TEnumAsByte<EConditionMergeType>                   MergeType;                                                // 0x0158(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	TArray<struct FAIEventCondition>                   EventConditions;                                          // 0x015C(0x0010) (Edit, NeedCtorLink, EditInline)
	struct FAIPerceptionRules                          PerceptionRules;                                          // 0x016C(0x0070) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AISetConditions");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AISetLeash
// 0x002C (0x01A0 - 0x0174)
class UOLSeqAct_AISetLeash : public USeqAct_Latent
{
public:
	TArray<class AOLLeashMarker*>                      Leashes;                                                  // 0x0174(0x0010) (Edit, NeedCtorLink)
	TArray<class UOLBotCondition*>                     Conditions;                                               // 0x0184(0x0010) (Edit, ExportObject, NeedCtorLink, EditInline)
	float                                              SlowdownDuration;                                         // 0x0194(0x0004) (Edit)
	float                                              StoppedDuration;                                          // 0x0198(0x0004) (Edit)
	unsigned long                                      bAllowBasicInvestigationOutsideLeash : 1;                 // 0x019C(0x0004) (Edit)
	unsigned long                                      bNodeActive : 1;                                          // 0x019C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AISetLeash");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_AIStartPatrol
// 0x0010 (0x0184 - 0x0174)
class UOLSeqAct_AIStartPatrol : public USeqAct_Latent
{
public:
	class ARoute*                                      PatrolRoute;                                              // 0x0174(0x0008)
	unsigned long                                      bStartAtClosestPoint : 1;                                 // 0x017C(0x0004) (Edit)
	unsigned long                                      bForced : 1;                                              // 0x017C(0x0004) (Edit)
	unsigned long                                      bRouteIsManualPath : 1;                                   // 0x017C(0x0004) (Edit)
	unsigned long                                      bOverride_Speed : 1;                                      // 0x017C(0x0004)
	unsigned long                                      bForceUnawareStyle : 1;                                   // 0x017C(0x0004) (Edit)
	unsigned long                                      bForceAlertStyle : 1;                                     // 0x017C(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x017C(0x0004) (Transient)
	float                                              Speed;                                                    // 0x0180(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIStartPatrol");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_AITriggerDisturbance
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_AITriggerDisturbance : public USequenceAction
{
public:
	TEnumAsByte<EDisturbanceType>                      Type;                                                     // 0x0158(0x0001) (Edit)
	TEnumAsByte<EDisturbanceReactionType>              ForcedReaction;                                           // 0x0159(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x015A(0x0002) MISSED OFFSET
	float                                              DisturbanceStrength;                                      // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AITriggerDisturbance");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIUnspawnAtLocation
// 0x0040 (0x01B4 - 0x0174)
class UOLSeqAct_AIUnspawnAtLocation : public USeqAct_Latent
{
public:
	float                                              MinDistanceFromPlayer;                                    // 0x0174(0x0004) (Edit)
	float                                              MinTimeSinceSeenByPlayer;                                 // 0x0178(0x0004) (Edit)
	TArray<class UOLBotCondition*>                     OtherConditionsForUnspawn;                                // 0x017C(0x0010) (Edit, ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      bChooseAnotherSpotIfUnspawnDisallowed : 1;                // 0x018C(0x0004) (Edit)
	unsigned long                                      bSyncToPosition : 1;                                      // 0x018C(0x0004) (Edit)
	unsigned long                                      bSyncToRotation : 1;                                      // 0x018C(0x0004) (Edit)
	unsigned long                                      bOverride_Speed : 1;                                      // 0x018C(0x0004)
	unsigned long                                      bForceUnawareStyle : 1;                                   // 0x018C(0x0004) (Edit)
	unsigned long                                      bForceAlertStyle : 1;                                     // 0x018C(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x018C(0x0004) (Transient)
	struct FName                                       UnspawnAnimName;                                          // 0x0190(0x0008) (Edit)
	float                                              DistanceBuffer;                                           // 0x0198(0x0004) (Edit)
	float                                              Speed;                                                    // 0x019C(0x0004) (Edit)
	TEnumAsByte<EBotDestSelectionHeuristic>            PointSelectionMethod;                                     // 0x01A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01A1(0x0003) MISSED OFFSET
	TArray<class AActor*>                              Points;                                                   // 0x01A4(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIUnspawnAtLocation");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_AIWaitForEvent
// 0x0028 (0x019C - 0x0174)
class UOLSeqAct_AIWaitForEvent : public USeqAct_Latent
{
public:
	TEnumAsByte<EAIEvent>                              EventType;                                                // 0x0174(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0175(0x0003) MISSED OFFSET
	class AActor*                                      RelevantActor;                                            // 0x0178(0x0008) (Edit)
	TArray<class UOLBotCondition*>                     Conditions;                                               // 0x0180(0x0010) (Edit, NeedCtorLink, EditInline)
	int                                                MaxTriggerCount;                                          // 0x0190(0x0004) (Edit)
	unsigned long                                      bResetCountOnWait : 1;                                    // 0x0194(0x0004) (Edit)
	unsigned long                                      bWaiting : 1;                                             // 0x0194(0x0004) (Transient)
	int                                                TriggerCount;                                             // 0x0198(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIWaitForEvent");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AIWaitForTrigger
// 0x001C (0x0190 - 0x0174)
class UOLSeqAct_AIWaitForTrigger : public USeqAct_Latent
{
public:
	TArray<class UOLBotCondition*>                     Conditions;                                               // 0x0174(0x0010) (Edit, NeedCtorLink, EditInline)
	unsigned long                                      bRunning : 1;                                             // 0x0184(0x0004) (Transient)
	class AOLAITrigger*                                AITrigger;                                                // 0x0188(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AIWaitForTrigger");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AkEventLocomotionMode
// 0x0018 (0x018C - 0x0174)
class UOLSeqAct_AkEventLocomotionMode : public USeqAct_Latent
{
public:
	TEnumAsByte<ELocomotionMode>                       LocomotionMode;                                           // 0x0174(0x0001) (Edit)
	TEnumAsByte<ELocomotionMode>                       LastLocomotionMode;                                       // 0x0175(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0176(0x0002) MISSED OFFSET
	class UAkEvent*                                    EnterLocomotionModeAkEvent;                               // 0x0178(0x0008) (Edit)
	class UAkEvent*                                    ExitLocomotionModeAkEvent;                                // 0x0180(0x0008) (Edit)
	unsigned long                                      bTriggerExitAkEventOnStop : 1;                            // 0x0188(0x0004) (Edit)
	unsigned long                                      bUpdateActive : 1;                                        // 0x0188(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AkEventLocomotionMode");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AndGate
// 0x0018 (0x0170 - 0x0158)
class UOLSeqAct_AndGate : public USequenceAction
{
public:
	int                                                LinkCount;                                                // 0x0158(0x0004) (Edit)
	TArray<unsigned char>                              ReceivedInputs;                                           // 0x015C(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      bFired : 1;                                               // 0x016C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AndGate");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Arrow
// 0x0074 (0x01E8 - 0x0174)
class UOLSeqAct_Arrow : public USeqAct_Latent
{
public:
	struct FArrowSettings                              ArrowSettings;                                            // 0x0174(0x0064) (Edit)
	float                                              PreviewFreeTravelTime;                                    // 0x01D8(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x01DC(0x0004) (Transient)
	unsigned long                                      bArrowLaunched : 1;                                       // 0x01DC(0x0004) (Transient)
	class AOLArrow*                                    LaunchedArrow;                                            // 0x01E0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Arrow");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_ArrowGenerator
// 0x008C (0x0200 - 0x0174)
class UOLSeqAct_ArrowGenerator : public USeqAct_Latent
{
public:
	struct FArrowSettings                              ArrowSettings;                                            // 0x0174(0x0064) (Edit)
	float                                              MinDelay;                                                 // 0x01D8(0x0004) (Edit)
	float                                              MaxDelay;                                                 // 0x01DC(0x0004) (Edit)
	int                                                MaxArrowsToLaunch;                                        // 0x01E0(0x0004) (Edit)
	class AActor*                                      SrcActor;                                                 // 0x01E4(0x0008) (Transient)
	class AActor*                                      DestinationActor;                                         // 0x01EC(0x0008) (Transient)
	float                                              NextLaunchTime;                                           // 0x01F4(0x0004) (Transient)
	int                                                NbArrowsLaunched;                                         // 0x01F8(0x0004) (Transient)
	unsigned long                                      bRunning : 1;                                             // 0x01FC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ArrowGenerator");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AttachToDoor
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_AttachToDoor : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AttachToDoor");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_AttachToPushable
// 0x0010 (0x0168 - 0x0158)
class UOLSeqAct_AttachToPushable : public USequenceAction
{
public:
	unsigned long                                      bRestrictMovement : 1;                                    // 0x0158(0x0004) (Edit)
	struct FVector                                     WorldAxisRestriction;                                     // 0x015C(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_AttachToPushable");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Bashable
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_Bashable : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Bashable");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Bloody
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_Bloody : public USequenceAction
{
public:
	unsigned long                                      bOverrideBloodyRatio : 1;                                 // 0x0158(0x0004) (Edit)
	float                                              OverrideBloodyRatio;                                      // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Bloody");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Blur
// 0x0018 (0x0170 - 0x0158)
class UOLSeqAct_Blur : public USequenceAction
{
public:
	float                                              Amount;                                                   // 0x0158(0x0004) (Edit)
	float                                              Duration;                                                 // 0x015C(0x0004) (Edit)
	float                                              BlendInTime;                                              // 0x0160(0x0004) (Edit)
	float                                              BlendOutTime;                                             // 0x0164(0x0004) (Edit)
	float                                              Desaturation;                                             // 0x0168(0x0004) (Edit)
	unsigned long                                      bFadeOutOnCancel : 1;                                     // 0x016C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Blur");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Camcorder
// 0x0010 (0x0168 - 0x0158)
class UOLSeqAct_Camcorder : public USequenceAction
{
public:
	unsigned long                                      bNoAnim : 1;                                              // 0x0158(0x0004) (Edit)
	unsigned long                                      bWithNightVision : 1;                                     // 0x0158(0x0004) (Edit)
	unsigned long                                      bActivatePreventsPlayerControl : 1;                       // 0x0158(0x0004) (Edit)
	float                                              NewMinFOV;                                                // 0x015C(0x0004) (Edit)
	int                                                NewNumBatteries;                                          // 0x0160(0x0004) (Edit)
	float                                              NewCurrentEnergy;                                         // 0x0164(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Camcorder");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_CamcorderEnabledAnim
// 0x0038 (0x01AC - 0x0174)
class UOLSeqAct_CamcorderEnabledAnim : public USeqAct_Latent
{
public:
	struct FName                                       BaseAnim;                                                 // 0x0174(0x0008) (Edit)
	struct FName                                       RaiseCamcorderAnim;                                       // 0x017C(0x0008) (Edit)
	struct FName                                       LowerCamcorderAnim;                                       // 0x0184(0x0008) (Edit)
	unsigned long                                      bCanRaiseCamcorder : 1;                                   // 0x018C(0x0004) (Edit)
	unsigned long                                      bCanLowerCamcorder : 1;                                   // 0x018C(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x018C(0x0004) (Transient)
	TArray<class UAnimSet*>                            ExtraAnimSets;                                            // 0x0190(0x0010) (Edit, NeedCtorLink)
	float                                              BaseBlendInTime;                                          // 0x01A0(0x0004) (Edit)
	float                                              RaiseCamcorderBlendInTime;                                // 0x01A4(0x0004) (Edit)
	float                                              LowerCamcorderBlendInTime;                                // 0x01A8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_CamcorderEnabledAnim");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_CamcorderVisibility
// 0x0004 (0x0178 - 0x0174)
class UOLSeqAct_CamcorderVisibility : public USeqAct_Latent
{
public:
	unsigned long                                      bShowNoCam : 1;                                           // 0x0174(0x0004) (Edit)
	unsigned long                                      bShowNormalCam : 1;                                       // 0x0174(0x0004) (Edit)
	unsigned long                                      bShowInNV : 1;                                            // 0x0174(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_CamcorderVisibility");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_CameraParticleEffect
// 0x0018 (0x0170 - 0x0158)
class UOLSeqAct_CameraParticleEffect : public USequenceAction
{
public:
	class UParticleSystem*                             ParticleSystemTemplate;                                   // 0x0158(0x0008) (Edit)
	float                                              Duration;                                                 // 0x0160(0x0004) (Edit)
	float                                              BlendOutDuration;                                         // 0x0164(0x0004) (Edit)
	float                                              PlaneDist;                                                // 0x0168(0x0004) (Edit)
	unsigned long                                      bNoRotation : 1;                                          // 0x016C(0x0004) (Edit)
	unsigned long                                      bDeactivateOnCamcorderTransition : 1;                     // 0x016C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_CameraParticleEffect");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_CameraShake
// 0x009C (0x0210 - 0x0174)
class UOLSeqAct_CameraShake : public USeqAct_Latent
{
public:
	struct FCameraShakeData                            Params;                                                   // 0x0174(0x0098) (Edit)
	unsigned long                                      bDone : 1;                                                // 0x020C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_CameraShake");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_CameraSmoothing
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_CameraSmoothing : public USequenceAction
{
public:
	float                                              BlendTime;                                                // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_CameraSmoothing");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_ChangeHeroType
// 0x0001 (0x0159 - 0x0158)
class UOLSeqAct_ChangeHeroType : public USequenceAction
{
public:
	TEnumAsByte<EHeroType>                             NewType;                                                  // 0x0158(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ChangeHeroType");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_ChokePoint
// 0x0014 (0x0188 - 0x0174)
class UOLSeqAct_ChokePoint : public USeqAct_Latent
{
public:
	unsigned long                                      bWaitingForLoaded : 1;                                    // 0x0174(0x0004)
	unsigned long                                      bWaitingForVisible : 1;                                   // 0x0174(0x0004)
	unsigned long                                      bNonBlocking : 1;                                         // 0x0174(0x0004) (Edit)
	TArray<struct FName>                               LevelNames;                                               // 0x0178(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ChokePoint");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_ChooseClosest
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_ChooseClosest : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ChooseClosest");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_ChooseClosestBot
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_ChooseClosestBot : public USequenceAction
{
public:
	float                                              MaxDistance;                                              // 0x0158(0x0004) (Edit)
	unsigned long                                      bHorizontalDistOnly : 1;                                  // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ChooseClosestBot");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_ChooseOutOfSight
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_ChooseOutOfSight : public USequenceAction
{
public:
	float                                              BackAngle;                                                // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ChooseOutOfSight");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_ConditionalAIConfig
// 0x0028 (0x019C - 0x0174)
class UOLSeqAct_ConditionalAIConfig : public USeqAct_Latent
{
public:
	TArray<struct FConditionalConfigData>              ConfigSetups;                                             // 0x0174(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bNodeActive : 1;                                          // 0x0184(0x0004) (Transient)
	unsigned long                                      bCommentsUpToDate : 1;                                    // 0x0184(0x0004) (Transient)
	int                                                ActiveSetupIdx;                                           // 0x0188(0x0004) (Transient)
	TArray<struct FString>                             MultiLineComments;                                        // 0x018C(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ConditionalAIConfig");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_ConditionalHideBandages
// 0x000C (0x0164 - 0x0158)
class UOLSeqAct_ConditionalHideBandages : public USequenceAction
{
public:
	int                                                BandageLimit;                                             // 0x0158(0x0004) (Edit)
	unsigned long                                      bHideInNightmareMode : 1;                                 // 0x015C(0x0004) (Edit)
	int                                                MaxUnhiddenLinkedBandages;                                // 0x0160(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ConditionalHideBandages");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_ConditionalHideBatteries
// 0x000C (0x0164 - 0x0158)
class UOLSeqAct_ConditionalHideBatteries : public USequenceAction
{
public:
	int                                                MaxNumBatteries;                                          // 0x0158(0x0004) (Edit)
	unsigned long                                      bHideInNightmareMode : 1;                                 // 0x015C(0x0004) (Edit)
	int                                                MaxUnhiddenLinkedBatteries;                               // 0x0160(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ConditionalHideBatteries");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_CrucifiedHands
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_CrucifiedHands : public USequenceAction
{
public:
	unsigned long                                      bOverrideBleedFactor : 1;                                 // 0x0158(0x0004) (Edit)
	float                                              OveriddenBleedFactor;                                     // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_CrucifiedHands");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_DamagePlayer
// 0x0014 (0x016C - 0x0158)
class UOLSeqAct_DamagePlayer : public USequenceAction
{
public:
	unsigned long                                      bNonFatal : 1;                                            // 0x0158(0x0004) (Edit)
	unsigned long                                      bForceBleeding : 1;                                       // 0x0158(0x0004) (Edit)
	unsigned long                                      bNoBleeding : 1;                                          // 0x0158(0x0004) (Edit)
	unsigned long                                      bShowBloodColumn : 1;                                     // 0x0158(0x0004) (Edit)
	unsigned long                                      bBloodParticles : 1;                                      // 0x0158(0x0004) (Edit)
	unsigned long                                      bCameraShake : 1;                                         // 0x0158(0x0004) (Edit)
	unsigned long                                      bBlur : 1;                                                // 0x0158(0x0004) (Edit)
	unsigned long                                      bSoundEffect : 1;                                         // 0x0158(0x0004) (Edit)
	unsigned long                                      bBladeDamageSound : 1;                                    // 0x0158(0x0004) (Edit)
	float                                              BloodColumnTime;                                          // 0x015C(0x0004) (Edit)
	class AActor*                                      referenceDamageActor;                                     // 0x0160(0x0008) (Edit)
	int                                                DamageAmount;                                             // 0x0168(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_DamagePlayer");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_DarkLightControl
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_DarkLightControl : public USequenceAction
{
public:
	float                                              DarkLightBrightnessEV;                                    // 0x0158(0x0004) (Edit)
	float                                              DarkLightRadius;                                          // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_DarkLightControl");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_DebugText
// 0x0014 (0x016C - 0x0158)
class UOLSeqAct_DebugText : public USequenceAction
{
public:
	struct FString                                     Text;                                                     // 0x0158(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bIncludeWorldTime : 1;                                    // 0x0168(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_DebugText");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_DelayByDifficulty
// 0x0044 (0x01B8 - 0x0174)
class UOLSeqAct_DelayByDifficulty : public USeqAct_Latent
{
public:
	struct FFloatByDifficulty                          DelayDuration;                                            // 0x0174(0x0034) (Edit)
	unsigned long                                      bDelayActive : 1;                                         // 0x01A8(0x0004) (Transient)
	unsigned long                                      bStartWillRestart : 1;                                    // 0x01A8(0x0004) (Edit)
	float                                              DefaultDuration;                                          // 0x01AC(0x0004) (Const)
	float                                              LastUpdateTime;                                           // 0x01B0(0x0004) (Transient)
	float                                              RemainingTime;                                            // 0x01B4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_DelayByDifficulty");
		return ptr;
	}


	void ResetDelayActive();
	void Reset();
};


// Class OLGame.OLSeqAct_Dialogue
// 0x0028 (0x019C - 0x0174)
class UOLSeqAct_Dialogue : public USeqAct_Latent
{
public:
	TArray<struct FDialogueLine>                       Dialogues;                                                // 0x0174(0x0010) (Edit, NeedCtorLink, EditInline)
	unsigned long                                      bInteruptionHappenAfterCurrentLine : 1;                   // 0x0184(0x0004) (Edit)
	unsigned long                                      bInterrupted : 1;                                         // 0x0184(0x0004) (Transient)
	unsigned long                                      bInterruptedOnNextLine : 1;                               // 0x0184(0x0004) (Transient)
	int                                                DialogueLineIndex;                                        // 0x0188(0x0004) (Transient)
	TArray<struct FPlayingDialogue>                    PlayingLines;                                             // 0x018C(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Dialogue");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_DisablePrompts
// 0x0014 (0x016C - 0x0158)
class UOLSeqAct_DisablePrompts : public USequenceAction
{
public:
	TEnumAsByte<EDisablePromptGroup>                   Group;                                                    // 0x0158(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	TArray<TEnumAsByte<EPlayerInteractionType>>        AdditionalPromptDisabled;                                 // 0x015C(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_DisablePrompts");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Dizzy
// 0x0418 (0x0570 - 0x0158)
class UOLSeqAct_Dizzy : public USequenceAction
{
public:
	unsigned long                                      bCustomSettings : 1;                                      // 0x0158(0x0004)
	TEnumAsByte<EDizzinessTemplateType>                CopyFromTemplate;                                         // 0x015C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x015D(0x0003) MISSED OFFSET
	struct FDizzinessConfig                            Config;                                                   // 0x0160(0x00D0) (Edit)
	struct FDizzinessConfig                            ConcussionConfig;                                         // 0x0230(0x00D0)
	struct FDizzinessConfig                            PoisonConfig;                                             // 0x0300(0x00D0)
	struct FDizzinessConfig                            HallucinationConfig;                                      // 0x03D0(0x00D0)
	struct FDizzinessConfig                            FastDropConfig;                                           // 0x04A0(0x00D0)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Dizzy");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Door
// 0x004D (0x01A5 - 0x0158)
class UOLSeqAct_Door : public USequenceAction
{
public:
	float                                              RotationSpeedOverride;                                    // 0x0158(0x0004) (Edit)
	float                                              OpenAngle;                                                // 0x015C(0x0004) (Edit)
	unsigned long                                      bNoSound : 1;                                             // 0x0160(0x0004) (Edit)
	unsigned long                                      bLockingSound : 1;                                        // 0x0160(0x0004) (Edit)
	unsigned long                                      bBashReversed : 1;                                        // 0x0160(0x0004) (Edit)
	unsigned long                                      bSwitchToBreakingMesh : 1;                                // 0x0160(0x0004) (Edit)
	unsigned long                                      bEnableLockInteraction : 1;                               // 0x0160(0x0004) (Edit)
	struct FDoorShakeData                              ShakeParams;                                              // 0x0164(0x0040) (Edit)
	TEnumAsByte<ECancelBashDirection>                  CancelBashDirection;                                      // 0x01A4(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Door");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_DoorStatus
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_DoorStatus : public USequenceAction
{
public:
	float                                              OpenAngle;                                                // 0x0158(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_DoorStatus");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_DriveMaterialDynamicDataByDistance
// 0x0040 (0x01B4 - 0x0174)
class UOLSeqAct_DriveMaterialDynamicDataByDistance : public USeqAct_Latent
{
public:
	struct FLinearColor                                CloseDynamicData;                                         // 0x0174(0x0010) (Edit)
	struct FLinearColor                                FarDynamicData;                                           // 0x0184(0x0010) (Edit)
	float                                              CloseDistance;                                            // 0x0194(0x0004) (Edit)
	float                                              FarDistance;                                              // 0x0198(0x0004) (Edit)
	TArray<class AActor*>                              DynamicActors;                                            // 0x019C(0x0010) (Transient, NeedCtorLink)
	class AActor*                                      DistanceRefActor;                                         // 0x01AC(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_DriveMaterialDynamicDataByDistance");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_EyeWaterParticleLifetime
// 0x000C (0x0180 - 0x0174)
class UOLSeqAct_EyeWaterParticleLifetime : public USeqAct_Latent
{
public:
	float                                              NewLifeTime;                                              // 0x0174(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0178(0x0004) (Edit)
	float                                              TimeLeft;                                                 // 0x017C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_EyeWaterParticleLifetime");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Fade
// 0x0010 (0x0168 - 0x0158)
class UOLSeqAct_Fade : public USequenceAction
{
public:
	unsigned long                                      bFadeIn : 1;                                              // 0x0158(0x0004) (Edit)
	unsigned long                                      bForceStartValue : 1;                                     // 0x0158(0x0004) (Edit)
	float                                              Opacity;                                                  // 0x015C(0x0004) (Edit)
	struct FColor                                      FadeColor;                                                // 0x0160(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0164(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Fade");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_FakeHitPlayer
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_FakeHitPlayer : public USequenceAction
{
public:
	float                                              HitStrength;                                              // 0x0158(0x0004) (Edit)
	unsigned long                                      bPlayAnim : 1;                                            // 0x015C(0x0004) (Edit)
	unsigned long                                      bForceReaction : 1;                                       // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_FakeHitPlayer");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_FinishMapTransition
// 0x0004 (0x0178 - 0x0174)
class UOLSeqAct_FinishMapTransition : public USeqAct_Latent
{
public:
	unsigned long                                      bWaitingForReady : 1;                                     // 0x0174(0x0004) (Transient)
	unsigned long                                      bBlockingOnLoad : 1;                                      // 0x0174(0x0004) (Transient)
	unsigned long                                      bTransitionCompleted : 1;                                 // 0x0174(0x0004) (Transient)
	unsigned long                                      bPendingActualCommit : 1;                                 // 0x0174(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_FinishMapTransition");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_FishRecycler
// 0x0030 (0x01A4 - 0x0174)
class UOLSeqAct_FishRecycler : public USeqAct_Latent
{
public:
	unsigned long                                      bRandomizeOnStart : 1;                                    // 0x0174(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x0174(0x0004) (Transient)
	float                                              DetectionRadius;                                          // 0x0178(0x0004) (Edit)
	float                                              VisibilityDist;                                           // 0x017C(0x0004) (Edit)
	float                                              SinkingDepth;                                             // 0x0180(0x0004) (Edit)
	float                                              SinkingSpeed;                                             // 0x0184(0x0004) (Edit)
	float                                              SurfacingSpeed;                                           // 0x0188(0x0004) (Edit)
	float                                              InitialMinDepth;                                          // 0x018C(0x0004) (Edit)
	float                                              InitialMaxDepth;                                          // 0x0190(0x0004) (Edit)
	TArray<struct FFloaterData>                        Floaters;                                                 // 0x0194(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_FishRecycler");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Flicker
// 0x0020 (0x0194 - 0x0174)
class UOLSeqAct_Flicker : public USeqAct_Latent
{
public:
	float                                              Duration;                                                 // 0x0174(0x0004) (Edit)
	float                                              StartPeriodVisible;                                       // 0x0178(0x0004) (Edit)
	float                                              StartPeriodHidden;                                        // 0x017C(0x0004) (Edit)
	float                                              EndPeriodVisible;                                         // 0x0180(0x0004) (Edit)
	float                                              EndPeriodHidden;                                          // 0x0184(0x0004) (Edit)
	unsigned long                                      bFinishHidden : 1;                                        // 0x0188(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x0188(0x0004) (Transient)
	unsigned long                                      bStartedVisible : 1;                                      // 0x0188(0x0004) (Transient)
	float                                              StartedTime;                                              // 0x018C(0x0004) (Transient)
	float                                              PeriodStartedTime;                                        // 0x0190(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Flicker");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_FlyingFish
// 0x0028 (0x019C - 0x0174)
class UOLSeqAct_FlyingFish : public USeqAct_Latent
{
public:
	float                                              TotalDuration;                                            // 0x0174(0x0004) (Edit)
	float                                              AccelExp;                                                 // 0x0178(0x0004) (Edit)
	struct FName                                       AnimName;                                                 // 0x017C(0x0008) (Edit)
	TArray<struct FRainingAnimalData>                  MeshesToProcess;                                          // 0x0184(0x0010) (Transient, NeedCtorLink)
	float                                              StartedTime;                                              // 0x0194(0x0004) (Transient)
	unsigned long                                      bRunning : 1;                                             // 0x0198(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_FlyingFish");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_FogControl
// 0x005C (0x01D0 - 0x0174)
class UOLSeqAct_FogControl : public USeqAct_Latent
{
public:
	float                                              BlendTime;                                                // 0x0174(0x0004) (Edit)
	float                                              FlashLightsVolumetricsIntensity;                          // 0x0178(0x0004) (Edit)
	float                                              LanternVolumetricsIntensity;                              // 0x017C(0x0004) (Edit)
	float                                              TorchVolumetricsIntensity;                                // 0x0180(0x0004) (Edit)
	float                                              ArrowVolumetricsIntensity;                                // 0x0184(0x0004) (Edit)
	float                                              HeroLightVolumetricsIntensity;                            // 0x0188(0x0004) (Edit)
	float                                              FogDensityBottom;                                         // 0x018C(0x0004) (Edit)
	float                                              FogDensityTop;                                            // 0x0190(0x0004) (Edit)
	float                                              FogParticlesDensityBottom;                                // 0x0194(0x0004) (Edit)
	float                                              FogParticlesDensityTop;                                   // 0x0198(0x0004) (Edit)
	float                                              FogPhaseAsymmetry;                                        // 0x019C(0x0004) (Edit)
	float                                              Initial_FlashLightsVolumetricsIntensity;                  // 0x01A0(0x0004) (Transient)
	float                                              Initial_LanternVolumetricsIntensity;                      // 0x01A4(0x0004) (Transient)
	float                                              Initial_TorchVolumetricsIntensity;                        // 0x01A8(0x0004) (Transient)
	float                                              Initial_ArrowVolumetricsIntensity;                        // 0x01AC(0x0004) (Transient)
	float                                              Initial_HeroLightVolumetricsIntensity;                    // 0x01B0(0x0004) (Transient)
	float                                              Initial_FogDensityBottom;                                 // 0x01B4(0x0004) (Transient)
	float                                              Initial_FogDensityTop;                                    // 0x01B8(0x0004) (Transient)
	float                                              Initial_FogParticlesDensityBottom;                        // 0x01BC(0x0004) (Transient)
	float                                              Initial_FogParticlesDensityTop;                           // 0x01C0(0x0004) (Transient)
	float                                              Initial_FogPhaseAsymmetry;                                // 0x01C4(0x0004) (Transient)
	unsigned long                                      bRunning : 1;                                             // 0x01C8(0x0004) (Transient)
	float                                              StartedTime;                                              // 0x01CC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_FogControl");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_ForceLevelVisibility
// 0x0010 (0x0168 - 0x0158)
class UOLSeqAct_ForceLevelVisibility : public USequenceAction
{
public:
	TArray<struct FName>                               LevelsToShow;                                             // 0x0158(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ForceLevelVisibility");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_ForceStance
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_ForceStance : public USequenceAction
{
public:
	unsigned long                                      bCrouch : 1;                                              // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ForceStance");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_GameOver
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_GameOver : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_GameOver");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_GameplayItem
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_GameplayItem : public USequenceAction
{
public:
	struct FName                                       ItemName;                                                 // 0x0158(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_GameplayItem");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_GenericBlend
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_GenericBlend : public USequenceAction
{
public:
	float                                              BlendTime;                                                // 0x0158(0x0004) (Edit)
	unsigned long                                      bWorldSpace : 1;                                          // 0x015C(0x0004) (Edit)
	unsigned long                                      bApplyAlsoOnCamera : 1;                                   // 0x015C(0x0004) (Edit)
	unsigned long                                      bApplyOnlyOnCamera : 1;                                   // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_GenericBlend");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_GetCurrentInteractiveObject
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_GetCurrentInteractiveObject : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_GetCurrentInteractiveObject");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_GetPairedWalkBot
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_GetPairedWalkBot : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_GetPairedWalkBot");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_GiveRecording
// 0x0010 (0x0168 - 0x0158)
class UOLSeqAct_GiveRecording : public USequenceAction
{
public:
	TArray<struct FName>                               RecordingNames;                                           // 0x0158(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_GiveRecording");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_GiveRecordingIfAccumulatedTime
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_GiveRecordingIfAccumulatedTime : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_GiveRecordingIfAccumulatedTime");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Glasses
// 0x0001 (0x0159 - 0x0158)
class UOLSeqAct_Glasses : public USequenceAction
{
public:
	TEnumAsByte<EGlassesAction>                        Action;                                                   // 0x0158(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Glasses");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_HaarpEffect
// 0x0028 (0x019C - 0x0174)
class UOLSeqAct_HaarpEffect : public USeqAct_Latent
{
public:
	TArray<struct FHaarpEffect_IntensityValue>         Keys;                                                     // 0x0174(0x0010) (Edit, NeedCtorLink, EditInline)
	float                                              SmoothFactorAsc;                                          // 0x0184(0x0004) (Edit)
	float                                              SmoothFactorDsc;                                          // 0x0188(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x018C(0x0004) (Transient)
	float                                              SmoothHaarpEffectIntensity;                               // 0x0190(0x0004) (Transient)
	int                                                CurrentIndex;                                             // 0x0194(0x0004) (Transient)
	float                                              TimeElapsed;                                              // 0x0198(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_HaarpEffect");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_HaarpEffectConfig
// 0x0028 (0x0180 - 0x0158)
class UOLSeqAct_HaarpEffectConfig : public USequenceAction
{
public:
	struct FRandomHaarpEffectConfig                    Config;                                                   // 0x0158(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_HaarpEffectConfig");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_HeroControl
// 0x0058 (0x01CC - 0x0174)
class UOLSeqAct_HeroControl : public USeqAct_Latent
{
public:
	float                                              FixedDuration;                                            // 0x0174(0x0004) (Edit)
	float                                              LookAtBlendInTime;                                        // 0x0178(0x0004) (Edit)
	float                                              MovementSpeed;                                            // 0x017C(0x0004) (Edit)
	TEnumAsByte<EHeroControlRotationType>              AlignRotationType;                                        // 0x0180(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0181(0x0003) MISSED OFFSET
	float                                              RotationSpeed;                                            // 0x0184(0x0004) (Edit)
	unsigned long                                      bIndependentRotationControl : 1;                          // 0x0188(0x0004) (Edit)
	unsigned long                                      bNoMovementSmoothing : 1;                                 // 0x0188(0x0004) (Edit)
	unsigned long                                      bNoSmoothingIndependentRotation : 1;                      // 0x0188(0x0004) (Edit)
	unsigned long                                      bHardLookAt : 1;                                          // 0x0188(0x0004) (Edit)
	unsigned long                                      bCompleted : 1;                                           // 0x0188(0x0004) (Transient)
	unsigned long                                      bPendingKill : 1;                                         // 0x0188(0x0004) (Transient)
	unsigned long                                      bLookAtBlendDone : 1;                                     // 0x0188(0x0004) (Transient)
	struct FName                                       LookAtBoneName;                                           // 0x018C(0x0008) (Edit)
	float                                              LookAtOffsetUp;                                           // 0x0194(0x0004) (Edit)
	float                                              LookAtOffsetRight;                                        // 0x0198(0x0004) (Edit)
	class AActor*                                      GoToTarget;                                               // 0x019C(0x0008)
	class AActor*                                      LookAtTarget;                                             // 0x01A4(0x0008)
	float                                              ElapsedTime;                                              // 0x01AC(0x0004) (Transient)
	float                                              Duration;                                                 // 0x01B0(0x0004) (Transient)
	struct FVector                                     OriginalCamLocation;                                      // 0x01B4(0x000C) (Transient)
	struct FRotator                                    OriginalCamRotation;                                      // 0x01C0(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_HeroControl");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_HeroEnterRiver
// 0x000C (0x0164 - 0x0158)
class UOLSeqAct_HeroEnterRiver : public USequenceAction
{
public:
	struct FName                                       EntryAnim;                                                // 0x0158(0x0008) (Edit)
	unsigned long                                      bSnapToWater : 1;                                         // 0x0160(0x0004) (Edit)
	unsigned long                                      bEnterLocomotionMode : 1;                                 // 0x0160(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_HeroEnterRiver");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_HeroExitRiver
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_HeroExitRiver : public USequenceAction
{
public:
	struct FName                                       ExitAnim;                                                 // 0x0158(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_HeroExitRiver");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_HeroNoInventory
// 0x0000 (0x0174 - 0x0174)
class UOLSeqAct_HeroNoInventory : public USeqAct_Latent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_HeroNoInventory");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_HeroPlayAnim
// 0x0070 (0x01E4 - 0x0174)
class UOLSeqAct_HeroPlayAnim : public USeqAct_Latent
{
public:
	struct FName                                       AnimName;                                                 // 0x0174(0x0008) (Edit)
	unsigned long                                      bLooping : 1;                                             // 0x017C(0x0004) (Edit)
	unsigned long                                      bDisableCollision : 1;                                    // 0x017C(0x0004) (Edit)
	unsigned long                                      bDisablePhysics : 1;                                      // 0x017C(0x0004) (Edit)
	unsigned long                                      bDisableRootMotion : 1;                                   // 0x017C(0x0004) (Edit)
	unsigned long                                      bDeactivateCamcorder : 1;                                 // 0x017C(0x0004) (Edit)
	unsigned long                                      bRestoreCamcorder : 1;                                    // 0x017C(0x0004) (Edit)
	unsigned long                                      bAllowFullCamcorderControl : 1;                           // 0x017C(0x0004) (Edit)
	unsigned long                                      bAllowLimitedCamcorderControl : 1;                        // 0x017C(0x0004) (Edit)
	unsigned long                                      bAllowZoom : 1;                                           // 0x017C(0x0004) (Edit)
	unsigned long                                      bKeepLocomotionMode : 1;                                  // 0x017C(0x0004) (Edit)
	unsigned long                                      bKeepVelocity : 1;                                        // 0x017C(0x0004) (Edit)
	unsigned long                                      bExitOnBlendOut : 1;                                      // 0x017C(0x0004) (Edit)
	unsigned long                                      bEndsOnStageMark : 1;                                     // 0x017C(0x0004) (Edit)
	unsigned long                                      bStageMarkerWaitForNotify : 1;                            // 0x017C(0x0004) (Edit)
	unsigned long                                      bStageMarkFor2dPosOnly : 1;                               // 0x017C(0x0004) (Edit)
	unsigned long                                      bKeepLastPose : 1;                                        // 0x017C(0x0004) (Edit)
	unsigned long                                      bUseMarkAsRelativeBase : 1;                               // 0x017C(0x0004) (Edit)
	unsigned long                                      bAllowCameraOffset : 1;                                   // 0x017C(0x0004) (Edit)
	unsigned long                                      bRecenterGamepadCamera : 1;                               // 0x017C(0x0004) (Edit)
	unsigned long                                      bPlayingCustomAnim : 1;                                   // 0x017C(0x0004) (Transient)
	unsigned long                                      bDisabledCamcorder : 1;                                   // 0x017C(0x0004) (Transient)
	unsigned long                                      bAdjustmentFinishedTriggered : 1;                         // 0x017C(0x0004) (Transient)
	float                                              LoopingDuration;                                          // 0x0180(0x0004) (Edit)
	float                                              AnimBlendInTime;                                          // 0x0184(0x0004) (Edit)
	float                                              AnimBlendOutTime;                                         // 0x0188(0x0004) (Edit)
	float                                              StageMarkBlendTime;                                       // 0x018C(0x0004) (Edit)
	TEnumAsByte<EProceduralAnimInterpType>             StageMarkInterpType;                                      // 0x0190(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0191(0x0003) MISSED OFFSET
	struct FRotator                                    StageMarkRotationOffset;                                  // 0x0194(0x000C) (Edit)
	struct FVector                                     StageMarkLocationOffset;                                  // 0x01A0(0x000C) (Edit)
	class UAnimSet*                                    SpecificAnimSet;                                          // 0x01AC(0x0008) (Edit)
	float                                              AnimRate;                                                 // 0x01B4(0x0004) (Edit)
	float                                              AnimStartTime;                                            // 0x01B8(0x0004) (Edit)
	float                                              MinYaw;                                                   // 0x01BC(0x0004) (Edit)
	float                                              MaxYaw;                                                   // 0x01C0(0x0004) (Edit)
	float                                              MinPitch;                                                 // 0x01C4(0x0004) (Edit)
	float                                              MaxPitch;                                                 // 0x01C8(0x0004) (Edit)
	float                                              NeckOffsetFwd;                                            // 0x01CC(0x0004) (Edit)
	float                                              NeckOffsetSide;                                           // 0x01D0(0x0004) (Edit)
	float                                              StartedTime;                                              // 0x01D4(0x0004) (Transient)
	struct FVector                                     LastMarkPos;                                              // 0x01D8(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_HeroPlayAnim");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_HeroPlayRiverAnim
// 0x0028 (0x020C - 0x01E4)
class UOLSeqAct_HeroPlayRiverAnim : public UOLSeqAct_HeroPlayAnim
{
public:
	struct FName                                       RaftAnimation;                                            // 0x01E4(0x0008) (Edit)
	unsigned long                                      bAllowRiverCurrentRealign : 1;                            // 0x01EC(0x0004) (Edit)
	unsigned long                                      bAllowRiverFullBehavior : 1;                              // 0x01EC(0x0004) (Edit)
	unsigned long                                      bInitialValueSetted : 1;                                  // 0x01EC(0x0004) (Transient)
	float                                              RiverCurrentRealignRatio;                                 // 0x01F0(0x0004) (Edit)
	struct FRotator                                    InitialStageMarkRotationOffset;                           // 0x01F4(0x000C) (Transient)
	struct FVector                                     InitialStageMarkLocationOffset;                           // 0x0200(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_HeroPlayRiverAnim");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_HeroSetSkinMaterials
// 0x0001 (0x0159 - 0x0158)
class UOLSeqAct_HeroSetSkinMaterials : public USequenceAction
{
public:
	TEnumAsByte<ESkinMaterialsType>                    Skin;                                                     // 0x0158(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_HeroSetSkinMaterials");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_HeroTeleport
// 0x000C (0x0164 - 0x0158)
class UOLSeqAct_HeroTeleport : public USequenceAction
{
public:
	TEnumAsByte<EHeroTeleportStance>                   ExitStance;                                               // 0x0158(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	unsigned long                                      bNoBlendToNewStance : 1;                                  // 0x015C(0x0004) (Edit)
	unsigned long                                      bTeleportToLedgeHang : 1;                                 // 0x015C(0x0004) (Edit)
	unsigned long                                      bTeleportToSqueeze : 1;                                   // 0x015C(0x0004) (Edit)
	unsigned long                                      bTeleportToWardrobe : 1;                                  // 0x015C(0x0004) (Edit)
	unsigned long                                      bTeleportToLocker : 1;                                    // 0x015C(0x0004) (Edit)
	float                                              AutoUncrouchDelay;                                        // 0x0160(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_HeroTeleport");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_HideInSight
// 0x0028 (0x019C - 0x0174)
class UOLSeqAct_HideInSight : public USeqAct_Latent
{
public:
	float                                              BackAngle;                                                // 0x0174(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x0178(0x0004) (Transient)
	unsigned long                                      bSoftUnspawnedBot : 1;                                    // 0x0178(0x0004) (Transient)
	unsigned long                                      bUnspawnRequested : 1;                                    // 0x0178(0x0004) (Transient)
	unsigned long                                      bUnspawnReady : 1;                                        // 0x0178(0x0004) (Transient)
	class AOLBot*                                      TargetBot;                                                // 0x017C(0x0008) (Transient)
	struct FVector                                     UnspawnLocation;                                          // 0x0184(0x000C) (Transient)
	struct FRotator                                    UnspawnRotation;                                          // 0x0190(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_HideInSight");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_HoldingBaby
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_HoldingBaby : public USequenceAction
{
public:
	float                                              WalkSpeed;                                                // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_HoldingBaby");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_IgnoreBaseRotation
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_IgnoreBaseRotation : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_IgnoreBaseRotation");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_InnerDemonEffect
// 0x0028 (0x0180 - 0x0158)
class UOLSeqAct_InnerDemonEffect : public USequenceAction
{
public:
	unsigned long                                      bDeformation : 1;                                         // 0x0158(0x0004) (Edit)
	unsigned long                                      bParticles : 1;                                           // 0x0158(0x0004) (Edit)
	unsigned long                                      bPostEffect : 1;                                          // 0x0158(0x0004) (Edit)
	unsigned long                                      bDecals : 1;                                              // 0x0158(0x0004) (Edit)
	unsigned long                                      bFadeOutEffects : 1;                                      // 0x0158(0x0004) (Edit)
	class UParticleSystem*                             ParticleOverride;                                         // 0x015C(0x0008) (Edit)
	float                                              DeformApproachCoeffUp;                                    // 0x0164(0x0004) (Edit)
	float                                              DeformApproachCoeffDown;                                  // 0x0168(0x0004) (Edit)
	float                                              PPSApproachCoeffUp;                                       // 0x016C(0x0004) (Edit)
	float                                              PPSApproachCoeffDown;                                     // 0x0170(0x0004) (Edit)
	float                                              DecalApproachCoeffUp;                                     // 0x0174(0x0004) (Edit)
	float                                              DecalApproachCoeffDown;                                   // 0x0178(0x0004) (Edit)
	float                                              DecalActivationRadius;                                    // 0x017C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_InnerDemonEffect");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_InvisibleFootsteps
// 0x0054 (0x01C8 - 0x0174)
class UOLSeqAct_InvisibleFootsteps : public USeqAct_Latent
{
public:
	TEnumAsByte<EFootstepDecalType>                    FootstepType;                                             // 0x0174(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0175(0x0003) MISSED OFFSET
	TArray<class UMaterialInstanceConstant*>           DecalsLeft;                                               // 0x0178(0x0010) (Edit, NeedCtorLink)
	TArray<class UMaterialInstanceConstant*>           DecalsRight;                                              // 0x0188(0x0010) (Edit, NeedCtorLink)
	float                                              DecalWidth;                                               // 0x0198(0x0004) (Edit)
	float                                              DecalHeight;                                              // 0x019C(0x0004) (Edit)
	float                                              DecalThickness;                                           // 0x01A0(0x0004) (Edit)
	unsigned long                                      bDriveDynamicData : 1;                                    // 0x01A4(0x0004) (Edit)
	unsigned long                                      bTraceDownForDepth : 1;                                   // 0x01A4(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x01A4(0x0004) (Transient)
	float                                              DynamicDataInterpDuration;                                // 0x01A8(0x0004) (Edit)
	float                                              SimulatedDepth;                                           // 0x01AC(0x0004) (Edit)
	class AOLPawn*                                     TargetPawn;                                               // 0x01B0(0x0008) (Transient)
	TArray<struct FInvisibleFootstepData>              ActiveDecals;                                             // 0x01B8(0x0010) (Transient, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_InvisibleFootsteps");
		return ptr;
	}


	bool ShouldHandleDecal(TEnumAsByte<EFootstepDecalType> DecalType);
	void SpawnFootstepDecal(bool bLeftFoot, struct FVector* DecalLocation, struct FRotator* DecalRotation);
};


// Class OLGame.OLSeqAct_LightEnvControl
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_LightEnvControl : public USequenceAction
{
public:
	float                                              StaticLightEnvironmentIntensity;                          // 0x0158(0x0004) (Edit)
	unsigned long                                      bCharacterLightEnv : 1;                                   // 0x015C(0x0004) (Edit)
	unsigned long                                      bCastShadows : 1;                                         // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_LightEnvControl");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_LimitPlayerSpeed
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_LimitPlayerSpeed : public USequenceAction
{
public:
	float                                              MaxSpeed;                                                 // 0x0158(0x0004) (Edit)
	float                                              Duration;                                                 // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_LimitPlayerSpeed");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_LimitRotationRate
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_LimitRotationRate : public USequenceAction
{
public:
	float                                              MaxRotationRate;                                          // 0x0158(0x0004) (Edit)
	float                                              Duration;                                                 // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_LimitRotationRate");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_LimitSqueeze
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_LimitSqueeze : public USequenceAction
{
public:
	unsigned long                                      bBlockMovementLeftSide : 1;                               // 0x0158(0x0004) (Edit)
	unsigned long                                      bBlockMovementRightSide : 1;                              // 0x0158(0x0004) (Edit)
	unsigned long                                      bBlockViewLeftSide : 1;                                   // 0x0158(0x0004) (Edit)
	unsigned long                                      bBlockViewRightSide : 1;                                  // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_LimitSqueeze");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Limp
// 0x0001 (0x0159 - 0x0158)
class UOLSeqAct_Limp : public USequenceAction
{
public:
	TEnumAsByte<EHobbleIntensity>                      HobbleIntensity;                                          // 0x0158(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Limp");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_LinkToPushable
// 0x0034 (0x01A8 - 0x0174)
class UOLSeqAct_LinkToPushable : public USeqAct_Latent
{
public:
	struct FVector                                     LocationDelta;                                            // 0x0174(0x000C) (Edit)
	struct FRotator                                    RotationDelta;                                            // 0x0180(0x000C) (Edit)
	unsigned long                                      bLinkActive : 1;                                          // 0x018C(0x0004) (Transient)
	unsigned long                                      bHasLinkBeenActivated : 1;                                // 0x018C(0x0004) (Transient)
	struct FVector                                     InitialTargetLocation;                                    // 0x0190(0x000C) (Transient)
	struct FRotator                                    InitialTargetRotation;                                    // 0x019C(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_LinkToPushable");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_LoadingScreen
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_LoadingScreen : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_LoadingScreen");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_LockerFrenzy
// 0x0048 (0x01BC - 0x0174)
class UOLSeqAct_LockerFrenzy : public USeqAct_Latent
{
public:
	float                                              CrescendoDuration;                                        // 0x0174(0x0004) (Edit)
	float                                              TotalDuration;                                            // 0x0178(0x0004) (Edit)
	float                                              StartTimeInterval;                                        // 0x017C(0x0004) (Edit)
	float                                              EndTimeInterval;                                          // 0x0180(0x0004) (Edit)
	float                                              IntervalExponential;                                      // 0x0184(0x0004) (Edit)
	float                                              DoorAnimationDuration;                                    // 0x0188(0x0004) (Edit)
	float                                              DoorAnimationOpeningTimePct;                              // 0x018C(0x0004) (Edit)
	float                                              DoorAnimationOpenedTimePct;                               // 0x0190(0x0004) (Edit)
	float                                              DoorAnimationMaxAngle;                                    // 0x0194(0x0004) (Edit)
	class UAkEvent*                                    LockerDoorSound;                                          // 0x0198(0x0008) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x01A0(0x0004) (Transient)
	float                                              StartedTime;                                              // 0x01A4(0x0004) (Transient)
	float                                              ElapsedDoorActivationTime;                                // 0x01A8(0x0004) (Transient)
	TArray<class AOLDoor*>                             TargetDoors;                                              // 0x01AC(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_LockerFrenzy");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_MartaStreet
// 0x00D4 (0x0248 - 0x0174)
class UOLSeqAct_MartaStreet : public USeqAct_Latent
{
public:
	TArray<class AOLBashableObject*>                   BashableWalls;                                            // 0x0174(0x0010) (Edit, NeedCtorLink)
	TArray<class AOLMartaStreetVolume*>                Volumes;                                                  // 0x0184(0x0010) (Edit, NeedCtorLink)
	struct FMartaStreetUnspawnConditions               UnspawnConditions;                                        // 0x0194(0x0020) (Edit, NeedCtorLink)
	struct FMartaStreetRespawnConditions               RespawnConditions;                                        // 0x01B4(0x0018) (Edit, NeedCtorLink)
	float                                              PlayerKnockbackZoneFwd;                                   // 0x01CC(0x0004) (Edit)
	float                                              PlayerKnockbackZoneSide;                                  // 0x01D0(0x0004) (Edit)
	float                                              PlayerKnockbackStrength;                                  // 0x01D4(0x0004) (Edit)
	class AOLBot*                                      Marta;                                                    // 0x01D8(0x0008) (Transient)
	struct FMartaStreetState                           State;                                                    // 0x01E0(0x004C) (Transient)
	class AActor*                                      PressureSpawnPoint;                                       // 0x022C(0x0008) (Transient)
	TArray<class AActor*>                              UnusedPressedSpawnPoints;                                 // 0x0234(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      bRunning : 1;                                             // 0x0244(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_MartaStreet");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_MeshSwap
// 0x0010 (0x0168 - 0x0158)
class UOLSeqAct_MeshSwap : public USequenceAction
{
public:
	class USkeletalMesh*                               MeshOverride;                                             // 0x0158(0x0008) (Edit)
	class USkeletalMesh*                               HeadMeshOverride;                                         // 0x0160(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_MeshSwap");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_MonitorPlayerSpeed
// 0x001C (0x0190 - 0x0174)
class UOLSeqAct_MonitorPlayerSpeed : public USeqAct_Latent
{
public:
	float                                              MaxSpeedForIdle;                                          // 0x0174(0x0004) (Edit)
	float                                              MaxSpeedForWalk;                                          // 0x0178(0x0004) (Edit)
	float                                              MaxSpeedForRun;                                           // 0x017C(0x0004) (Edit)
	float                                              SpecificThreshold;                                        // 0x0180(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x0184(0x0004) (Transient)
	unsigned long                                      bBelowThreshold : 1;                                      // 0x0184(0x0004) (Transient)
	int                                                CurrentStateIdx;                                          // 0x0188(0x0004) (Transient)
	float                                              LastEventTime;                                            // 0x018C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_MonitorPlayerSpeed");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_NightVisionStatus
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_NightVisionStatus : public USequenceAction
{
public:
	float                                              ZoomedInPctThreshold;                                     // 0x0158(0x0004) (Edit)
	float                                              RemainingBatteries;                                       // 0x015C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_NightVisionStatus");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_NoBleeding
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_NoBleeding : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_NoBleeding");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Once
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_Once : public USequenceAction
{
public:
	unsigned long                                      bHasBeenActivatedAlready : 1;                             // 0x0158(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Once");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_OpenMainMenu
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_OpenMainMenu : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_OpenMainMenu");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_OutOfSight
// 0x0018 (0x018C - 0x0174)
class UOLSeqAct_OutOfSight : public USeqAct_Latent
{
public:
	TArray<struct FPendingOutOfSightOp>                PendingOps;                                               // 0x0174(0x0010) (Transient, NeedCtorLink)
	float                                              BackAngle;                                                // 0x0184(0x0004) (Edit)
	unsigned long                                      bReverseCondition : 1;                                    // 0x0188(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_OutOfSight");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_OverrideAIMusic
// 0x000C (0x0164 - 0x0158)
class UOLSeqAct_OverrideAIMusic : public USequenceAction
{
public:
	unsigned long                                      bSetAsMinimumState : 1;                                   // 0x0158(0x0004) (Edit)
	TEnumAsByte<EAIMusicState>                         MusicState;                                               // 0x015C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x015D(0x0003) MISSED OFFSET
	float                                              MusicDistance;                                            // 0x0160(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_OverrideAIMusic");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_OverrideAnimSets
// 0x0018 (0x0170 - 0x0158)
class UOLSeqAct_OverrideAnimSets : public USequenceAction
{
public:
	TArray<class UAnimSet*>                            AnimSetOverrides;                                         // 0x0158(0x0010) (Edit, NeedCtorLink)
	class UOLAIAnimConfig*                             AnimConfigOverride;                                       // 0x0168(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_OverrideAnimSets");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_OverrideDetailPosition
// 0x0008 (0x017C - 0x0174)
class UOLSeqAct_OverrideDetailPosition : public USeqAct_Latent
{
public:
	class AActor*                                      ActorPositionOverride;                                    // 0x0174(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_OverrideDetailPosition");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_OverrideFOV
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_OverrideFOV : public USequenceAction
{
public:
	float                                              OverriddenFOV;                                            // 0x0158(0x0004) (Edit)
	float                                              ApproachCoeff;                                            // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_OverrideFOV");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_OverrideRaftAttachmentMode
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_OverrideRaftAttachmentMode : public USequenceAction
{
public:
	unsigned long                                      bManual : 1;                                              // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_OverrideRaftAttachmentMode");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_OverrideRaftAttachmentSettings
// 0x0011 (0x0169 - 0x0158)
class UOLSeqAct_OverrideRaftAttachmentSettings : public USequenceAction
{
public:
	struct FVector                                     RaftOffset;                                               // 0x0158(0x000C) (Edit)
	float                                              RaftOffsetAdjustmentDuration;                             // 0x0164(0x0004) (Edit)
	TEnumAsByte<ERaftIdleAnimationType>                RaftProceduralAnimationType;                              // 0x0168(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_OverrideRaftAttachmentSettings");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_PairedWalk
// 0x0010 (0x0184 - 0x0174)
class UOLSeqAct_PairedWalk : public USeqAct_Latent
{
public:
	TEnumAsByte<EPairedWalkType>                       Type;                                                     // 0x0174(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0175(0x0003) MISSED OFFSET
	float                                              WalkSpeed;                                                // 0x0178(0x0004) (Edit)
	float                                              RunSpeed;                                                 // 0x017C(0x0004) (Edit)
	unsigned long                                      bBotIsDriving : 1;                                        // 0x0180(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x0180(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_PairedWalk");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_PairedWalkStyle
// 0x000C (0x0164 - 0x0158)
class UOLSeqAct_PairedWalkStyle : public USequenceAction
{
public:
	TEnumAsByte<EPairedWalkAnimStyle>                  AnimStyle;                                                // 0x0158(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	float                                              BlendTimeOverride;                                        // 0x015C(0x0004) (Edit)
	float                                              OverrideSpeed;                                            // 0x0160(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_PairedWalkStyle");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_PlayDoorAnim
// 0x0018 (0x0170 - 0x0158)
class UOLSeqAct_PlayDoorAnim : public USequenceAction
{
public:
	struct FName                                       AnimName;                                                 // 0x0158(0x0008) (Edit)
	class UAnimSet*                                    AnimSet;                                                  // 0x0160(0x0008) (Edit)
	unsigned long                                      bLooping : 1;                                             // 0x0168(0x0004) (Edit)
	float                                              PlayRate;                                                 // 0x016C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_PlayDoorAnim");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_PlayGoCheck
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_PlayGoCheck : public USequenceAction
{
public:
	unsigned long                                      bKickBackToMainMenuIfFailed : 1;                          // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_PlayGoCheck");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_PonyTail
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_PonyTail : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_PonyTail");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_PostProcessEffect
// 0x006C (0x01E0 - 0x0174)
class UOLSeqAct_PostProcessEffect : public USeqAct_Latent
{
public:
	struct FPPSEffectConfig                            Config;                                                   // 0x0174(0x004C) (Edit, Component, NeedCtorLink)
	struct FName                                       PresetName;                                               // 0x01C0(0x0008) (Edit)
	float                                              CancelBlendOutTime;                                       // 0x01C8(0x0004) (Edit)
	unsigned long                                      bKeepLastValues : 1;                                      // 0x01CC(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x01CC(0x0004) (Transient)
	TArray<struct FPPSEffectConfig>                    PresetConfigs;                                            // 0x01D0(0x0010) (Const, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_PostProcessEffect");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_PrepareMapTransition
// 0x00BC (0x0230 - 0x0174)
class UOLSeqAct_PrepareMapTransition : public USeqAct_Latent
{
public:
	struct FName                                       PersistentName;                                           // 0x0174(0x0008) (Edit)
	TArray<struct FName>                               LevelsToLoad;                                             // 0x017C(0x0010) (Edit, NeedCtorLink)
	TArray<struct FName>                               LevelsToShow;                                             // 0x018C(0x0010) (Edit, NeedCtorLink)
	TArray<struct FName>                               LevelsRequiredVisible;                                    // 0x019C(0x0010) (Edit, NeedCtorLink)
	TArray<struct FName>                               LevelsToUnload1;                                          // 0x01AC(0x0010) (Edit, NeedCtorLink)
	TArray<struct FName>                               LevelsToUnload2;                                          // 0x01BC(0x0010) (Edit, NeedCtorLink)
	TArray<struct FName>                               LevelsToUnload3;                                          // 0x01CC(0x0010) (Edit, NeedCtorLink)
	TArray<struct FName>                               LevelsToUnloadBeforePreload;                              // 0x01DC(0x0010) (Edit, NeedCtorLink)
	TArray<struct FName>                               LevelsToKeepLoaded;                                       // 0x01EC(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bKeepLoadedLevelsForReturnTrip : 1;                       // 0x01FC(0x0004) (Edit)
	unsigned long                                      bForceUnload1OnAutomaticPreload : 1;                      // 0x01FC(0x0004) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x01FC(0x0004) (Transient)
	unsigned long                                      bPreUnloadRequested : 1;                                  // 0x01FC(0x0004) (Transient)
	unsigned long                                      bPreUnloadDone : 1;                                       // 0x01FC(0x0004) (Transient)
	unsigned long                                      bPreloadingRequested : 1;                                 // 0x01FC(0x0004) (Transient)
	unsigned long                                      bPreloadingDone : 1;                                      // 0x01FC(0x0004) (Transient)
	unsigned long                                      bVisibilityRequested : 1;                                 // 0x01FC(0x0004) (Transient)
	unsigned long                                      bVisibilityDone : 1;                                      // 0x01FC(0x0004) (Transient)
	unsigned long                                      bFullUnloadRequested : 1;                                 // 0x01FC(0x0004) (Transient)
	unsigned long                                      bFullUnloadDone : 1;                                      // 0x01FC(0x0004) (Transient)
	float                                              DelayBetweenUnloads;                                      // 0x0200(0x0004) (Edit)
	float                                              DelayBetweenUnloadAndGC;                                  // 0x0204(0x0004) (Edit)
	int                                                UnloadActorsBatchSize;                                    // 0x0208(0x0004) (Edit)
	struct FName                                       CheckpointForAutomaticPreload;                            // 0x020C(0x0008) (Edit)
	int                                                PreloadDelay;                                             // 0x0214(0x0004) (Transient)
	TArray<struct FName>                               DelayedUnloadList;                                        // 0x0218(0x0010) (Transient, NeedCtorLink)
	float                                              NextUnloadTime;                                           // 0x0228(0x0004) (Transient)
	float                                              NextGCTime;                                               // 0x022C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_PrepareMapTransition");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_Pushable
// 0x0024 (0x017C - 0x0158)
class UOLSeqAct_Pushable : public USequenceAction
{
public:
	struct FVector                                     NewDisplacement;                                          // 0x0158(0x000C) (Edit)
	class AOLPushableSplineMarker*                     NewLinkedSpline;                                          // 0x0164(0x0008) (Edit)
	struct FVector                                     Impulse;                                                  // 0x016C(0x000C) (Edit)
	float                                              ResetSpeed;                                               // 0x0178(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Pushable");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_PushFoliage
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_PushFoliage : public USequenceAction
{
public:
	unsigned long                                      On : 1;                                                   // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_PushFoliage");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_QTEDrivenMatinee
// 0x003C (0x0194 - 0x0158)
class UOLSeqAct_QTEDrivenMatinee : public USequenceAction
{
public:
	unsigned long                                      bInterruptOnAttack : 1;                                   // 0x0158(0x0004) (Edit)
	unsigned long                                      bSucceedsOnMax : 1;                                       // 0x0158(0x0004) (Edit)
	unsigned long                                      bFailsOnMin : 1;                                          // 0x0158(0x0004) (Edit)
	unsigned long                                      bInputCancelDelay : 1;                                    // 0x0158(0x0004) (Edit)
	unsigned long                                      bForceFeedbackOnButtonMash : 1;                           // 0x0158(0x0004) (Edit)
	float                                              InitialValue;                                             // 0x015C(0x0004) (Edit)
	float                                              MinValue;                                                 // 0x0160(0x0004) (Edit)
	float                                              MaxValue;                                                 // 0x0164(0x0004) (Edit)
	float                                              InputForce;                                               // 0x0168(0x0004) (Edit)
	float                                              InputHoldForce;                                           // 0x016C(0x0004) (Edit)
	float                                              ResetForce;                                               // 0x0170(0x0004) (Edit)
	float                                              ValueApproachFactor;                                      // 0x0174(0x0004) (Edit)
	float                                              DelayBeforeRestForceApplied;                              // 0x0178(0x0004) (Edit)
	struct FName                                       PromptTextId;                                             // 0x017C(0x0008) (Edit)
	struct FName                                       RTPCName;                                                 // 0x0184(0x0008) (Edit)
	class UForceFeedbackWaveform*                      FFWaveform;                                               // 0x018C(0x0008) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_QTEDrivenMatinee");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_RaftBump
// 0x0014 (0x016C - 0x0158)
class UOLSeqAct_RaftBump : public USequenceAction
{
public:
	float                                              BumpForce;                                                // 0x0158(0x0004) (Edit)
	float                                              BumpTime;                                                 // 0x015C(0x0004) (Edit)
	float                                              PitchOffset;                                              // 0x0160(0x0004) (Edit)
	class UAkEvent*                                    AkEvent;                                                  // 0x0164(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_RaftBump");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_RailControl
// 0x003C (0x01B0 - 0x0174)
class UOLSeqAct_RailControl : public USeqAct_Latent
{
public:
	struct FName                                       SwitchDisabledGamestate;                                  // 0x0174(0x0008) (Edit)
	float                                              IntersectionStartDisplacement;                            // 0x017C(0x0004) (Edit)
	float                                              IntersectionEndDisplacementA;                             // 0x0180(0x0004) (Edit)
	float                                              IntersectionEndDisplacementB;                             // 0x0184(0x0004) (Edit)
	float                                              BreakLimitDisplacement;                                   // 0x0188(0x0004) (Edit)
	float                                              MinSpeedForBreakLimit;                                    // 0x018C(0x0004) (Edit)
	float                                              NoReturnSplineDisp;                                       // 0x0190(0x0004) (Edit)
	unsigned long                                      bInitialSplineAConnected : 1;                             // 0x0194(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x0194(0x0004) (Transient)
	unsigned long                                      bSplineAConnected : 1;                                    // 0x0194(0x0004) (Transient)
	unsigned long                                      bCSADisabled : 1;                                         // 0x0194(0x0004) (Transient)
	unsigned long                                      bBrokeLimit : 1;                                          // 0x0194(0x0004) (Transient)
	unsigned long                                      bPreventedReturn : 1;                                     // 0x0194(0x0004) (Transient)
	class AOLPushableObject*                           Pushable;                                                 // 0x0198(0x0008) (Transient)
	class AOLPushableSplineMarker*                     SplineA;                                                  // 0x01A0(0x0008) (Transient)
	class AOLPushableSplineMarker*                     SplineB;                                                  // 0x01A8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_RailControl");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_RainEffect
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_RainEffect : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_RainEffect");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_ReadDocument
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_ReadDocument : public USequenceAction
{
public:
	struct FName                                       DocumentName;                                             // 0x0158(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ReadDocument");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_RenderingOverrides
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_RenderingOverrides : public USequenceAction
{
public:
	struct FRenderingPerformanceOverrides              RenderingOverrides;                                       // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_RenderingOverrides");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_ResetAIConfig
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_ResetAIConfig : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ResetAIConfig");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_RiverMovement
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_RiverMovement : public USequenceAction
{
public:
	unsigned long                                      bClearVelocity : 1;                                       // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_RiverMovement");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_SelectRandom
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_SelectRandom : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_SelectRandom");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Sequence
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_Sequence : public USequenceAction
{
public:
	int                                                LinkCount;                                                // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Sequence");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_SetAIConfig
// 0x12C0 (0x1418 - 0x0158)
class UOLSeqAct_SetAIConfig : public USequenceAction
{
public:
	class UOLAIConfig*                                 Config;                                                   // 0x0158(0x0008) (Edit)
	struct FAIConfigData                               ConfigOverrides;                                          // 0x0160(0x12A4) (Edit)
	unsigned long                                      bSetAsDefaultConfig : 1;                                  // 0x1404(0x0004) (Edit)
	unsigned long                                      bCommentsUpToDate : 1;                                    // 0x1404(0x0004) (Transient)
	TArray<struct FString>                             MultiLineComments;                                        // 0x1408(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_SetAIConfig");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_SetLightProperties
// 0x0010 (0x0168 - 0x0158)
class UOLSeqAct_SetLightProperties : public USequenceAction
{
public:
	unsigned long                                      bOverride_Enabled : 1;                                    // 0x0158(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x0158(0x0004) (Edit)
	unsigned long                                      bOverride_Radius : 1;                                     // 0x0158(0x0004)
	unsigned long                                      bOverride_Color : 1;                                      // 0x0158(0x0004)
	unsigned long                                      bOverride_Brightness : 1;                                 // 0x0158(0x0004)
	float                                              Radius;                                                   // 0x015C(0x0004) (Edit)
	struct FColor                                      LightColor;                                               // 0x0160(0x0004) (Edit)
	float                                              BrightnessEV;                                             // 0x0164(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_SetLightProperties");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_SetObjective
// 0x0014 (0x016C - 0x0158)
class UOLSeqAct_SetObjective : public USequenceAction
{
public:
	struct FName                                       ObjectiveTextId;                                          // 0x0158(0x0008) (Edit)
	struct FName                                       ObjectiveVOPath;                                          // 0x0160(0x0008) (Edit)
	unsigned long                                      bActivateOnlyOnce : 1;                                    // 0x0168(0x0004) (Edit)
	unsigned long                                      bResetOnPlayerDeath : 1;                                  // 0x0168(0x0004) (Edit)
	unsigned long                                      bHasBeenActivated : 1;                                    // 0x0168(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_SetObjective");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_SetPlayerSpeed
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_SetPlayerSpeed : public USequenceAction
{
public:
	float                                              TargetSpeed;                                              // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_SetPlayerSpeed");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_SetPlayerWalkingStyle
// 0x0014 (0x016C - 0x0158)
class UOLSeqAct_SetPlayerWalkingStyle : public USequenceAction
{
public:
	TEnumAsByte<EHeroWalkingStyle>                     WalkingStyle;                                             // 0x0158(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	float                                              WalkSpeedOverride;                                        // 0x015C(0x0004) (Edit)
	float                                              RunSpeedOverride;                                         // 0x0160(0x0004) (Edit)
	float                                              AccelApproachFactorOverride;                              // 0x0164(0x0004) (Edit)
	float                                              DecelApproachFactorOverride;                              // 0x0168(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_SetPlayerWalkingStyle");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_SetVolumeThreshold
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_SetVolumeThreshold : public USequenceAction
{
public:
	float                                              NewThreshold;                                             // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_SetVolumeThreshold");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Silhouette
// 0x0065 (0x01D9 - 0x0174)
class UOLSeqAct_Silhouette : public USeqAct_Latent
{
public:
	unsigned long                                      bCanStartReady : 1;                                       // 0x0174(0x0004) (Edit)
	unsigned long                                      bVisibleWhenInactive : 1;                                 // 0x0174(0x0004) (Edit)
	unsigned long                                      bPerformLineCheck : 1;                                    // 0x0174(0x0004) (Edit)
	unsigned long                                      bSimpleCollisionCheck : 1;                                // 0x0174(0x0004) (Edit)
	unsigned long                                      bDriveDynamicData : 1;                                    // 0x0174(0x0004) (Edit)
	unsigned long                                      bHideOnlyMainMesh : 1;                                    // 0x0174(0x0004) (Edit)
	unsigned long                                      bJumpScare : 1;                                           // 0x0174(0x0004) (Edit)
	unsigned long                                      bNoMovementWhenVisible : 1;                               // 0x0174(0x0004) (Edit)
	unsigned long                                      bDisableOnLookBack : 1;                                   // 0x0174(0x0004) (Edit)
	unsigned long                                      bDisableCloseToSplineExtremities : 1;                     // 0x0174(0x0004) (Edit)
	unsigned long                                      bDisableIfPlayerTooFarFromSpline : 1;                     // 0x0174(0x0004) (Edit)
	unsigned long                                      bDisableIfCrouched : 1;                                   // 0x0174(0x0004) (Edit)
	unsigned long                                      bOnlyInNightVision : 1;                                   // 0x0174(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x0174(0x0004) (Transient)
	unsigned long                                      LastVisibilityCheckInFrustum : 1;                         // 0x0174(0x0004) (Transient)
	unsigned long                                      LastVisibilityCheckResult : 1;                            // 0x0174(0x0004) (Transient)
	float                                              ActivationRange;                                          // 0x0178(0x0004) (Edit)
	float                                              MinimumDistance;                                          // 0x017C(0x0004) (Edit)
	float                                              TargetRadius;                                             // 0x0180(0x0004) (Edit)
	float                                              EffectDuration;                                           // 0x0184(0x0004) (Edit)
	float                                              LineCheckInterval;                                        // 0x0188(0x0004) (Edit)
	class UMaterialInstance*                           MaterialTemplate;                                         // 0x018C(0x0008) (Edit)
	float                                              MaxPlayerRotationRateWhenVisible;                         // 0x0194(0x0004) (Edit)
	float                                              MaxPlayerSpeedWhenVisible;                                // 0x0198(0x0004) (Edit)
	float                                              MaxMovementDurationAfterDetached;                         // 0x019C(0x0004) (Edit)
	float                                              MinCameraPitch;                                           // 0x01A0(0x0004) (Edit)
	class AOLSplineGameplayMarker*                     LinkedSpline;                                             // 0x01A4(0x0008) (Edit)
	float                                              MinDistToPlayer;                                          // 0x01AC(0x0004) (Edit)
	float                                              MaxDistToPlayer;                                          // 0x01B0(0x0004) (Edit)
	float                                              MaxRandomSideOffset;                                      // 0x01B4(0x0004) (Edit)
	float                                              SpeedTowardsPlayer;                                       // 0x01B8(0x0004) (Edit)
	class AActor*                                      TargetActor;                                              // 0x01BC(0x0008) (Transient)
	float                                              StartedTime;                                              // 0x01C4(0x0004) (Transient)
	float                                              LastVisibilityCheckTime;                                  // 0x01C8(0x0004) (Transient)
	float                                              DistToPlayer;                                             // 0x01CC(0x0004) (Transient)
	float                                              SideOffset;                                               // 0x01D0(0x0004) (Transient)
	float                                              SplineSign;                                               // 0x01D4(0x0004) (Transient)
	TEnumAsByte<ESilhouetteState>                      CurrentState;                                             // 0x01D8(0x0001) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Silhouette");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_SkelMeshAnimControl
// 0x0038 (0x01AC - 0x0174)
class UOLSeqAct_SkelMeshAnimControl : public USeqAct_Latent
{
public:
	struct FName                                       BaseAnimName;                                             // 0x0174(0x0008) (Edit)
	TArray<struct FSkelMeshAnimParams>                 ExtraAnims;                                               // 0x017C(0x0010) (Edit, NeedCtorLink)
	struct FName                                       SlotName;                                                 // 0x018C(0x0008)
	struct FName                                       BaseAnimNodeName;                                         // 0x0194(0x0008)
	float                                              PlayRate;                                                 // 0x019C(0x0004) (Edit)
	unsigned long                                      bAnimFinishedOnBlendOut : 1;                              // 0x01A0(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x01A0(0x0004) (Transient)
	int                                                PlayingIdx;                                               // 0x01A4(0x0004) (Transient)
	float                                              LastAppliedPlayRate;                                      // 0x01A8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_SkelMeshAnimControl");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_SplashScreen
// 0x0004 (0x0178 - 0x0174)
class UOLSeqAct_SplashScreen : public USeqAct_Latent
{
public:
	unsigned long                                      bPauseGame : 1;                                           // 0x0174(0x0004) (Edit)
	unsigned long                                      bAlwaysReady : 1;                                         // 0x0174(0x0004) (Edit)
	unsigned long                                      bDone : 1;                                                // 0x0174(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_SplashScreen");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_SplineNode
// 0x0002 (0x0176 - 0x0174)
class UOLSeqAct_SplineNode : public USeqAct_Latent
{
public:
	TEnumAsByte<ESplineAction>                         PreviousNodes;                                            // 0x0174(0x0001) (Edit)
	TEnumAsByte<ESplineAction>                         NextNodes;                                                // 0x0175(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_SplineNode");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_StopCameraShake
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_StopCameraShake : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_StopCameraShake");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Struggle
// 0x00A0 (0x0214 - 0x0174)
class UOLSeqAct_Struggle : public USeqAct_Latent
{
public:
	struct FStruggleConfig                             Config;                                                   // 0x0174(0x007C) (Edit, NeedCtorLink)
	class ASkeletalMeshActor*                          Enemy;                                                    // 0x01F0(0x0008)
	struct FVector                                     RefLocation;                                              // 0x01F8(0x000C)
	struct FVector                                     RefDirection;                                             // 0x0204(0x000C)
	unsigned long                                      bSucceeded : 1;                                           // 0x0210(0x0004)
	unsigned long                                      bFailed : 1;                                              // 0x0210(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Struggle");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_TeleportExotic
// 0x0001 (0x0159 - 0x0158)
class UOLSeqAct_TeleportExotic : public USequenceAction
{
public:
	TEnumAsByte<ExoticTeleportType>                    Type;                                                     // 0x0158(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_TeleportExotic");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_TeleportRelative
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_TeleportRelative : public USequenceAction
{
public:
	unsigned long                                      bRecomputeFallingHeight : 1;                              // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_TeleportRelative");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Throwable
// 0x0060 (0x01D4 - 0x0174)
class UOLSeqAct_Throwable : public USeqAct_Latent
{
public:
	struct FThrowableSettings                          Settings;                                                 // 0x0174(0x004C) (Edit)
	class UStaticMesh*                                 ObjectMesh;                                               // 0x01C0(0x0008) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x01C8(0x0004) (Transient)
	unsigned long                                      bLaunched : 1;                                            // 0x01C8(0x0004) (Transient)
	class AOLThrowable*                                LaunchedThrowable;                                        // 0x01CC(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Throwable");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Tutorial
// 0x0028 (0x019C - 0x0174)
class UOLSeqAct_Tutorial : public USeqAct_Latent
{
public:
	struct FName                                       TutorialTextId;                                           // 0x0174(0x0008) (Edit)
	struct FName                                       TutorialTextIdGamepad;                                    // 0x017C(0x0008) (Edit)
	float                                              DisplayTime;                                              // 0x0184(0x0004) (Edit)
	float                                              DelayedTime;                                              // 0x0188(0x0004) (Edit)
	unsigned long                                      bShowEvenIfCompleted : 1;                                 // 0x018C(0x0004) (Edit)
	unsigned long                                      bIsDone : 1;                                              // 0x018C(0x0004)
	TEnumAsByte<ETutorialPriority>                     Priority;                                                 // 0x0190(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0191(0x0003) MISSED OFFSET
	int                                                TutorialId;                                               // 0x0194(0x0004)
	float                                              ElapsedTime;                                              // 0x0198(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Tutorial");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_UpdateProximityCache
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_UpdateProximityCache : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_UpdateProximityCache");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_VisibilityCheck
// 0x002C (0x01A0 - 0x0174)
class UOLSeqAct_VisibilityCheck : public USeqAct_Latent
{
public:
	float                                              TargetRadius;                                             // 0x0174(0x0004) (Edit)
	float                                              MaxDistance;                                              // 0x0178(0x0004) (Edit)
	unsigned long                                      bPerformLineTrace : 1;                                    // 0x017C(0x0004) (Edit)
	unsigned long                                      bAllowNonContinuousVisibility : 1;                        // 0x017C(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x017C(0x0004) (Transient)
	unsigned long                                      bWaitingForVisibility : 1;                                // 0x017C(0x0004) (Transient)
	float                                              LineCheckInterval;                                        // 0x0180(0x0004) (Edit)
	float                                              MinimumVisibleTime;                                       // 0x0184(0x0004) (Edit)
	float                                              MinimumNotVisibleTime;                                    // 0x0188(0x0004) (Edit)
	float                                              MaxAngleToScreenCenter;                                   // 0x018C(0x0004) (Edit)
	float                                              ValidStateStartedTime;                                    // 0x0190(0x0004) (Transient)
	float                                              ValidStateAccumulatedTime;                                // 0x0194(0x0004) (Transient)
	float                                              EffectiveLineCheckInterval;                               // 0x0198(0x0004) (Transient)
	float                                              NextTraceTime;                                            // 0x019C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_VisibilityCheck");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_WaitAndReact
// 0x0078 (0x01EC - 0x0174)
class UOLSeqAct_WaitAndReact : public USeqAct_Latent
{
public:
	struct FName                                       StartLoopAnim;                                            // 0x0174(0x0008) (Edit)
	struct FName                                       ReactionAnim;                                             // 0x017C(0x0008) (Edit)
	struct FName                                       AwareLoopAnim;                                            // 0x0184(0x0008) (Edit)
	struct FName                                       BackToUnawareAnim;                                        // 0x018C(0x0008) (Edit)
	struct FName                                       ExitAnim;                                                 // 0x0194(0x0008) (Edit)
	unsigned long                                      bMustReactBeforeExit : 1;                                 // 0x019C(0x0004) (Edit)
	unsigned long                                      bInterruptibleReaction : 1;                               // 0x019C(0x0004) (Edit)
	unsigned long                                      bBothConditionsForReaction : 1;                           // 0x019C(0x0004) (Edit)
	unsigned long                                      bBothConditionsForExit : 1;                               // 0x019C(0x0004) (Edit)
	unsigned long                                      bDisableCollision : 1;                                    // 0x019C(0x0004) (Edit)
	unsigned long                                      bDisablePhysics : 1;                                      // 0x019C(0x0004) (Edit)
	unsigned long                                      bDisableRootMotion : 1;                                   // 0x019C(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x019C(0x0004) (Transient)
	int                                                MaxBackToUnaware;                                         // 0x01A0(0x0004) (Edit)
	float                                              AwareDuration;                                            // 0x01A4(0x0004) (Edit)
	float                                              ReactionBlendTime;                                        // 0x01A8(0x0004) (Edit)
	float                                              ExitBlendTime;                                            // 0x01AC(0x0004) (Edit)
	float                                              BackToUnawareBlendTime;                                   // 0x01B0(0x0004) (Edit)
	float                                              StageMarkBlendTime;                                       // 0x01B4(0x0004) (Edit)
	float                                              MinDisturbanceForReaction;                                // 0x01B8(0x0004) (Edit)
	float                                              MinProximityForReaction;                                  // 0x01BC(0x0004) (Edit)
	float                                              MinDisturbanceForExit;                                    // 0x01C0(0x0004) (Edit)
	float                                              MinProximityForExit;                                      // 0x01C4(0x0004) (Edit)
	TArray<class UOLBotCondition*>                     ExtraConditionsForReaction;                               // 0x01C8(0x0010) (Edit, ExportObject, NeedCtorLink, EditInline)
	TArray<class UOLBotCondition*>                     ExtraConditionsForExit;                                   // 0x01D8(0x0010) (Edit, ExportObject, NeedCtorLink, EditInline)
	int                                                PendingOutputIdx;                                         // 0x01E8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_WaitAndReact");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_WaitForCamcorderEvent
// 0x000C (0x0180 - 0x0174)
class UOLSeqAct_WaitForCamcorderEvent : public USeqAct_Latent
{
public:
	TEnumAsByte<ECamcorderEventType>                   EventType;                                                // 0x0174(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0175(0x0003) MISSED OFFSET
	float                                              ZoomedInPctThreshold;                                     // 0x0178(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x017C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_WaitForCamcorderEvent");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_WaitForPlayerInput
// 0x0024 (0x0198 - 0x0174)
class UOLSeqAct_WaitForPlayerInput : public USeqAct_Latent
{
public:
	unsigned long                                      bInterruptOnAttack : 1;                                   // 0x0174(0x0004) (Edit)
	unsigned long                                      bOnClick : 1;                                             // 0x0174(0x0004) (Edit)
	unsigned long                                      bOnToggleCam : 1;                                         // 0x0174(0x0004) (Edit)
	unsigned long                                      bOnToggleMicrophone : 1;                                  // 0x0174(0x0004) (Edit)
	unsigned long                                      bWaiting : 1;                                             // 0x0174(0x0004) (Transient)
	struct FName                                       PromptTextId;                                             // 0x0178(0x0008) (Edit)
	float                                              MaxTime;                                                  // 0x0180(0x0004) (Edit)
	struct FString                                     TranslatedPrompt;                                         // 0x0184(0x0010) (Transient, NeedCtorLink)
	float                                              StartedTime;                                              // 0x0194(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_WaitForPlayerInput");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqAct_WaitForSpecialMove
// 0x0018 (0x018C - 0x0174)
class UOLSeqAct_WaitForSpecialMove : public USeqAct_Latent
{
public:
	TEnumAsByte<ESpecialMoveType>                      moveType;                                                 // 0x0174(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0175(0x0003) MISSED OFFSET
	unsigned long                                      bPreventMove : 1;                                         // 0x0178(0x0004) (Edit)
	unsigned long                                      bResetCountOnWait : 1;                                    // 0x0178(0x0004) (Edit)
	unsigned long                                      bWaiting : 1;                                             // 0x0178(0x0004) (Transient)
	int                                                MaxTriggerCount;                                          // 0x017C(0x0004) (Edit)
	int                                                TriggerCount;                                             // 0x0180(0x0004) (Transient)
	class AActor*                                      RefActor;                                                 // 0x0184(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_WaitForSpecialMove");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_WaitForSpecificConditions
// 0x002C (0x01A0 - 0x0174)
class UOLSeqAct_WaitForSpecificConditions : public USeqAct_Latent
{
public:
	TArray<TEnumAsByte<ESpecificConditionType>>        Conditions;                                               // 0x0174(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bIgnoreIfAlreadyTrue : 1;                                 // 0x0184(0x0004) (Edit)
	unsigned long                                      bRunning : 1;                                             // 0x0184(0x0004) (Transient)
	unsigned long                                      bCommentsUpToDate : 1;                                    // 0x0184(0x0004) (Transient)
	float                                              ActivationDelay;                                          // 0x0188(0x0004) (Edit)
	float                                              ConditionsSatisfiedTime;                                  // 0x018C(0x0004) (Transient)
	TArray<struct FString>                             MultiLineComments;                                        // 0x0190(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_WaitForSpecificConditions");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_WaitForTrigger
// 0x0004 (0x0178 - 0x0174)
class UOLSeqAct_WaitForTrigger : public USeqAct_Latent
{
public:
	unsigned long                                      bRunning : 1;                                             // 0x0174(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_WaitForTrigger");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Wardrobe
// 0x000C (0x0164 - 0x0158)
class UOLSeqAct_Wardrobe : public USequenceAction
{
public:
	float                                              RotationSpeedOverride;                                    // 0x0158(0x0004) (Edit)
	float                                              OpenAngle;                                                // 0x015C(0x0004) (Edit)
	unsigned long                                      bNoSound : 1;                                             // 0x0160(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Wardrobe");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_Window
// 0x0008 (0x0160 - 0x0158)
class UOLSeqAct_Window : public USequenceAction
{
public:
	float                                              ProceduralAnimSpeedOverride;                              // 0x0158(0x0004) (Edit)
	unsigned long                                      bNoSound : 1;                                             // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_Window");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_ZoomImpulse
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_ZoomImpulse : public USequenceAction
{
public:
	float                                              ImpulseScale;                                             // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ZoomImpulse");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_AIState
// 0x0000 (0x013C - 0x013C)
class UOLSeqCond_AIState : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_AIState");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqCond_Checkpoint
// 0x000C (0x0148 - 0x013C)
class UOLSeqCond_Checkpoint : public USequenceCondition
{
public:
	struct FName                                       CheckpointName;                                           // 0x013C(0x0008) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0144(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_Checkpoint");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqCond_DetailMode
// 0x0004 (0x0140 - 0x013C)
class UOLSeqCond_DetailMode : public USequenceCondition
{
public:
	unsigned long                                      bResult : 1;                                              // 0x013C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_DetailMode");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_DifficultyCondition
// 0x0006 (0x0142 - 0x013C)
class UOLSeqCond_DifficultyCondition : public USequenceCondition
{
public:
	unsigned long                                      bInversed : 1;                                            // 0x013C(0x0004) (Edit)
	TEnumAsByte<ESequenceDifficultyCondition>          ConditionType;                                            // 0x0140(0x0001) (Edit)
	TEnumAsByte<EDifficultyMode>                       Difficulty;                                               // 0x0141(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_DifficultyCondition");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_Direct3DVersion
// 0x0000 (0x013C - 0x013C)
class UOLSeqCond_Direct3DVersion : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_Direct3DVersion");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_GameState
// 0x000C (0x0148 - 0x013C)
class UOLSeqCond_GameState : public USequenceCondition
{
public:
	struct FName                                       GameStateName;                                            // 0x013C(0x0008) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0144(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_GameState");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_HasRecording
// 0x0008 (0x0144 - 0x013C)
class UOLSeqCond_HasRecording : public USequenceCondition
{
public:
	struct FName                                       RecordingName;                                            // 0x013C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_HasRecording");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_HeroLocomotionTime
// 0x0010 (0x014C - 0x013C)
class UOLSeqCond_HeroLocomotionTime : public USequenceCondition
{
public:
	float                                              Duration;                                                 // 0x013C(0x0004) (Edit)
	TEnumAsByte<ELocomotionMode>                       LocomotionMode;                                           // 0x0140(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0141(0x0003) MISSED OFFSET
	unsigned long                                      bNoSpecialCase : 1;                                       // 0x0144(0x0004) (Edit)
	unsigned long                                      bWaitActive : 1;                                          // 0x0144(0x0004) (Transient)
	float                                              TimeInLocomotion;                                         // 0x0148(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_HeroLocomotionTime");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_IncrementByDifficulty
// 0x0044 (0x0180 - 0x013C)
class UOLSeqCond_IncrementByDifficulty : public USequenceCondition
{
public:
	int                                                IncrementAmount;                                          // 0x013C(0x0004) (Edit)
	int                                                ValueA;                                                   // 0x0140(0x0004) (Edit)
	struct FIntByDifficulty                            ValueB;                                                   // 0x0144(0x0034) (Edit)
	int                                                InitialValue;                                             // 0x0178(0x0004) (Transient)
	unsigned long                                      bInitialValueSet : 1;                                     // 0x017C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_IncrementByDifficulty");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_IncrementFloatByDifficulty
// 0x0044 (0x0180 - 0x013C)
class UOLSeqCond_IncrementFloatByDifficulty : public USequenceCondition
{
public:
	float                                              IncrementAmount;                                          // 0x013C(0x0004) (Edit)
	float                                              ValueA;                                                   // 0x0140(0x0004) (Edit)
	struct FFloatByDifficulty                          ValueB;                                                   // 0x0144(0x0034) (Edit)
	int                                                InitialValue;                                             // 0x0178(0x0004) (Transient)
	unsigned long                                      bInitialValueSet : 1;                                     // 0x017C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_IncrementFloatByDifficulty");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_IsBotAlive
// 0x0000 (0x013C - 0x013C)
class UOLSeqCond_IsBotAlive : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_IsBotAlive");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_IsCensoredVersion
// 0x0004 (0x0140 - 0x013C)
class UOLSeqCond_IsCensoredVersion : public USequenceCondition
{
public:
	unsigned long                                      bResult : 1;                                              // 0x013C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_IsCensoredVersion");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_IsChinese
// 0x0000 (0x013C - 0x013C)
class UOLSeqCond_IsChinese : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_IsChinese");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_IsDemo
// 0x0004 (0x0140 - 0x013C)
class UOLSeqCond_IsDemo : public USequenceCondition
{
public:
	unsigned long                                      bResult : 1;                                              // 0x013C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_IsDemo");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqCond_IsDistortionActive
// 0x0000 (0x013C - 0x013C)
class UOLSeqCond_IsDistortionActive : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_IsDistortionActive");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_IsOutOfSight
// 0x0004 (0x0140 - 0x013C)
class UOLSeqCond_IsOutOfSight : public USequenceCondition
{
public:
	float                                              BackAngle;                                                // 0x013C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_IsOutOfSight");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_IsPlayerDying
// 0x0000 (0x013C - 0x013C)
class UOLSeqCond_IsPlayerDying : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_IsPlayerDying");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_IsTouching
// 0x0004 (0x0140 - 0x013C)
class UOLSeqCond_IsTouching : public USequenceCondition
{
public:
	unsigned long                                      bResult : 1;                                              // 0x013C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_IsTouching");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqCond_MartaStreetCond
// 0x0000 (0x013C - 0x013C)
class UOLSeqCond_MartaStreetCond : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_MartaStreetCond");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_OnSpline
// 0x0008 (0x0144 - 0x013C)
class UOLSeqCond_OnSpline : public USequenceCondition
{
public:
	float                                              DistanceToBeConsideredOnSpline;                           // 0x013C(0x0004) (Edit)
	float                                              AngleToBeConsideredOnSpline;                              // 0x0140(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_OnSpline");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_PlayerHealth
// 0x0004 (0x0140 - 0x013C)
class UOLSeqCond_PlayerHealth : public USequenceCondition
{
public:
	float                                              Threshold;                                                // 0x013C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_PlayerHealth");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqCond_PlayerSpeed
// 0x0014 (0x0150 - 0x013C)
class UOLSeqCond_PlayerSpeed : public USequenceCondition
{
public:
	float                                              MaxSpeedForIdle;                                          // 0x013C(0x0004) (Edit)
	float                                              MaxSpeedForWalk;                                          // 0x0140(0x0004) (Edit)
	float                                              MaxSpeedForRun;                                           // 0x0144(0x0004) (Edit)
	float                                              SpecificThreshold;                                        // 0x0148(0x0004) (Edit)
	unsigned long                                      bForwardVelocityOnly : 1;                                 // 0x014C(0x0004) (Edit)
	unsigned long                                      bResult : 1;                                              // 0x014C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_PlayerSpeed");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_SwitchByDifficulty
// 0x0000 (0x013C - 0x013C)
class UOLSeqCond_SwitchByDifficulty : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_SwitchByDifficulty");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_TutorialSeen
// 0x0008 (0x0144 - 0x013C)
class UOLSeqCond_TutorialSeen : public USequenceCondition
{
public:
	struct FName                                       TutorialTextId;                                           // 0x013C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_TutorialSeen");
		return ptr;
	}

};


// Class OLGame.OLSeqCond_TutorialsEnabled
// 0x0000 (0x013C - 0x013C)
class UOLSeqCond_TutorialsEnabled : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqCond_TutorialsEnabled");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_AILostTarget
// 0x0004 (0x017C - 0x0178)
class UOLSeqEvent_AILostTarget : public USequenceEvent
{
public:
	unsigned long                                      bOnlyAfterChase : 1;                                      // 0x0178(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_AILostTarget");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_AITrigger
// 0x0010 (0x0188 - 0x0178)
class UOLSeqEvent_AITrigger : public USequenceEvent
{
public:
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                            // 0x0178(0x0010) (Edit, DuplicateTransient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_AITrigger");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_AIWaypointAction
// 0x0000 (0x0178 - 0x0178)
class UOLSeqEvent_AIWaypointAction : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_AIWaypointAction");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_ApplyCheckpointState
// 0x0014 (0x018C - 0x0178)
class UOLSeqEvent_ApplyCheckpointState : public USequenceEvent
{
public:
	struct FName                                       CheckpointName;                                           // 0x0178(0x0008) (Edit)
	struct FName                                       RangeEndCheckpoint;                                       // 0x0180(0x0008) (Edit)
	unsigned long                                      bApplyImmediatelyWhenReached : 1;                         // 0x0188(0x0004) (Edit)
	unsigned long                                      bApplyImmediatelyWhenCompleted : 1;                       // 0x0188(0x0004) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0188(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_ApplyCheckpointState");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqEvent_ApplyGameState
// 0x000C (0x0184 - 0x0178)
class UOLSeqEvent_ApplyGameState : public USequenceEvent
{
public:
	struct FName                                       GameStateName;                                            // 0x0178(0x0008) (Edit)
	unsigned long                                      bApplyImmediatlyWhenChanged : 1;                          // 0x0180(0x0004) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0180(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_ApplyGameState");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_BandageUsed
// 0x0000 (0x0178 - 0x0178)
class UOLSeqEvent_BandageUsed : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_BandageUsed");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_Barrel
// 0x0010 (0x0188 - 0x0178)
class UOLSeqEvent_Barrel : public USequenceEvent
{
public:
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                            // 0x0178(0x0010) (Edit, DuplicateTransient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_Barrel");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_Bashable
// 0x0010 (0x0188 - 0x0178)
class UOLSeqEvent_Bashable : public USequenceEvent
{
public:
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                            // 0x0178(0x0010) (Edit, DuplicateTransient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_Bashable");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqEvent_CSAActivated
// 0x0004 (0x017C - 0x0178)
class UOLSeqEvent_CSAActivated : public USequenceEvent
{
public:
	unsigned long                                      bTriggerOnCompletion : 1;                                 // 0x0178(0x0004) (Edit)
	unsigned long                                      bTriggerOnAnimationEvent : 1;                             // 0x0178(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_CSAActivated");
		return ptr;
	}


	void Toggled();
};


// Class OLGame.OLSeqEvent_DieInRiver
// 0x0000 (0x0178 - 0x0178)
class UOLSeqEvent_DieInRiver : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_DieInRiver");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_Door
// 0x0020 (0x0198 - 0x0178)
class UOLSeqEvent_Door : public USequenceEvent
{
public:
	float                                              OpenThreshold;                                            // 0x0178(0x0004) (Edit)
	float                                              MinOpenAngleForQuietOpen;                                 // 0x017C(0x0004) (Edit)
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                            // 0x0180(0x0010) (Edit, DuplicateTransient, NeedCtorLink)
	TEnumAsByte<EDoorOpenEventFilter>                  OpenEventFilter;                                          // 0x0190(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0191(0x0003) MISSED OFFSET
	unsigned long                                      bOpenThresholdOnlyForInteractiveOpen : 1;                 // 0x0194(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_Door");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class OLGame.OLSeqEvent_Drop
// 0x0000 (0x0178 - 0x0178)
class UOLSeqEvent_Drop : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_Drop");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_GameFlowControlledMaterial
// 0x003C (0x01B4 - 0x0178)
class UOLSeqEvent_GameFlowControlledMaterial : public USequenceEvent
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                                  // 0x0178(0x0008) (Edit)
	class AActor*                                      CloneOnObject;                                            // 0x0180(0x0008) (Edit)
	struct FName                                       ParamName;                                                // 0x0188(0x0008) (Edit)
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                            // 0x0190(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bDefaultToOn : 1;                                         // 0x01A0(0x0004) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x01A0(0x0004) (Transient)
	float                                              OnValue;                                                  // 0x01A4(0x0004) (Edit)
	float                                              OffValue;                                                 // 0x01A8(0x0004) (Edit)
	class UMaterialInstanceConstant*                   ClonedMaterialInstance;                                   // 0x01AC(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_GameFlowControlledMaterial");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_HeroChased
// 0x0000 (0x0178 - 0x0178)
class UOLSeqEvent_HeroChased : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_HeroChased");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_InvestigationPointEvent
// 0x0000 (0x0178 - 0x0178)
class UOLSeqEvent_InvestigationPointEvent : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_InvestigationPointEvent");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_LevelInit
// 0x0000 (0x0178 - 0x0178)
class UOLSeqEvent_LevelInit : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_LevelInit");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_NightVision
// 0x0000 (0x0178 - 0x0178)
class UOLSeqEvent_NightVision : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_NightVision");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_Pickup
// 0x0000 (0x0178 - 0x0178)
class UOLSeqEvent_Pickup : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_Pickup");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_Pushable
// 0x0010 (0x0188 - 0x0178)
class UOLSeqEvent_Pushable : public USequenceEvent
{
public:
	float                                              LimitBack;                                                // 0x0178(0x0004) (Edit)
	float                                              LimitFwd;                                                 // 0x017C(0x0004) (Edit)
	float                                              MinSpeedForLimitReached;                                  // 0x0180(0x0004) (Edit)
	unsigned long                                      bLimitReachedBack : 1;                                    // 0x0184(0x0004) (Transient)
	unsigned long                                      bLimitReachedFwd : 1;                                     // 0x0184(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_Pushable");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_PushableTrigger
// 0x0000 (0x0178 - 0x0178)
class UOLSeqEvent_PushableTrigger : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_PushableTrigger");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_RecordingComplete
// 0x0000 (0x0178 - 0x0178)
class UOLSeqEvent_RecordingComplete : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_RecordingComplete");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_RecordingStarted
// 0x0000 (0x0178 - 0x0178)
class UOLSeqEvent_RecordingStarted : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_RecordingStarted");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_SpawnedAtCheckpoint
// 0x000C (0x0184 - 0x0178)
class UOLSeqEvent_SpawnedAtCheckpoint : public USequenceEvent
{
public:
	struct FName                                       CheckpointName;                                           // 0x0178(0x0008) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0180(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_SpawnedAtCheckpoint");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_TutorialDisabled
// 0x0000 (0x0178 - 0x0178)
class UOLSeqEvent_TutorialDisabled : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_TutorialDisabled");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_Underwater
// 0x0000 (0x0178 - 0x0178)
class UOLSeqEvent_Underwater : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_Underwater");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_Wardrobe
// 0x0010 (0x0188 - 0x0178)
class UOLSeqEvent_Wardrobe : public USequenceEvent
{
public:
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                            // 0x0178(0x0010) (Edit, DuplicateTransient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_Wardrobe");
		return ptr;
	}

};


// Class OLGame.OLSeqEvent_Window
// 0x0010 (0x0188 - 0x0178)
class UOLSeqEvent_Window : public USequenceEvent
{
public:
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                            // 0x0178(0x0010) (Edit, DuplicateTransient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqEvent_Window");
		return ptr;
	}

};


// Class OLGame.ActorFactoryOLAIInvestigationPoint
// 0x0000 (0x00A4 - 0x00A4)
class UActorFactoryOLAIInvestigationPoint : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.ActorFactoryOLAIInvestigationPoint");
		return ptr;
	}

};


// Class OLGame.ActorFactoryOLLedgeMarker
// 0x0000 (0x00A4 - 0x00A4)
class UActorFactoryOLLedgeMarker : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.ActorFactoryOLLedgeMarker");
		return ptr;
	}

};


// Class OLGame.ActorFactoryOLPositionMarker
// 0x0000 (0x00A4 - 0x00A4)
class UActorFactoryOLPositionMarker : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.ActorFactoryOLPositionMarker");
		return ptr;
	}

};


// Class OLGame.OLPositionMarker
// 0x0000 (0x0248 - 0x0248)
class AOLPositionMarker : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLPositionMarker");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_ToggleAIIgnorePlayer
// 0x0004 (0x015C - 0x0158)
class UOLSeqAct_ToggleAIIgnorePlayer : public USequenceAction
{
public:
	unsigned long                                      bSetOnGroup : 1;                                          // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ToggleAIIgnorePlayer");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_ToggleAIAlwaysSeePlayer
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_ToggleAIAlwaysSeePlayer : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_ToggleAIAlwaysSeePlayer");
		return ptr;
	}

};


// Class OLGame.OLGFxMoviePlayer
// 0x0000 (0x01EC - 0x01EC)
class UOLGFxMoviePlayer : public UGFxMoviePlayer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLGFxMoviePlayer");
		return ptr;
	}


	void OnProfileWriteComplete(unsigned char LocalUserNum, bool bWasSuccessful);
	bool SaveProfile(const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate, class AOLPlayerController* PlayerToSave);
	TScriptInterface<class UOnlinePlayerInterface> STATIC_GetOnlinePlayerInterface();
	void MuteSoundThemes(bool bMute);
	class AOLGame* STATIC_GetGame();
	class AOLPlayerController* GetOLPC();
};


// Class OLGame.OLUIMessage
// 0x0018 (0x0204 - 0x01EC)
class UOLUIMessage : public UOLGFxMoviePlayer
{
public:
	class UGFxClikWidget*                              MessageBox;                                               // 0x01EC(0x0008)
	float                                              MessageXPos;                                              // 0x01F4(0x0004)
	float                                              MessageYPos;                                              // 0x01F8(0x0004)
	float                                              MessageWidth;                                             // 0x01FC(0x0004)
	float                                              MessageHeight;                                            // 0x0200(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIMessage");
		return ptr;
	}


	void SetPCQTELabels(const struct FString& upStr, const struct FString& leftStr, const struct FString& downStr, const struct FString& rightStr);
	void SetSubtitleHeight(bool hight);
	bool TryClose();
	int TryCloseInternal();
	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	void SetMessage(TEnumAsByte<EHUDMessageType> MessageType, const struct FString& Message);
	void SetVisible(bool bVisible);
	void OnClose();
	bool Start(bool StartPaused);
};


// Class OLGame.OLUIMessage_Console
// 0x0000 (0x0204 - 0x0204)
class UOLUIMessage_Console : public UOLUIMessage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIMessage_Console");
		return ptr;
	}

};


// Class OLGame.OLUIMessage_ConsoleXbox
// 0x0000 (0x0204 - 0x0204)
class UOLUIMessage_ConsoleXbox : public UOLUIMessage_Console
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIMessage_ConsoleXbox");
		return ptr;
	}

};


// Class OLGame.OLPlayerReplicationInfo
// 0x0000 (0x0414 - 0x0414)
class AOLPlayerReplicationInfo : public APlayerReplicationInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLPlayerReplicationInfo");
		return ptr;
	}

};


// Class OLGame.OLCamera
// 0x0000 (0x0668 - 0x0668)
class AOLCamera : public ACamera
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLCamera");
		return ptr;
	}

};


// Class OLGame.OLUIFrontEnd
// 0x0108 (0x02F4 - 0x01EC)
class UOLUIFrontEnd : public UOLGFxMoviePlayer
{
public:
	struct FName                                       EscapeMenuKey;                                            // 0x01EC(0x0008)
	struct FName                                       TabMenuKey;                                               // 0x01F4(0x0008)
	struct FName                                       RecordingMenuKey;                                         // 0x01FC(0x0008)
	struct FName                                       EvidenceMenuKey;                                          // 0x0204(0x0008)
	class UGFxObject*                                  RootMC;                                                   // 0x020C(0x0008)
	class UGFxObject*                                  ManagerMC;                                                // 0x0214(0x0008)
	unsigned long                                      bInitialized : 1;                                         // 0x021C(0x0004)
	unsigned long                                      bCapturingKeyBinding : 1;                                 // 0x021C(0x0004)
	TEnumAsByte<EMenuType>                             MenuType;                                                 // 0x0220(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0221(0x0003) MISSED OFFSET
	class UOLUIFrontEnd_MainMenu*                      MainMenuView;                                             // 0x0224(0x0008)
	class UOLUIFrontEnd_PauseMenu*                     PauseMenuView;                                            // 0x022C(0x0008)
	class UOLUIFrontEnd_PausedPrompt*                  PausedPromptView;                                         // 0x0234(0x0008)
	class UOLUIFrontEnd_SaveLocationList*              SaveLocationList;                                         // 0x023C(0x0008)
	class UOLUIFrontEnd_Options*                       OptionsView;                                              // 0x0244(0x0008)
	class UOLUIFrontEnd_Screen*                        GammaScreenView;                                          // 0x024C(0x0008)
	class UOLUIFrontEnd_Screen*                        GamepadScreenView;                                        // 0x0254(0x0008)
	class UOLUIFrontEnd_Credits*                       CreditsView;                                              // 0x025C(0x0008)
	class UOLUIFrontEnd_DifficultySelectionScreen*     DifficultySelectionView;                                  // 0x0264(0x0008)
	class UOLUIFrontEnd_ChapterSelection*              ChapterSelection;                                         // 0x026C(0x0008)
	class UOLUIFrontEnd_CleanText*                     CleanTextView;                                            // 0x0274(0x0008)
	class UOLUIFrontEnd_RecordingMenu*                 RecordingMenuView;                                        // 0x027C(0x0008)
	struct FString                                     CleanTextName;                                            // 0x0284(0x0010) (NeedCtorLink)
	struct FString                                     CleanTextTitle;                                           // 0x0294(0x0010) (NeedCtorLink)
	struct FString                                     CleanTextMessage;                                         // 0x02A4(0x0010) (NeedCtorLink)
	struct FString                                     CancelCaptureKeyName;                                     // 0x02B4(0x0010) (Const, NeedCtorLink)
	TArray<struct FViewInfo>                           ViewData;                                                 // 0x02C4(0x0010) (Config, NeedCtorLink)
	TArray<class UOLUIFrontEnd_View*>                  ViewStack;                                                // 0x02D4(0x0010) (NeedCtorLink)
	TArray<struct FName>                               LoadedViews;                                              // 0x02E4(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd");
		return ptr;
	}


	void NotifyAltEnter();
	struct FString GetLocalizedString(const struct FString& Category, const struct FString& KeyName, const struct FString& File);
	struct FString GetGamepadActionBoundToKey(const struct FString& KeyNameString, int ConfigType);
	bool HasInitializedGamma();
	struct FString GetFriendlyKeyBindingName(const struct FString& KeyName);
	void StartKeyBindingCapture();
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	void ConfigureTargetView(class UOLUIFrontEnd_View* targetView);
	void ConfigureView(class UOLUIFrontEnd_View* InView, const struct FName& WidgetName, const struct FName& WidgetPath);
	class UGFxObject* PopViewStub();
	class UGFxObject* PopView();
	void PushViewByName(const struct FName& TargetViewName, class UOLUIFrontEnd_Screen* ParentView);
	void PushView(class UOLUIFrontEnd_View* targetView);
	void LoadView(const struct FViewInfo& InViewInfo);
	void LoadViews();
	void CleanViews();
	void ConfigFrontEnd();
	void OnKeyBindingsChanged();
	void AddCaptureKeys();
	void OnClose();
	bool Start(bool StartPaused);
};


// Class OLGame.OLUIFrontEnd_View
// 0x0010 (0x00B8 - 0x00A8)
class UOLUIFrontEnd_View : public UGFxObject
{
public:
	class UOLUIFrontEnd*                               MenuManager;                                              // 0x00A8(0x0008)
	struct FName                                       ViewName;                                                 // 0x00B0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_View");
		return ptr;
	}


	void InputTypeChanged();
	void ASHideDialogs();
	void OnKeyBindingCancelled();
	void OnKeyBindingCaptured(const struct FName& KeyName);
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	bool back();
	void NotifyAltEnter();
	void OnViewDeactivated();
	void OnViewActivated();
	void OnTopMostView(bool bPlayOpenAnimation);
	void OnViewLoaded();
};


// Class OLGame.OLUIFrontEnd_Screen
// 0x0084 (0x013C - 0x00B8)
class UOLUIFrontEnd_Screen : public UOLUIFrontEnd_View
{
public:
	struct FString                                     ViewTitle;                                                // 0x00B8(0x0010) (Config, NeedCtorLink)
	float                                              DefaultGamma;                                             // 0x00C8(0x0004) (Config)
	struct FString                                     BackText;                                                 // 0x00CC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     EnterText;                                                // 0x00DC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     YesText;                                                  // 0x00EC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     NoText;                                                   // 0x00FC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     CloseText;                                                // 0x010C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     AcceptText;                                               // 0x011C(0x0010) (Const, Localized, NeedCtorLink)
	class UGFxObject*                                  CircleLabel;                                              // 0x012C(0x0008) (Transient)
	class UGFxObject*                                  CrossLabel;                                               // 0x0134(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_Screen");
		return ptr;
	}


	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	struct FString LocalizeGeneric(const struct FString& SectionName, const struct FString& KeyName);
	struct FString LocalizeNarrative(const struct FString& SectionName, const struct FString& KeyName);
	bool IsDLCInstalled();
	bool IsPlaytest();
	bool IsDemo();
	bool IsTopMostView();
};


// Class OLGame.OLUIFrontEnd_MainMenu
// 0x018C (0x02C8 - 0x013C)
class UOLUIFrontEnd_MainMenu : public UOLUIFrontEnd_Screen
{
public:
	struct FString                                     MainMenu_ContinueText;                                    // 0x013C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MainMenu_StartText;                                       // 0x014C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MainMenu_PlayDemoText;                                    // 0x015C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MainMenu_LoadText;                                        // 0x016C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MainMenu_OptionsText;                                     // 0x017C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MainMenu_CreditsText;                                     // 0x018C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MainMenu_ExitText;                                        // 0x019C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MainMenu_NewGameIntroText;                                // 0x01AC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MainMenu_IntroContext;                                    // 0x01BC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MainMenu_ChaptersText;                                    // 0x01CC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MainMenu_StartDLCText;                                    // 0x01DC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MainMenu_PressStartText;                                  // 0x01EC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MainMenu_Recordings;                                      // 0x01FC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MainMenu_DeleteRecording_Title;                           // 0x020C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MainMenu_DeleteRecording_Message;                         // 0x021C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MainMenu_WaitingForContent;                               // 0x022C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MainMenu_ContentDownloading;                              // 0x023C(0x0010) (Const, Localized, NeedCtorLink)
	class UGFxClikWidget*                              ButtonBar;                                                // 0x024C(0x0008) (Transient)
	class UGFxClikWidget*                              IntroLabel;                                               // 0x0254(0x0008) (Transient)
	class UGFxClikWidget*                              OKButton;                                                 // 0x025C(0x0008) (Transient)
	class UGFxObject*                                  GamertagLabel;                                            // 0x0264(0x0008) (Transient)
	class UGFxObject*                                  GamertagButton;                                           // 0x026C(0x0008) (Transient)
	class UGFxClikWidget*                              GamertagContainer;                                        // 0x0274(0x0008) (Transient)
	int                                                ContinueButtonIndex;                                      // 0x027C(0x0004)
	int                                                StartButtonIndex;                                         // 0x0280(0x0004)
	int                                                StartDLCButtonIndex;                                      // 0x0284(0x0004)
	int                                                LoadButtonIndex;                                          // 0x0288(0x0004)
	int                                                OptionsButtonIndex;                                       // 0x028C(0x0004)
	int                                                CreditsButtonIndex;                                       // 0x0290(0x0004)
	int                                                ExitButtonIndex;                                          // 0x0294(0x0004)
	int                                                ChaptersButtonIndex;                                      // 0x0298(0x0004)
	int                                                RecordingButtonIndex;                                     // 0x029C(0x0004)
	unsigned long                                      bShowIntroMsg : 1;                                        // 0x02A0(0x0004)
	unsigned long                                      bShowingIntroMsg : 1;                                     // 0x02A0(0x0004)
	unsigned long                                      bWaitingForPopup : 1;                                     // 0x02A0(0x0004) (Transient)
	unsigned long                                      bWaitingForPopupReleased : 1;                             // 0x02A0(0x0004) (Transient)
	unsigned long                                      bConfirmButtonDown : 1;                                   // 0x02A0(0x0004) (Transient)
	unsigned long                                      bShowingBadCheckpointMsg : 1;                             // 0x02A0(0x0004) (Transient)
	unsigned long                                      bOnPressStartScreen : 1;                                  // 0x02A0(0x0004) (Transient)
	unsigned long                                      bPendingProfileSaveOnNewGame : 1;                         // 0x02A0(0x0004) (Transient)
	unsigned long                                      bRefreshContentDownloading : 1;                           // 0x02A0(0x0004)
	unsigned long                                      bDownloading : 1;                                         // 0x02A0(0x0004) (Transient)
	unsigned long                                      bPopulatedOnce : 1;                                       // 0x02A0(0x0004) (Transient)
	unsigned long                                      bButtonsMightBeDirty : 1;                                 // 0x02A0(0x0004) (Transient)
	unsigned long                                      bMenuFadingOut : 1;                                       // 0x02A0(0x0004) (Transient)
	int                                                IntroMessageIndex;                                        // 0x02A4(0x0004)
	struct FString                                     StartCPName;                                              // 0x02A8(0x0010) (NeedCtorLink)
	int                                                OverwritingSaveIdx;                                       // 0x02B8(0x0004)
	int                                                MaxNumberOfSaveSlot;                                      // 0x02BC(0x0004) (Const)
	float                                              OkButtonTimeElapsed;                                      // 0x02C0(0x0004) (Transient)
	int                                                FocusDelay;                                               // 0x02C4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_MainMenu");
		return ptr;
	}


	void TickGameDownload(float DeltaSeconds);
	void Tick(float DeltaSeconds);
	void ASInitButtonFocus();
	void ASShowNewGameIntroText();
	void ShowDeleteRecordingsConfirmationDialog(const struct FString& Title, const struct FString& Message, const struct FString& okButtonLabel, const struct FString& cancelButtonLabel, const struct FString& callbackName);
	void ShowMessageDialog(const struct FString& Title, const struct FString& Message, const struct FString& okButtonLabel, const struct FString& callbackName);
	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	void ShowPressStartScreen();
	void ForceShowLoginUI(int ControllerId);
	void OnPressStart(int ControllerId);
	void OnDingoUserInitialized(bool bSuccess);
	void OnButtonClick(const struct FEventData& ev);
	void SetMainMenuText(const struct FString& Message);
	void PopulateButtons();
	bool back();
	void OnRecordingsButtonPress(const struct FEventData& ev);
	void OnExitButtonPress(const struct FEventData& ev);
	void OnCreditsButtonPress(const struct FEventData& ev);
	void OnOptionsButtonPress(const struct FEventData& ev);
	void Select_Options();
	void OnSaveListButtonPress(const struct FEventData& ev);
	void OnLoadButtonPress(const struct FEventData& ev);
	void OnOK();
	void OnOKButtonClick(const struct FEventData& ev);
	void GoToNextIntroText(const struct FString& NextText);
	void OnChaptersButtonPress(const struct FEventData& ev);
	void OnStartDLCButtonPress(const struct FEventData& ev);
	void OnStartButtonPress(const struct FEventData& ev);
	void GameLoadedCallback(bool bSuccess);
	void StartNewGame();
	void DingoRecordingStorageDialogResult(int Type);
	void DifficultySelected();
	bool TrySkipSaveScreen();
	void ShowGamertag(const struct FString& Gamertag);
	void HideGametag();
	void SaveLocationSelected(bool bSuccess);
	void OnBadCheckpointMsgAcknowledged();
	void ShowBadCheckpointMsg();
	void OnContinueButtonPress(const struct FEventData& ev);
	void OnTopMostView(bool bPlayOpenAnimation);
	void OnViewLoaded();
};


// Class OLGame.OLUIFrontEnd_Credits
// 0x001C (0x0158 - 0x013C)
class UOLUIFrontEnd_Credits : public UOLUIFrontEnd_Screen
{
public:
	class UGFxClikWidget*                              BackButton;                                               // 0x013C(0x0008) (Transient)
	class UGFxObject*                                  CreditsScroll;                                            // 0x0144(0x0008) (Transient)
	unsigned long                                      bGameOver : 1;                                            // 0x014C(0x0004)
	class UAkEvent*                                    StopCreditMusicEvent;                                     // 0x0150(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_Credits");
		return ptr;
	}


	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	void SetCreditsText(const struct FString& Text);
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	void Press_Back(const struct FEventData& ev);
	void OnViewDeactivated();
	void StartCredits(bool bQuickstart);
	void OnTopMostView(bool bPlayOpenAnimation);
	void OnCreditsFadeOut();
	void OnCreditsFinished();
	bool back();
};


// Class OLGame.OLUIFrontEnd_CleanText
// 0x006C (0x01A8 - 0x013C)
class UOLUIFrontEnd_CleanText : public UOLUIFrontEnd_Screen
{
public:
	struct FString                                     Title;                                                    // 0x013C(0x0010) (Transient, NeedCtorLink)
	struct FString                                     Text;                                                     // 0x014C(0x0010) (Transient, NeedCtorLink)
	struct FString                                     TextName;                                                 // 0x015C(0x0010) (Transient, NeedCtorLink)
	class UGFxClikWidget*                              CloseBtn;                                                 // 0x016C(0x0008) (Transient)
	class UGFxClikWidget*                              PreviousBtn;                                              // 0x0174(0x0008) (Transient)
	class UGFxClikWidget*                              NextBtn;                                                  // 0x017C(0x0008) (Transient)
	struct FString                                     NextText;                                                 // 0x0184(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PreviousText;                                             // 0x0194(0x0010) (Const, Localized, NeedCtorLink)
	int                                                InputChangedDelay;                                        // 0x01A4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_CleanText");
		return ptr;
	}


	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	void Tick(float DeltaSeconds);
	void PreviousPage();
	void NextPage();
	void InitializeFocusControl(bool bIsController);
	void InputTypeChanged();
	void InitializeText(const struct FString& In_Title, const struct FString& In_Text, bool In_bIsGospel);
	bool back();
	void Press_Back(const struct FEventData& ev);
	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	void OnViewLoaded();
	void InitializeView();
	void OnTopMostView(bool bPlayOpenAnimation);
};


// Class OLGame.OLUIFrontEnd_Console
// 0x0000 (0x02F4 - 0x02F4)
class UOLUIFrontEnd_Console : public UOLUIFrontEnd
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_Console");
		return ptr;
	}


	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	void CleanViews();
};


// Class OLGame.OLUIFrontEnd_ConsoleXbox
// 0x0000 (0x02F4 - 0x02F4)
class UOLUIFrontEnd_ConsoleXbox : public UOLUIFrontEnd_Console
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_ConsoleXbox");
		return ptr;
	}

};


// Class OLGame.OLUIFrontEnd_GammaScreen_Console
// 0x0044 (0x0180 - 0x013C)
class UOLUIFrontEnd_GammaScreen_Console : public UOLUIFrontEnd_Screen
{
public:
	class UOLProfileSettings*                          MyProfile;                                                // 0x013C(0x0008) (Transient)
	struct FString                                     GammaConsole_LabelText;                                   // 0x0144(0x0010) (Const, Localized, NeedCtorLink)
	class UGFxClikWidget*                              AcceptButtonCentred;                                      // 0x0154(0x0008) (Transient)
	class UGFxClikWidget*                              AcceptButton;                                             // 0x015C(0x0008) (Transient)
	class UGFxClikWidget*                              BackButton;                                               // 0x0164(0x0008) (Transient)
	class UGFxClikWidget*                              GammaSlider;                                              // 0x016C(0x0008) (Transient)
	class UGFxObject*                                  GammaLabel;                                               // 0x0174(0x0008) (Transient)
	int                                                FocusDelay;                                               // 0x017C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_GammaScreen_Console");
		return ptr;
	}


	void ASDisableBackButton(bool bDisable);
	float GetCurrentGammaSetting();
	bool IsGammaInitialized();
	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	void Tick(float DeltaSeconds);
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	void Change_Slider(const struct FEventData& ev);
	void Pop();
	void OnViewDeactivated();
	bool back();
	void Press_Back(const struct FEventData& ev);
	void OnAccept();
	void Press_Accept(const struct FEventData& ev);
	void OnTopMostView(bool bPlayOpenAnimation);
	void OnViewLoaded();
};


// Class OLGame.OLUIFrontEnd_RecordingMenu
// 0x00F8 (0x0234 - 0x013C)
class UOLUIFrontEnd_RecordingMenu : public UOLUIFrontEnd_Screen
{
public:
	class UGFxObject*                                  ChaptersTitle;                                            // 0x013C(0x0008) (Transient)
	class UGFxObject*                                  ChapterButtons;                                           // 0x0144(0x0008) (Transient)
	class UGFxClikWidget*                              BackButton;                                               // 0x014C(0x0008) (Transient)
	class UGFxClikWidget*                              ImageBtnBack;                                             // 0x0154(0x0008) (Transient)
	class UGFxClikWidget*                              ImageBtnNext;                                             // 0x015C(0x0008) (Transient)
	class UGFxClikWidget*                              ImageBtnPrevious;                                         // 0x0164(0x0008) (Transient)
	class UGFxClikWidget*                              ImageBtnPlay;                                             // 0x016C(0x0008) (Transient)
	int                                                SelectedSectionIndex;                                     // 0x0174(0x0004) (Transient)
	int                                                SelectedFullSizeImage;                                    // 0x0178(0x0004) (Transient)
	unsigned long                                      bSelectionIsVideo : 1;                                    // 0x017C(0x0004) (Transient)
	unsigned long                                      bPlaying : 1;                                             // 0x017C(0x0004) (Transient)
	unsigned long                                      bPlayingVO : 1;                                           // 0x017C(0x0004) (Transient)
	unsigned long                                      bNoRoot : 1;                                              // 0x017C(0x0004)
	unsigned long                                      bQuitting : 1;                                            // 0x017C(0x0004) (Transient)
	class UAkEvent*                                    MovieLoopStart;                                           // 0x0180(0x0008) (Transient)
	class UAkEvent*                                    MovieLoopStop;                                            // 0x0188(0x0008) (Transient)
	class UAkEvent*                                    MovieVO;                                                  // 0x0190(0x0008) (Transient)
	struct FString                                     ChapterSelection_ChooseChapterTypeTitleText;              // 0x0198(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ChapterSelection_ChooseChapterTypeMessageText;            // 0x01A8(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ChapterSelection_ChooseChapterTypeNewGameText;            // 0x01B8(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ChapterSelection_ChooseChapterTypeSavedGameText;          // 0x01C8(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ChapterSelection_ChooseChapterTypeCancelText;             // 0x01D8(0x0010) (Const, Localized, NeedCtorLink)
	int                                                SortingType;                                              // 0x01E8(0x0004)
	int                                                SelectedChapterIndexBeforePopUp;                          // 0x01EC(0x0004)
	TArray<class UTexture*>                            CategoriesTexture;                                        // 0x01F0(0x0010) (NeedCtorLink)
	TArray<class UTexture*>                            ThumbnailsTextures;                                       // 0x0200(0x0010) (NeedCtorLink)
	TArray<class UTexture*>                            FullSizeTextures;                                         // 0x0210(0x0010) (NeedCtorLink)
	int                                                ButtonLinkedDelay;                                        // 0x0220(0x0004) (Transient)
	class UAkEvent*                                    EnterSoundEvent;                                          // 0x0224(0x0008)
	class UAkEvent*                                    ExitSoundEvent;                                           // 0x022C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_RecordingMenu");
		return ptr;
	}


	void InputTypeChanged();
	void selectConsole(const struct FString& Console);
	void InitializeFocusControl(bool bIsController);
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	void LinkButtons();
	void OnSetPlayButton(class UGFxClikWidget* Widget);
	void OnSetPreviousButton(class UGFxClikWidget* Widget);
	void OnSetNextButton(class UGFxClikWidget* Widget);
	void OnSetBackButton(class UGFxClikWidget* Widget);
	bool SetLargeImageSize(float SizeX, float SizeY, float PosX, float PosY);
	void PlayEvent();
	void Press_Play(const struct FEventData& ev);
	void PauseVideo(bool bForce);
	void StopVideo(bool bClearVO);
	void PlayVideo();
	void Press_Previous(const struct FEventData& ev);
	void Previous();
	void Press_Next(const struct FEventData& ev);
	void Next();
	void Press_Back(const struct FEventData& ev);
	bool back();
	void ShowChangeConfirmationDialog(const struct FString& Title, const struct FString& Message, const struct FString& okButtonLabel, const struct FString& noButtonLabel, const struct FString& cancelButtonLabel, const struct FString& callbackName);
	void ResetFocus(int focusIndex);
	void Tick(float DeltaTime);
	void ShowFullSizeImage(const struct FString& ImageURL, bool bIsVideo);
	void OnRecordingClicked(int Index);
	class UTexture* GetFullSizeTexture(int Index);
	void OnRecordingTypeClicked(int TypeIndex);
	void PopulateChapterList(bool bFocus);
	void InitiateThumbnailTextures(unsigned char Type, int ThumbSortingType);
	void InitiateCategoriesTextures();
	void Pop();
	void OnViewDeactivated();
	void OnViewActivated();
	void OnViewLoaded();
	void SetLocalizedStrings(const struct FString& Play, const struct FString& Pause, const struct FString& cleanText);
	void OnTopMostView(bool bPlayOpenAnimation);
};


// Class OLGame.OLMapInfo
// 0x0000 (0x0068 - 0x0068)
class UOLMapInfo : public UMapInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLMapInfo");
		return ptr;
	}

};


// Class OLGame.OLSeqAct_TieWrap
// 0x0000 (0x0158 - 0x0158)
class UOLSeqAct_TieWrap : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLSeqAct_TieWrap");
		return ptr;
	}

};


// Class OLGame.OLUIFrontEnd_ChapterSelection
// 0x0078 (0x01B4 - 0x013C)
class UOLUIFrontEnd_ChapterSelection : public UOLUIFrontEnd_Screen
{
public:
	class UGFxObject*                                  ChapterButtons;                                           // 0x013C(0x0008) (Transient)
	class UGFxClikWidget*                              BackButton;                                               // 0x0144(0x0008) (Transient)
	class UGFxClikWidget*                              ImageBtnBack;                                             // 0x014C(0x0008) (Transient)
	int                                                SelectedSectionIndex;                                     // 0x0154(0x0004) (Transient)
	struct FString                                     ChapterSelection_ChooseChapterTypeTitleText;              // 0x0158(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ChapterSelection_ChooseChapterTypeMessageText;            // 0x0168(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ChapterSelection_ChooseChapterTypeNewGameText;            // 0x0178(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ChapterSelection_ChooseChapterTypeSavedGameText;          // 0x0188(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ChapterSelection_ChooseChapterTypeCancelText;             // 0x0198(0x0010) (Const, Localized, NeedCtorLink)
	unsigned long                                      bWaitingForPopup : 1;                                     // 0x01A8(0x0004)
	unsigned long                                      bQuitting : 1;                                            // 0x01A8(0x0004) (Transient)
	int                                                SelectedChapterIndexBeforePopUp;                          // 0x01AC(0x0004)
	int                                                ButtonLinkedDelay;                                        // 0x01B0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_ChapterSelection");
		return ptr;
	}


	void Tick(float DeltaTime);
	void LinkButtons();
	void OnSetBackButton(class UGFxClikWidget* Widget);
	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	int GetCurrentSectionCount();
	int GetMaxSectionCount();
	void Press_Back(const struct FEventData& ev);
	bool back();
	void OnGameTypeSelect(int Type);
	void SaveLocationSelected(bool bSuccess);
	void OnChapterClicked(int chapterIndex, int buttonIndex);
	void ShowChangeConfirmationDialog(const struct FString& Title, const struct FString& Message, const struct FString& okButtonLabel, const struct FString& noButtonLabel, const struct FString& cancelButtonLabel, const struct FString& callbackName);
	void ResetFocus(int focusIndex);
	void OnSectionClicked(int SectionIndex);
	void PopulateChapterList(bool bFocus);
	void InitializeFocusControl(bool bIsController);
	void InputTypeChanged();
	struct FString STATIC_GetChapterName(const struct FName& CheckpointName);
	bool STATIC_HasValidChapters();
	void Pop();
	void OnViewActivated();
	void OnViewLoaded();
	void selectConsole(const struct FString& Console);
	void OnTopMostView(bool bPlayOpenAnimation);
};


// Class OLGame.OLUIFrontEnd_DifficultySelectionScreen
// 0x00D4 (0x0210 - 0x013C)
class UOLUIFrontEnd_DifficultySelectionScreen : public UOLUIFrontEnd_Screen
{
public:
	class UOLProfileSettings*                          MyProfile;                                                // 0x013C(0x0008) (Transient)
	struct FString                                     DifficultySelection_ChooseDifficultyText;                 // 0x0144(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     DifficultySelection_EasyText;                             // 0x0154(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     DifficultySelection_NormalText;                           // 0x0164(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     DifficultySelection_HardText;                             // 0x0174(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     DifficultySelection_NightmareText;                        // 0x0184(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     DifficultySelection_InsaneText;                           // 0x0194(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     DifficultySelection_ConfirmInsaneTitleText;               // 0x01A4(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     DifficultySelection_ConfirmInsaneMsgText;                 // 0x01B4(0x0010) (Const, Localized, NeedCtorLink)
	class UGFxClikWidget*                              EasyButton;                                               // 0x01C4(0x0008) (Transient)
	class UGFxClikWidget*                              NormalButton;                                             // 0x01CC(0x0008) (Transient)
	class UGFxClikWidget*                              HardButton;                                               // 0x01D4(0x0008) (Transient)
	class UGFxClikWidget*                              NightmareButton;                                          // 0x01DC(0x0008) (Transient)
	class UGFxClikWidget*                              InsaneButton;                                             // 0x01E4(0x0008) (Transient)
	class UGFxClikWidget*                              BackButton;                                               // 0x01EC(0x0008) (Transient)
	class UGFxObject*                                  InsaneLabel;                                              // 0x01F4(0x0008) (Transient)
	class UGFxObject*                                  TitleLabel;                                               // 0x01FC(0x0008) (Transient)
	unsigned long                                      bShowingInsaneConfirmDialog : 1;                          // 0x0204(0x0004) (Transient)
	unsigned long                                      bSpecificChapter : 1;                                     // 0x0204(0x0004)
	unsigned long                                      bQuitting : 1;                                            // 0x0204(0x0004) (Transient)
	float                                              InitializationTimestamp;                                  // 0x0208(0x0004) (Transient)
	float                                              InitializeDelay;                                          // 0x020C(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_DifficultySelectionScreen");
		return ptr;
	}


	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	void ASShowConfirmInsaneDialog(const struct FString& Title, const struct FString& Message, const struct FString& okButtonLabel, const struct FString& cancelButtonLabel, const struct FString& callbackName);
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	void Press_Back(const struct FEventData& ev);
	void Pop();
	void OnViewDeactivated();
	void ProceedToStartGame();
	void OnConfirmedInsane(bool bOk);
	void Press_Insane(const struct FEventData& ev);
	void Press_Nightmare(const struct FEventData& ev);
	void Press_Hard(const struct FEventData& ev);
	void Press_Normal(const struct FEventData& ev);
	void Press_Easy(const struct FEventData& ev);
	void OnTopMostView(bool bPlayOpenAnimation);
	void OnViewLoaded();
};


// Class OLGame.OLUIFrontEnd_Options
// 0x0244 (0x0380 - 0x013C)
class UOLUIFrontEnd_Options : public UOLUIFrontEnd_Screen
{
public:
	class UOLProfileSettings*                          MyProfile;                                                // 0x013C(0x0008) (Transient)
	struct FUniqueNetId                                OwningId;                                                 // 0x0144(0x0010)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x0154(0x0008)
	struct FString                                     Options_MouseSettingsText;                                // 0x015C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_MouseInvertYText;                                 // 0x016C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_MouseSensitivityText;                             // 0x017C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_ApplyText;                                        // 0x018C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_GammaText;                                        // 0x019C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_ResetText;                                        // 0x01AC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_GameplayText;                                     // 0x01BC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_GraphicsText;                                     // 0x01CC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_ControlsText;                                     // 0x01DC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_ConfirmResolutionTitleText;                       // 0x01EC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_ConfirmResolutionMessageText;                     // 0x01FC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_DiscardChangesTitleText;                          // 0x020C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_DiscardChangesMessageText;                        // 0x021C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_KeyBindingConflictTitleText;                      // 0x022C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_KeyBindingConflictMessageText;                    // 0x023C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_MustRestartTitleText;                             // 0x024C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_MustRestartMessageText;                           // 0x025C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_DifficultyOptionEasy;                             // 0x026C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_DifficultyOptionNormal;                           // 0x027C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_DifficultyOptionHard;                             // 0x028C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Options_DifficultyOptionNightmare;                        // 0x029C(0x0010) (Const, Localized, NeedCtorLink)
	class UGFxClikWidget*                              ApplyButton;                                              // 0x02AC(0x0008)
	class UGFxClikWidget*                              BackButton;                                               // 0x02B4(0x0008)
	class UGFxClikWidget*                              ResetButton;                                              // 0x02BC(0x0008)
	class UGFxClikWidget*                              TabButtons;                                               // 0x02C4(0x0008) (Transient)
	class UGFxObject*                                  GameplayList;                                             // 0x02CC(0x0008) (Transient)
	class UGFxObject*                                  GraphicsList;                                             // 0x02D4(0x0008) (Transient)
	class UGFxObject*                                  ControlsList;                                             // 0x02DC(0x0008) (Transient)
	unsigned long                                      bWaitingForPopup : 1;                                     // 0x02E4(0x0004)
	unsigned long                                      bSwitchingFromJpn : 1;                                    // 0x02E4(0x0004) (Transient)
	unsigned long                                      bActive : 1;                                              // 0x02E4(0x0004) (Transient)
	unsigned long                                      bQuitting : 1;                                            // 0x02E4(0x0004) (Transient)
	TArray<struct FName>                               ResolutionValueNames;                                     // 0x02E8(0x0010) (NeedCtorLink)
	TArray<struct FIntPoint>                           ResolutionValues;                                         // 0x02F8(0x0010) (NeedCtorLink)
	TArray<struct FOptionInfo>                         GeneralOptionsGameplayDefault;                            // 0x0308(0x0010) (NeedCtorLink)
	TArray<struct FOptionInfo>                         GeneralOptionsGameplayInsane;                             // 0x0318(0x0010) (NeedCtorLink)
	TArray<struct FOptionInfo>                         GeneralOptionsMainMenu;                                   // 0x0328(0x0010) (NeedCtorLink)
	TArray<struct FOptionInfo>                         GraphicsOptions;                                          // 0x0338(0x0010) (NeedCtorLink)
	TArray<struct FOptionInfo>                         ControlsOptions;                                          // 0x0348(0x0010) (NeedCtorLink)
	TEnumAsByte<EOptionTabs>                           CurrentTab;                                               // 0x0358(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0359(0x0003) MISSED OFFSET
	float                                              moveTabTimeStamp;                                         // 0x035C(0x0004) (Transient)
	int                                                PopUpFocusSelectedButtonIdx;                              // 0x0360(0x0004) (Transient)
	int                                                PopUpFocusDelay;                                          // 0x0364(0x0004) (Transient)
	class UGFxObject*                                  PopupSubmitButton;                                        // 0x0368(0x0008) (Transient)
	class UGFxObject*                                  PopupCancelButton;                                        // 0x0370(0x0008) (Transient)
	class UGFxObject*                                  PopupButtonToFocus;                                       // 0x0378(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_Options");
		return ptr;
	}


	void ASOnKeyBindingCancelled();
	void ASOnKeyBindingCaptured(const struct FString& KeyName);
	void ShowMessageDialog(const struct FString& Title, const struct FString& Message, const struct FString& okButtonLabel, const struct FString& callbackName);
	void ShowKeyBindingConflictDialog(const struct FString& Title, const struct FString& Message, const struct FString& okButtonLabel, const struct FString& cancelButtonLabel, const struct FString& callbackName);
	void ShowChangeConfirmationDialog(const struct FString& Title, const struct FString& Message, const struct FString& okButtonLabel, const struct FString& cancelButtonLabel, const struct FString& callbackName);
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	void Tick(float DeltaTime);
	void CloseDialog(int buttonIdx);
	void moveTab(int Side);
	void NotifyAltEnter();
	void OnSliderChanged(int ProfileSettingId, float SliderValue);
	TArray<struct FString> GetKeyBindingConflicts();
	class UGFxObject* GetCurrentGFxList();
	void SetGamepadConfigExternally(int ConfigIndex);
	int GetGamepadConfig();
	void OnKeyBindingCancelled();
	void OnKeyBindingCaptured(const struct FName& KeyName);
	int GetBorderlessFullscreenOptionIndex();
	int GetFullscreenOptionIndex();
	int GetResolutionOptionIndex();
	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	void SetSelectionFocus(class UGFxObject* MovieClip);
	class UOLProfileSettings* GetOLProfile();
	bool SaveSettingsToProfile(bool bApplyOnly);
	bool HasAnyPropertyChanged();
	bool HasPropertyChangedInList(class UGFxObject* OptionsList, TArray<struct FOptionInfo> OptionInfos);
	bool SaveSettingsForList(TArray<struct FOptionInfo> OptionInfos);
	void TabChanged(const struct FEventData& ev);
	void StoreOptionValuesForList(class UGFxObject* OptionsList, TArray<struct FOptionInfo>* OptionInfos);
	struct FString GetOptionValueStringAt(class UGFxObject* OptionsList, int Index);
	float GetOptionValueAt(class UGFxObject* OptionsList, int Index);
	bool SetDefaultOptionValuesForList(TArray<struct FOptionInfo>* OptionInfos);
	void FillOptionValuesForList(TArray<struct FOptionInfo>* OptionInfos);
	void FillOptionValuesFromProfile();
	void PopulateControlsOptions();
	void PopulateGraphicsOptions();
	void PopulateGeneralOptions(bool bIgnoreFocus);
	struct FString GetLabelTextFromOptionInfo(const struct FOptionInfo& Info);
	class UGFxObject* GetObjectFromOption(const struct FOptionInfo& CurrentOptionInfo);
	void PopulateTabButtons();
	bool UseInsaneGameplayOptions();
	bool UseMainMenuGameplayOptions();
	void Press_OptionItemButton(int PSID);
	void Press_Reset(const struct FEventData& ev);
	void Press_Gamma(const struct FEventData& ev);
	void Press_Back(const struct FEventData& ev);
	void OnDiscardChanges(int bOk);
	void OnDismissKeyBindingConflictDialog(bool bOk);
	void Press_Apply(const struct FEventData& ev);
	void OnMustRestartAccepted();
	void ExitOptionsScreen();
	bool back();
	void OnTopMostView(bool bPlayOpenAnimation);
	void OnViewDeactivated();
	void OnViewActivated();
	void OnViewLoaded();
};


// Class OLGame.OLUIFrontEnd_SaveLocationList
// 0x00E0 (0x021C - 0x013C)
class UOLUIFrontEnd_SaveLocationList : public UOLUIFrontEnd_Screen
{
public:
	struct FString                                     SaveLocationList_TitleSaving;                             // 0x013C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     SaveLocationList_TitleLoading;                            // 0x014C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     SaveLocationList_NewSaveLabel;                            // 0x015C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     SaveLocationList_DeleteLabel;                             // 0x016C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     SaveLocationList_ConfirmOverwriteTitleText;               // 0x017C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     SaveLocationList_ConfirmOverwriteMsgText;                 // 0x018C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     SaveLocationList_ConfirmDeleteTitleText;                  // 0x019C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     SaveLocationList_ConfirmDeleteMsgText;                    // 0x01AC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     SaveLocationList_ContentUnavailable;                      // 0x01BC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     SaveLocationList_CheckpointUnavailableForCheckpoint;      // 0x01CC(0x0010) (Const, Localized, NeedCtorLink)
	class UGFxClikWidget*                              BackButton;                                               // 0x01DC(0x0008) (Transient)
	class UGFxClikWidget*                              ButtonBar;                                                // 0x01E4(0x0008) (Transient)
	class UGFxObject*                                  TitleLabel;                                               // 0x01EC(0x0008) (Transient)
	unsigned long                                      bSaving : 1;                                              // 0x01F4(0x0004) (Transient)
	unsigned long                                      bHasNewSaveOption : 1;                                    // 0x01F4(0x0004) (Transient)
	unsigned long                                      bFromPauseMenu : 1;                                       // 0x01F4(0x0004) (Transient)
	unsigned long                                      bShowingMessageDialog : 1;                                // 0x01F4(0x0004) (Transient)
	unsigned long                                      bShowingConfirmOverwriteDialog : 1;                       // 0x01F4(0x0004) (Transient)
	unsigned long                                      bShowingConfirmDeleteDialog : 1;                          // 0x01F4(0x0004) (Transient)
	unsigned long                                      bQuitting : 1;                                            // 0x01F4(0x0004) (Transient)
	struct FString                                     startCP;                                                  // 0x01F8(0x0010) (Transient, NeedCtorLink)
	int                                                OverwritingSaveIdx;                                       // 0x0208(0x0004) (Transient)
	int                                                DeleteSaveIdx;                                            // 0x020C(0x0004) (Transient)
	int                                                MaxCheckpointId;                                          // 0x0210(0x0004) (Transient)
	class UGFxClikWidget*                              ActionButtonWidget;                                       // 0x0214(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_SaveLocationList");
		return ptr;
	}


	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	void SetupActionButtonString();
	int GetHighlightedIndex(bool bAllowSelectedIndex);
	void ASTraceFocus();
	void ASInitButtonFocus();
	void ASShowConfirmDialog(const struct FString& Title, const struct FString& Message, const struct FString& okButtonLabel, const struct FString& cancelButtonLabel, const struct FString& callbackName);
	void ShowMessageDialog(const struct FString& Title, const struct FString& Message, const struct FString& okButtonLabel, const struct FString& callbackName);
	bool back();
	void Press_Back(const struct FEventData& ev);
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	void ReloadScreen();
	void OnConfirmedDelete(bool bOk);
	void OnConfirmedOverwrite(bool bOk);
	void OnMessageDialogAcknowledged();
	void ShowContentNotAvailaible();
	void ShowBadCheckpointMsg();
	void OnButtonClick(const struct FEventData& ev);
	void ResetFocus(int focusIndex);
	void PopulateSaves();
	struct FString GetSaveFileDisplayName(const struct FSaveFileInfo& SaveFile);
	struct FString GetDifficultyStr(int Difficulty);
	void Pop();
	void InputTypeChanged();
	void OnViewDeactivated();
	void OnTopMostView(bool bPlayOpenAnimation);
	void selectConsole(const struct FString& Console);
	void OnViewLoaded();
	bool TrySkipScreen(const struct FString& StartCPName);
};


// Class OLGame.OLUIFrontEnd_PausedPrompt
// 0x0014 (0x0150 - 0x013C)
class UOLUIFrontEnd_PausedPrompt : public UOLUIFrontEnd_Screen
{
public:
	struct FString                                     MessageString;                                            // 0x013C(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      bGoBackToMainMenu : 1;                                    // 0x014C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_PausedPrompt");
		return ptr;
	}


	void SetMessage(const struct FString& Message);
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	void OnPressContinue(int ControllerId);
	void OnTopMostView(bool bPlayOpenAnimation);
	void OnViewLoaded();
};


// Class OLGame.OLUIFrontEnd_PauseMenu
// 0x00BC (0x01F8 - 0x013C)
class UOLUIFrontEnd_PauseMenu : public UOLUIFrontEnd_Screen
{
public:
	struct FString                                     PauseMenu_ReturnText;                                     // 0x013C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PauseMenu_OptionsText;                                    // 0x014C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PauseMenu_ExitToMenuText;                                 // 0x015C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PauseMenu_SaveAndExitText;                                // 0x016C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PauseMenu_SaveText;                                       // 0x017C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PauseMenu_ConfirmExitText;                                // 0x018C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PauseMenu_ConfirmExitInsaneText;                          // 0x019C(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PauseMenu_ConfirmExitTitle;                               // 0x01AC(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PauseMenu_ExitToWindowsText;                              // 0x01BC(0x0010) (Const, Localized, NeedCtorLink)
	class UGFxClikWidget*                              ButtonBar;                                                // 0x01CC(0x0008) (Transient)
	unsigned long                                      bHasSaveOption : 1;                                       // 0x01D4(0x0004) (Transient)
	unsigned long                                      bShowingConfirmExitDialog : 1;                            // 0x01D4(0x0004) (Transient)
	int                                                PopUpFocusSelectedButtonIdx;                              // 0x01D8(0x0004) (Transient)
	int                                                PopUpFocusDelay;                                          // 0x01DC(0x0004) (Transient)
	class UGFxObject*                                  PopupSubmitButton;                                        // 0x01E0(0x0008) (Transient)
	class UGFxObject*                                  PopupCancelButton;                                        // 0x01E8(0x0008) (Transient)
	class UGFxObject*                                  PopupButtonToFocus;                                       // 0x01F0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_PauseMenu");
		return ptr;
	}


	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	void Tick(float DeltaTime);
	void ASShowConfirmExitDialog(const struct FString& Title, const struct FString& Message, const struct FString& okButtonLabel, const struct FString& cancelButtonLabel, const struct FString& callbackName);
	void CloseDialog(int buttonIdx);
	void SetSelectionFocus(class UGFxObject* MovieClip);
	void OnExitConfirmed(bool bOk);
	void OnExitToMenuButtonPress(const struct FEventData& ev);
	bool back();
	void OnSaveCompleted(bool bSuccess);
	void OnSaveButtonPress(const struct FEventData& ev);
	void OnOptionsButtonPress(const struct FEventData& ev);
	void OnReturnButtonPress(const struct FEventData& ev);
	void OnButtonClick(const struct FEventData& ev);
	void PopulateButtons();
	void OnTopMostView(bool bPlayOpenAnimation);
	void OnViewLoaded();
};


// Class OLGame.OLUIFrontEnd_GammaScreen
// 0x0040 (0x017C - 0x013C)
class UOLUIFrontEnd_GammaScreen : public UOLUIFrontEnd_Screen
{
public:
	class UOLProfileSettings*                          MyProfile;                                                // 0x013C(0x0008) (Transient)
	struct FString                                     Gamma_LabelText;                                          // 0x0144(0x0010) (Const, Localized, NeedCtorLink)
	class UGFxClikWidget*                              AcceptButtonCentred;                                      // 0x0154(0x0008) (Transient)
	class UGFxClikWidget*                              AcceptButton;                                             // 0x015C(0x0008) (Transient)
	class UGFxClikWidget*                              BackButton;                                               // 0x0164(0x0008) (Transient)
	class UGFxClikWidget*                              GammaSlider;                                              // 0x016C(0x0008) (Transient)
	class UGFxObject*                                  GammaLabel;                                               // 0x0174(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_GammaScreen");
		return ptr;
	}


	float GetCurrentGammaSetting();
	bool IsGammaInitialized();
	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	void Change_Slider(const struct FEventData& ev);
	void Pop();
	void OnViewDeactivated();
	bool back();
	void Press_Back(const struct FEventData& ev);
	void OnAccept();
	void Press_Accept(const struct FEventData& ev);
	void OnTopMostView(bool bPlayOpenAnimation);
	void OnViewLoaded();
};


// Class OLGame.OLUIFrontEnd_GamepadScreen
// 0x001C (0x0158 - 0x013C)
class UOLUIFrontEnd_GamepadScreen : public UOLUIFrontEnd_Screen
{
public:
	class UGFxClikWidget*                              TabButtons;                                               // 0x013C(0x0008) (Transient)
	class UGFxClikWidget*                              AcceptButton;                                             // 0x0144(0x0008) (Transient)
	class UGFxClikWidget*                              BackButton;                                               // 0x014C(0x0008) (Transient)
	int                                                SelectedTabIndex;                                         // 0x0154(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_GamepadScreen");
		return ptr;
	}


	void ASUpdateGamepadLabels(int ConfigType);
	void TabChanged(const struct FEventData& ev);
	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	void PopulateTabButtons();
	void Pop();
	void OnViewDeactivated();
	void Press_Back(const struct FEventData& ev);
	void Press_Accept(const struct FEventData& ev);
	void OnTopMostView(bool bPlayOpenAnimation);
	void OnViewLoaded();
};


// Class OLGame.OLUIFrontEnd_Options_Console
// 0x0028 (0x03A8 - 0x0380)
class UOLUIFrontEnd_Options_Console : public UOLUIFrontEnd_Options
{
public:
	class UGFxObject*                                  SquareLabel;                                              // 0x0380(0x0008) (Transient)
	struct FString                                     OptionsConsole_SettingsText;                              // 0x0388(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     OptionsConsole_HelpText;                                  // 0x0398(0x0010) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_Options_Console");
		return ptr;
	}


	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	int GetFullscreenOptionIndex();
	int GetResolutionOptionIndex();
	bool HasResolutionChanged();
	void TabChanged(const struct FEventData& ev);
	void ResetConsoleOptions();
	void Press_Reset(const struct FEventData& ev);
	void FillOptionValuesFromProfile();
	void PopulateControlsOptions();
	void PopulateTabButtons();
	void Press_Apply(const struct FEventData& ev);
	void Press_OptionItemButton(int PSID);
	void Press_Gamma(const struct FEventData& ev);
	bool back();
	void OnTopMostView(bool bPlayOpenAnimation);
	void OnViewDeactivated();
	void OnViewActivated();
	void OnViewLoaded();
};


// Class OLGame.OLUIFrontEnd_GamepadScreen_Console
// 0x000C (0x0148 - 0x013C)
class UOLUIFrontEnd_GamepadScreen_Console : public UOLUIFrontEnd_Screen
{
public:
	class UGFxClikWidget*                              TabButtons;                                               // 0x013C(0x0008) (Transient)
	int                                                SelectedTabIndex;                                         // 0x0144(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIFrontEnd_GamepadScreen_Console");
		return ptr;
	}


	void ASUpdateGamepadLabels(int ConfigType);
	void TabChanged(const struct FEventData& ev);
	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	void PopulateTabButtons();
	void Pop();
	void OnViewDeactivated();
	bool back();
	void OnTopMostView(bool bPlayOpenAnimation);
	void OnViewLoaded();
};


// Class OLGame.OLUIPopupScreen
// 0x0000 (0x01EC - 0x01EC)
class UOLUIPopupScreen : public UOLGFxMoviePlayer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class OLGame.OLUIPopupScreen");
		return ptr;
	}


	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	void OnClose();
	bool Start(bool StartPaused);
};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
